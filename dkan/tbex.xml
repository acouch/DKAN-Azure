 <?xml version="1.0" encoding="utf-8"?>
<WebPlatform>
  <Links>
    <AddLink InDashboard="True">
      <Title>DKAN Documentation</Title>
      <Description>Get documentation and support at docs.getdkan.com.</Description>
      <Uri>http://docs.getdkan.com</Uri>
      <ImageUri>http://docs.getdkan.com/sites/default/files/dkan-logo.png</ImageUri>
    </AddLink>
  </Links>
  <Ribbon>
		<AddRibbonButton>
      <Label>Site Admin</Label>
      <Uri>/admin</Uri>
      <ImageUri>http://assets.acquia.com/files/webmatrix/drupal_32.png</ImageUri>
		</AddRibbonButton>
	</Ribbon>
  <PathProtection>
    <AllowPath>
      <RelativePath>install</RelativePath>
    </AllowPath>
    <AllowPath AllowNested="False">
      <RelativePath>web.config</RelativePath>
    </AllowPath>
    <ProtectPath>
      <RelativePath>modules</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>bin</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>includes</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>profiles</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>misc</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>sites/default</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>scripts</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>*.php</RelativePath>
    </ProtectPath>
    <ProtectPath>
      <RelativePath>*.htaccess</RelativePath>
    </ProtectPath>
  </PathProtection>
  <CodeCompletion>
    <php version="5.3" schemaversion="1.0">
      <relformatstring>http://api.acquia.com/api/drupal/includes--actions.inc/function/{0}</relformatstring>
      <globalfunctions>
        <iconurl>http://www.acquia.com/sites/default/files/attachments/drop.png</iconurl>
          <items>
            <item name= "actions_actions_map">
              <description>Creates an associative array keyed by hashes of function names or IDs. Hashes are used to prevent actual function names from going out into HTML forms and coming back.</description>
              <signature>actions_actions_map($actions)</signature>
              <docrelurl>actions_actions_map/7</docrelurl>
            </item>
            <item name= "actions_delete">
              <description>Deletes a single action from the database.</description>
              <signature>actions_delete($aid)</signature>
              <docrelurl>actions_delete/7</docrelurl>
            </item>
            <item name= "actions_do">
              <description>Performs a given list of actions by executing their callback functions. Given the IDs of actions to perform, this function finds out what the callback functions for the actions are by querying the database. Then it calls each callback using the function call $function($object, $context, $a1, $a2), passing the input arguments of this function (see below) to the action function.</description>
              <signature>actions_do($action_ids, $object = NULL, $context = NULL, $a1 = NULL, $a2 = NULL)</signature>
              <docrelurl>actions_do/7</docrelurl>
            </item>
            <item name= "actions_function_lookup">
              <description>Given a hash of an action array key, returns the key (function or ID). Faster than actions_actions_map() when you only need the function name or ID.</description>
              <signature>actions_function_lookup($hash)</signature>
              <docrelurl>actions_function_lookup/7</docrelurl>
            </item>
            <item name= "actions_get_all_actions">
              <description>Retrieves all action instances from the database. This function differs from the actions_list() function, which gathers actions by invoking hook_action_info(). The actions returned by this function and the actions returned by actions_list() are partially synchronized. Non-configurable actions from hook_action_info() implementations are put into the database when actions_synchronize() is called, which happens when admin/config/system/actions is visited. Configurable actions are not added to the database until they are configured in the user interface, in which case a database row is created for each configuration of each action.</description>
              <signature>actions_get_all_actions()</signature>
              <docrelurl>actions_get_all_actions/7</docrelurl>
            </item>
            <item name= "actions_list">
              <description>Discovers all available actions by invoking hook_action_info(). This function contrasts with actions_get_all_actions(); see the documentation of actions_get_all_actions() for an explanation.</description>
              <signature>actions_list($reset = FALSE)</signature>
              <docrelurl>actions_list/7</docrelurl>
            </item>
            <item name= "actions_load">
              <description>Retrieves a single action from the database.</description>
              <signature>actions_load($aid)</signature>
              <docrelurl>actions_load/7</docrelurl>
            </item>
            <item name= "actions_loop_test_action_info">
              <description>Implements hook_action_info().</description>
              <signature>actions_loop_test_action_info()</signature>
              <docrelurl>actions_loop_test_action_info/7</docrelurl>
            </item>
            <item name= "actions_loop_test_init">
              <description>Implements hook_init().</description>
              <signature>actions_loop_test_init()</signature>
              <docrelurl>actions_loop_test_init/7</docrelurl>
            </item>
            <item name= "actions_loop_test_install">
              <description>Implements hook_install().</description>
              <signature>actions_loop_test_install()</signature>
              <docrelurl>actions_loop_test_install/7</docrelurl>
            </item>
            <item name= "actions_loop_test_log">
              <description>Write a message to the log.</description>
              <signature>actions_loop_test_log()</signature>
              <docrelurl>actions_loop_test_log/7</docrelurl>
            </item>
            <item name= "actions_loop_test_trigger_info">
              <description>Implements hook_trigger_info().</description>
              <signature>actions_loop_test_trigger_info()</signature>
              <docrelurl>actions_loop_test_trigger_info/7</docrelurl>
            </item>
            <item name= "actions_loop_test_watchdog">
              <description>Implements hook_watchdog().</description>
              <signature>actions_loop_test_watchdog(array $log_entry)</signature>
              <docrelurl>actions_loop_test_watchdog/7</docrelurl>
            </item>
            <item name= "actions_save">
              <description>Saves an action and its user-supplied parameter values to the database.</description>
              <signature>actions_save($function, $type, $params, $label, $aid = NULL)</signature>
              <docrelurl>actions_save/7</docrelurl>
            </item>
            <item name= "actions_synchronize">
              <description>Synchronizes actions that are provided by modules in hook_action_info(). Actions provided by modules in hook_action_info() implementations are synchronized with actions that are stored in the actions database table. This is necessary so that actions that do not require configuration can receive action IDs.</description>
              <signature>actions_synchronize($delete_orphans = FALSE)</signature>
              <docrelurl>actions_synchronize/7</docrelurl>
            </item>
            <item name= "aggregator_admin_form">
              <description>Form builder; Configure the aggregator system.</description>
              <signature>aggregator_admin_form($form, $form_state)</signature>
              <docrelurl>aggregator_admin_form/7</docrelurl>
            </item>
            <item name= "aggregator_admin_form_submit">
              <description>Code modules/aggregator/aggregator.admin.inc, line 502</description>
              <signature>aggregator_admin_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_admin_form_submit/7</docrelurl>
            </item>
            <item name= "aggregator_admin_overview">
              <description>Menu callback; displays the aggregator administration page.</description>
              <signature>aggregator_admin_overview()</signature>
              <docrelurl>aggregator_admin_overview/7</docrelurl>
            </item>
            <item name= "aggregator_admin_refresh_feed">
              <description>Menu callback; refreshes a feed, then redirects to the overview page.</description>
              <signature>aggregator_admin_refresh_feed($feed)</signature>
              <docrelurl>aggregator_admin_refresh_feed/7</docrelurl>
            </item>
            <item name= "aggregator_admin_remove_feed">
              <description>Code modules/aggregator/aggregator.admin.inc, line 202</description>
              <signature>aggregator_admin_remove_feed($form, $form_state, $feed)</signature>
              <docrelurl>aggregator_admin_remove_feed/7</docrelurl>
            </item>
            <item name= "aggregator_admin_remove_feed_submit">
              <description>Remove all items from a feed and redirect to the overview page.</description>
              <signature>aggregator_admin_remove_feed_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_admin_remove_feed_submit/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_fetch">
              <description>Implements hook_aggregator_fetch().</description>
              <signature>aggregator_aggregator_fetch($feed)</signature>
              <docrelurl>aggregator_aggregator_fetch/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_fetch_info">
              <description>Implements hook_aggregator_fetch_info().</description>
              <signature>aggregator_aggregator_fetch_info()</signature>
              <docrelurl>aggregator_aggregator_fetch_info/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_parse">
              <description>Implements hook_aggregator_parse().</description>
              <signature>aggregator_aggregator_parse($feed)</signature>
              <docrelurl>aggregator_aggregator_parse/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_parse_info">
              <description>Implements hook_aggregator_parse_info().</description>
              <signature>aggregator_aggregator_parse_info()</signature>
              <docrelurl>aggregator_aggregator_parse_info/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_process">
              <description>Implements hook_aggregator_process().</description>
              <signature>aggregator_aggregator_process($feed)</signature>
              <docrelurl>aggregator_aggregator_process/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_process_info">
              <description>Implements hook_aggregator_process_info().</description>
              <signature>aggregator_aggregator_process_info()</signature>
              <docrelurl>aggregator_aggregator_process_info/7</docrelurl>
            </item>
            <item name= "aggregator_aggregator_remove">
              <description>Implements hook_aggregator_remove().</description>
              <signature>aggregator_aggregator_remove($feed)</signature>
              <docrelurl>aggregator_aggregator_remove/7</docrelurl>
            </item>
            <item name= "aggregator_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>aggregator_block_configure($delta = '')</signature>
              <docrelurl>aggregator_block_configure/7</docrelurl>
            </item>
            <item name= "aggregator_block_info">
              <description>Implements hook_block_info().</description>
              <signature>aggregator_block_info()</signature>
              <docrelurl>aggregator_block_info/7</docrelurl>
            </item>
            <item name= "aggregator_block_save">
              <description>Implements hook_block_save().</description>
              <signature>aggregator_block_save($delta = '', $edit = array())</signature>
              <docrelurl>aggregator_block_save/7</docrelurl>
            </item>
            <item name= "aggregator_block_view">
              <description>Implements hook_block_view(). Generates blocks for the latest news items in each category and feed.</description>
              <signature>aggregator_block_view($delta = '')</signature>
              <docrelurl>aggregator_block_view/7</docrelurl>
            </item>
            <item name= "aggregator_categorize_items">
              <description>Form builder; build the page list form.</description>
              <signature>aggregator_categorize_items($items, $feed_source = '')</signature>
              <docrelurl>aggregator_categorize_items/7</docrelurl>
            </item>
            <item name= "aggregator_categorize_items_submit">
              <description>Process aggregator_categorize_items() form submissions.</description>
              <signature>aggregator_categorize_items_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_categorize_items_submit/7</docrelurl>
            </item>
            <item name= "aggregator_category_load">
              <description>Load an aggregator category.</description>
              <signature>aggregator_category_load($cid)</signature>
              <docrelurl>aggregator_category_load/7</docrelurl>
            </item>
            <item name= "aggregator_cron">
              <description>Implements hook_cron(). Queues news feeds for updates once their refresh interval has elapsed.</description>
              <signature>aggregator_cron()</signature>
              <docrelurl>aggregator_cron/7</docrelurl>
            </item>
            <item name= "aggregator_cron_queue_info">
              <description>Implements hook_cron_queue_info().</description>
              <signature>aggregator_cron_queue_info()</signature>
              <docrelurl>aggregator_cron_queue_info/7</docrelurl>
            </item>
            <item name= "aggregator_element_data">
              <description>Callback function used by the XML parser.</description>
              <signature>aggregator_element_data($parser, $data)</signature>
              <docrelurl>aggregator_element_data/7</docrelurl>
            </item>
            <item name= "aggregator_element_end">
              <description>Call-back function used by the XML parser.</description>
              <signature>aggregator_element_end($parser, $name)</signature>
              <docrelurl>aggregator_element_end/7</docrelurl>
            </item>
            <item name= "aggregator_element_start">
              <description>Callback function used by the XML parser.</description>
              <signature>aggregator_element_start($parser, $name, $attributes)</signature>
              <docrelurl>aggregator_element_start/7</docrelurl>
            </item>
            <item name= "aggregator_expire">
              <description>Expire feed items on $feed that are older than aggregator_clear.</description>
              <signature>aggregator_expire($feed)</signature>
              <docrelurl>aggregator_expire/7</docrelurl>
            </item>
            <item name= "aggregator_feed_items_load">
              <description>Load feed items</description>
              <signature>aggregator_feed_items_load($type, $data = NULL)</signature>
              <docrelurl>aggregator_feed_items_load/7</docrelurl>
            </item>
            <item name= "aggregator_feed_load">
              <description>Load an aggregator feed.</description>
              <signature>aggregator_feed_load($fid)</signature>
              <docrelurl>aggregator_feed_load/7</docrelurl>
            </item>
            <item name= "aggregator_filter_xss">
              <description>Safely render HTML content, as allowed.</description>
              <signature>aggregator_filter_xss($value)</signature>
              <docrelurl>aggregator_filter_xss/7</docrelurl>
            </item>
            <item name= "aggregator_form_aggregator_admin_form_alter">
              <description>Implements hook_form_aggregator_admin_form_alter(). Form alter aggregator module's own form to keep processor functionality separate from aggregator API functionality.</description>
              <signature>aggregator_form_aggregator_admin_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>aggregator_form_aggregator_admin_form_alter/7</docrelurl>
            </item>
            <item name= "aggregator_form_category">
              <description>Form builder; Generate a form to add/edit/delete aggregator categories.</description>
              <signature>aggregator_form_category($form, &amp;$form_state, $edit = array('title' => '', 'description' => '', 'cid' => NULL))</signature>
              <docrelurl>aggregator_form_category/7</docrelurl>
            </item>
            <item name= "aggregator_form_category_submit">
              <description>Process aggregator_form_category form submissions. @todo Add delete confirmation dialog.</description>
              <signature>aggregator_form_category_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_category_submit/7</docrelurl>
            </item>
            <item name= "aggregator_form_category_validate">
              <description>Validate aggregator_form_feed form submissions.</description>
              <signature>aggregator_form_category_validate($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_category_validate/7</docrelurl>
            </item>
            <item name= "aggregator_form_feed">
              <description>Form builder; Generate a form to add/edit feed sources.</description>
              <signature>aggregator_form_feed($form, &amp;$form_state, stdClass $feed = NULL)</signature>
              <docrelurl>aggregator_form_feed/7</docrelurl>
            </item>
            <item name= "aggregator_form_feed_submit">
              <description>Process aggregator_form_feed() form submissions. @todo Add delete confirmation dialog.</description>
              <signature>aggregator_form_feed_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_feed_submit/7</docrelurl>
            </item>
            <item name= "aggregator_form_feed_validate">
              <description>Validate aggregator_form_feed() form submissions.</description>
              <signature>aggregator_form_feed_validate($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_feed_validate/7</docrelurl>
            </item>
            <item name= "aggregator_form_opml">
              <description>Form builder; Generate a form to import feeds from OPML.</description>
              <signature>aggregator_form_opml($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_opml/7</docrelurl>
            </item>
            <item name= "aggregator_form_opml_submit">
              <description>Process aggregator_form_opml form submissions.</description>
              <signature>aggregator_form_opml_submit($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_opml_submit/7</docrelurl>
            </item>
            <item name= "aggregator_form_opml_validate">
              <description>Validate aggregator_form_opml form submissions.</description>
              <signature>aggregator_form_opml_validate($form, &amp;$form_state)</signature>
              <docrelurl>aggregator_form_opml_validate/7</docrelurl>
            </item>
            <item name= "aggregator_help">
              <description>Implements hook_help().</description>
              <signature>aggregator_help($path, $arg)</signature>
              <docrelurl>aggregator_help/7</docrelurl>
            </item>
            <item name= "aggregator_init">
              <description>Implements hook_init().</description>
              <signature>aggregator_init()</signature>
              <docrelurl>aggregator_init/7</docrelurl>
            </item>
            <item name= "aggregator_menu">
              <description>Implements hook_menu().</description>
              <signature>aggregator_menu()</signature>
              <docrelurl>aggregator_menu/7</docrelurl>
            </item>
            <item name= "aggregator_page_categories">
              <description>Menu callback; displays all the categories used by the aggregator.</description>
              <signature>aggregator_page_categories()</signature>
              <docrelurl>aggregator_page_categories/7</docrelurl>
            </item>
            <item name= "aggregator_page_category">
              <description>Menu callback; displays all the items aggregated in a particular category.</description>
              <signature>aggregator_page_category($category)</signature>
              <docrelurl>aggregator_page_category/7</docrelurl>
            </item>
            <item name= "aggregator_page_category_form">
              <description>Menu callback; displays a form containing items aggregated in a category.</description>
              <signature>aggregator_page_category_form($form, $form_state, $category)</signature>
              <docrelurl>aggregator_page_category_form/7</docrelurl>
            </item>
            <item name= "aggregator_page_last">
              <description>Menu callback; displays the most recent items gathered from any feed.</description>
              <signature>aggregator_page_last()</signature>
              <docrelurl>aggregator_page_last/7</docrelurl>
            </item>
            <item name= "aggregator_page_opml">
              <description>Menu callback; generates an OPML representation of all feeds.</description>
              <signature>aggregator_page_opml($cid = NULL)</signature>
              <docrelurl>aggregator_page_opml/7</docrelurl>
            </item>
            <item name= "aggregator_page_rss">
              <description>Menu callback; generate an RSS 0.92 feed of aggregator items or categories.</description>
              <signature>aggregator_page_rss()</signature>
              <docrelurl>aggregator_page_rss/7</docrelurl>
            </item>
            <item name= "aggregator_page_source">
              <description>Menu callback; displays all the items captured from a particular feed.</description>
              <signature>aggregator_page_source($feed)</signature>
              <docrelurl>aggregator_page_source/7</docrelurl>
            </item>
            <item name= "aggregator_page_sources">
              <description>Menu callback; displays all the feeds used by the aggregator.</description>
              <signature>aggregator_page_sources()</signature>
              <docrelurl>aggregator_page_sources/7</docrelurl>
            </item>
            <item name= "aggregator_page_source_form">
              <description>Menu callback; displays a form with all items captured from a feed.</description>
              <signature>aggregator_page_source_form($form, $form_state, $feed)</signature>
              <docrelurl>aggregator_page_source_form/7</docrelurl>
            </item>
            <item name= "aggregator_parse_feed">
              <description>Parse a feed and store its items.</description>
              <signature>aggregator_parse_feed(&amp;$data, $feed)</signature>
              <docrelurl>aggregator_parse_feed/7</docrelurl>
            </item>
            <item name= "aggregator_parse_w3cdtf">
              <description>Parse the W3C date/time format, a subset of ISO 8601. PHP date parsing functions do not handle this format. See http://www.w3.org/TR/NOTE-datetime for more information. Originally from MagpieRSS (http://magpierss.sourceforge.net/).</description>
              <signature>aggregator_parse_w3cdtf($date_str)</signature>
              <docrelurl>aggregator_parse_w3cdtf/7</docrelurl>
            </item>
            <item name= "aggregator_permission">
              <description>Implements hook_permission().</description>
              <signature>aggregator_permission()</signature>
              <docrelurl>aggregator_permission/7</docrelurl>
            </item>
            <item name= "aggregator_refresh">
              <description>Checks a news feed for new items.</description>
              <signature>aggregator_refresh($feed)</signature>
              <docrelurl>aggregator_refresh/7</docrelurl>
            </item>
            <item name= "aggregator_remove">
              <description>Removes all items from a feed.</description>
              <signature>aggregator_remove($feed)</signature>
              <docrelurl>aggregator_remove/7</docrelurl>
            </item>
            <item name= "aggregator_sanitize_configuration">
              <description>Check and sanitize aggregator configuration. Goes through all fetchers, parsers and processors and checks whether they are available. If one is missing resets to standard configuration.</description>
              <signature>aggregator_sanitize_configuration()</signature>
              <docrelurl>aggregator_sanitize_configuration/7</docrelurl>
            </item>
            <item name= "aggregator_save_category">
              <description>Add/edit/delete aggregator categories.</description>
              <signature>aggregator_save_category($edit)</signature>
              <docrelurl>aggregator_save_category/7</docrelurl>
            </item>
            <item name= "aggregator_save_feed">
              <description>Add/edit/delete an aggregator feed.</description>
              <signature>aggregator_save_feed($edit)</signature>
              <docrelurl>aggregator_save_feed/7</docrelurl>
            </item>
            <item name= "aggregator_save_item">
              <description>Add/edit/delete an aggregator item.</description>
              <signature>aggregator_save_item($edit)</signature>
              <docrelurl>aggregator_save_item/7</docrelurl>
            </item>
            <item name= "aggregator_schema">
              <description>Implements hook_schema().</description>
              <signature>aggregator_schema()</signature>
              <docrelurl>aggregator_schema/7</docrelurl>
            </item>
            <item name= "aggregator_test_feed">
              <description>Page callback. Generates a test feed and simulates last-modified and etags.</description>
              <signature>aggregator_test_feed($use_last_modified = FALSE, $use_etag = FALSE)</signature>
              <docrelurl>aggregator_test_feed/7</docrelurl>
            </item>
            <item name= "aggregator_test_menu">
              <description>Implements hook_menu().</description>
              <signature>aggregator_test_menu()</signature>
              <docrelurl>aggregator_test_menu/7</docrelurl>
            </item>
            <item name= "aggregator_theme">
              <description>Implements hook_theme().</description>
              <signature>aggregator_theme()</signature>
              <docrelurl>aggregator_theme/7</docrelurl>
            </item>
            <item name= "aggregator_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>aggregator_uninstall()</signature>
              <docrelurl>aggregator_uninstall/7</docrelurl>
            </item>
            <item name= "aggregator_update_7000">
              <description>Add hash column to aggregator_feed table.</description>
              <signature>aggregator_update_7000()</signature>
              <docrelurl>aggregator_update_7000/7</docrelurl>
            </item>
            <item name= "aggregator_update_7001">
              <description>Add aggregator teaser length to settings from old global default teaser length</description>
              <signature>aggregator_update_7001()</signature>
              <docrelurl>aggregator_update_7001/7</docrelurl>
            </item>
            <item name= "aggregator_update_7002">
              <description>Add queued timestamp.</description>
              <signature>aggregator_update_7002()</signature>
              <docrelurl>aggregator_update_7002/7</docrelurl>
            </item>
            <item name= "aggregator_view">
              <description>Displays the aggregator administration page.</description>
              <signature>aggregator_view()</signature>
              <docrelurl>aggregator_view/7</docrelurl>
            </item>
            <item name= "ajax_command_after">
              <description>Creates a Drupal AJAX 'insert/after' command. The 'insert/after' command instructs the client to use jQuery's after() method to insert the given HTML content after each element matched by the given selector.</description>
              <signature>ajax_command_after($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_after/7</docrelurl>
            </item>
            <item name= "ajax_command_alert">
              <description>Creates a Drupal AJAX 'alert' command. The 'alert' command instructs the client to display a JavaScript alert dialog box.</description>
              <signature>ajax_command_alert($text)</signature>
              <docrelurl>ajax_command_alert/7</docrelurl>
            </item>
            <item name= "ajax_command_append">
              <description>Creates a Drupal AJAX 'insert/append' command. The 'insert/append' command instructs the client to use jQuery's append() method to append the given HTML content to the inside each element matched by the given selector.</description>
              <signature>ajax_command_append($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_append/7</docrelurl>
            </item>
            <item name= "ajax_command_before">
              <description>Creates a Drupal AJAX 'insert/before' command. The 'insert/before' command instructs the client to use jQuery's before() method to insert the given HTML content before each of elements matched by the given selector.</description>
              <signature>ajax_command_before($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_before/7</docrelurl>
            </item>
            <item name= "ajax_command_changed">
              <description>Creates a Drupal AJAX 'changed' command. This command instructs the client to mark each of the elements matched by the given selector as 'ajax-changed'.</description>
              <signature>ajax_command_changed($selector, $asterisk = '')</signature>
              <docrelurl>ajax_command_changed/7</docrelurl>
            </item>
            <item name= "ajax_command_css">
              <description>Creates a Drupal AJAX 'css' command. The 'css' command will instruct the client to use the jQuery css() method to apply the CSS arguments to elements matched by the given selector.</description>
              <signature>ajax_command_css($selector, $argument)</signature>
              <docrelurl>ajax_command_css/7</docrelurl>
            </item>
            <item name= "ajax_command_data">
              <description>Creates a Drupal AJAX 'data' command. The 'data' command instructs the client to attach the name=value pair of data to the selector via jQuery's data cache.</description>
              <signature>ajax_command_data($selector, $name, $value)</signature>
              <docrelurl>ajax_command_data/7</docrelurl>
            </item>
            <item name= "ajax_command_html">
              <description>Creates a Drupal AJAX 'insert/html' command. The 'insert/html' command instructs the client to use jQuery's html() method to set the HTML content of each element matched by the given selector while leaving the outer tags intact.</description>
              <signature>ajax_command_html($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_html/7</docrelurl>
            </item>
            <item name= "ajax_command_insert">
              <description>Creates a Drupal AJAX 'insert' command using the method in #ajax['method']. This command instructs the client to insert the given HTML using whichever jQuery DOM manipulation method has been specified in the #ajax['method'] variable of the element that triggered the request.</description>
              <signature>ajax_command_insert($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_insert/7</docrelurl>
            </item>
            <item name= "ajax_command_prepend">
              <description>Creates a Drupal AJAX 'insert/prepend' command. The 'insert/prepend' command instructs the client to use jQuery's prepend() method to prepend the given HTML content to the inside each element matched by the given selector.</description>
              <signature>ajax_command_prepend($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_prepend/7</docrelurl>
            </item>
            <item name= "ajax_command_remove">
              <description>Creates a Drupal AJAX 'remove' command. The 'remove' command instructs the client to use jQuery's remove() method to remove each of elements matched by the given selector, and everything within them.</description>
              <signature>ajax_command_remove($selector)</signature>
              <docrelurl>ajax_command_remove/7</docrelurl>
            </item>
            <item name= "ajax_command_replace">
              <description>Creates a Drupal AJAX 'insert/replaceWith' command. The 'insert/replaceWith' command instructs the client to use jQuery's replaceWith() method to replace each element matched matched by the given selector with the given HTML.</description>
              <signature>ajax_command_replace($selector, $html, $settings = NULL)</signature>
              <docrelurl>ajax_command_replace/7</docrelurl>
            </item>
            <item name= "ajax_command_restripe">
              <description>Creates a Drupal AJAX 'restripe' command. The 'restripe' command instructs the client to restripe a table. This is usually used after a table has been modified by a replace or append command.</description>
              <signature>ajax_command_restripe($selector)</signature>
              <docrelurl>ajax_command_restripe/7</docrelurl>
            </item>
            <item name= "ajax_command_settings">
              <description>Creates a Drupal AJAX 'settings' command. The 'settings' command instructs the client either to use the given array as the settings for ajax-loaded content or to extend Drupal.settings with the given array, depending on the value of the $merge parameter.</description>
              <signature>ajax_command_settings($argument, $merge = FALSE)</signature>
              <docrelurl>ajax_command_settings/7</docrelurl>
            </item>
            <item name= "ajax_deliver">
              <description>Package and send the result of a page callback to the browser as an AJAX response.</description>
              <signature>ajax_deliver($page_callback_result)</signature>
              <docrelurl>ajax_deliver/7</docrelurl>
            </item>
            <item name= "ajax_footer">
              <description>Perform end-of-AJAX-request tasks. This function is the equivalent of drupal_page_footer(), but for AJAX requests.</description>
              <signature>ajax_footer()</signature>
              <docrelurl>ajax_footer/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_after_callback">
              <description>AJAX callback for 'after'.</description>
              <signature>ajax_forms_test_advanced_commands_after_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_after_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_alert_callback">
              <description>AJAX callback for 'alert'.</description>
              <signature>ajax_forms_test_advanced_commands_alert_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_alert_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_append_callback">
              <description>AJAX callback for 'append'.</description>
              <signature>ajax_forms_test_advanced_commands_append_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_append_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_before_callback">
              <description>AJAX callback for 'before'.</description>
              <signature>ajax_forms_test_advanced_commands_before_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_before_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_changed_asterisk_callback">
              <description>AJAX callback for 'changed' with asterisk marking inner div.</description>
              <signature>ajax_forms_test_advanced_commands_changed_asterisk_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_changed_asterisk_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_changed_callback">
              <description>AJAX callback for 'changed'.</description>
              <signature>ajax_forms_test_advanced_commands_changed_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_changed_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_css_callback">
              <description>AJAX callback for 'css'.</description>
              <signature>ajax_forms_test_advanced_commands_css_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_css_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_data_callback">
              <description>AJAX callback for 'data'.</description>
              <signature>ajax_forms_test_advanced_commands_data_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_data_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_html_callback">
              <description>AJAX callback for 'html'.</description>
              <signature>ajax_forms_test_advanced_commands_html_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_html_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_insert_callback">
              <description>AJAX callback for 'insert'.</description>
              <signature>ajax_forms_test_advanced_commands_insert_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_insert_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_prepend_callback">
              <description>AJAX callback for 'prepend'.</description>
              <signature>ajax_forms_test_advanced_commands_prepend_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_prepend_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_remove_callback">
              <description>AJAX callback for 'remove'.</description>
              <signature>ajax_forms_test_advanced_commands_remove_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_remove_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_advanced_commands_restripe_callback">
              <description>AJAX callback for 'restripe'.</description>
              <signature>ajax_forms_test_advanced_commands_restripe_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_advanced_commands_restripe_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_ajax_commands_form">
              <description>Form to display the AJAX Commands. _state</description>
              <signature>ajax_forms_test_ajax_commands_form($form, &amp;$form_state)</signature>
              <docrelurl>ajax_forms_test_ajax_commands_form/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_menu">
              <description>Implements hook_menu().</description>
              <signature>ajax_forms_test_menu()</signature>
              <docrelurl>ajax_forms_test_menu/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_simple_form">
              <description>A basic form used to test form_state['values'] during callback.</description>
              <signature>ajax_forms_test_simple_form($form, &amp;$form_state)</signature>
              <docrelurl>ajax_forms_test_simple_form/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_simple_form_checkbox_callback">
              <description>AJAX callback triggered by checkbox.</description>
              <signature>ajax_forms_test_simple_form_checkbox_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_simple_form_checkbox_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_simple_form_select_callback">
              <description>AJAX callback triggered by select.</description>
              <signature>ajax_forms_test_simple_form_select_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_simple_form_select_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_validation_form">
              <description>This form and its related submit and callback functions demonstrate not validating another form element when a single AJAX element is triggered. The "drivertext" element is an AJAX-enabled textfield, free-form. The "required_field" element is a textfield marked required.</description>
              <signature>ajax_forms_test_validation_form($form, &amp;$form_state)</signature>
              <docrelurl>ajax_forms_test_validation_form/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_validation_form_callback">
              <description>AJAX callback for the 'drivertext' element of the validation form.</description>
              <signature>ajax_forms_test_validation_form_callback($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_validation_form_callback/7</docrelurl>
            </item>
            <item name= "ajax_forms_test_validation_form_submit">
              <description>Submit handler for the validation form.</description>
              <signature>ajax_forms_test_validation_form_submit($form, $form_state)</signature>
              <docrelurl>ajax_forms_test_validation_form_submit/7</docrelurl>
            </item>
            <item name= "ajax_form_callback">
              <description>Menu callback; handles AJAX requests for the #ajax Form API property. This rebuilds the form from cache and invokes the defined #ajax['callback'] to return an AJAX command structure for JavaScript. In case no 'callback' has been defined, nothing will happen.</description>
              <signature>ajax_form_callback()</signature>
              <docrelurl>ajax_form_callback/7</docrelurl>
            </item>
            <item name= "ajax_get_form">
              <description>Get a form submitted via #ajax during an AJAX callback. This will load a form from the form cache used during AJAX operations. It pulls the form info from $_POST.</description>
              <signature>ajax_get_form()</signature>
              <docrelurl>ajax_get_form/7</docrelurl>
            </item>
            <item name= "ajax_process_form">
              <description>Add AJAX information about a form element to the page to communicate with JavaScript. If #ajax['path'] is set on an element, this additional JavaScript is added to the page header to attach the AJAX behaviors. See ajax.js for more information.</description>
              <signature>ajax_process_form($element, &amp;$form_state)</signature>
              <docrelurl>ajax_process_form/7</docrelurl>
            </item>
            <item name= "ajax_render">
              <description>Render a commands array into JSON.</description>
              <signature>ajax_render($commands = array())</signature>
              <docrelurl>ajax_render/7</docrelurl>
            </item>
            <item name= "ajax_test_error">
              <description>Menu callback; Returns AJAX element with #error property set.</description>
              <signature>ajax_test_error()</signature>
              <docrelurl>ajax_test_error/7</docrelurl>
            </item>
            <item name= "ajax_test_menu">
              <description>Implements hook_menu().</description>
              <signature>ajax_test_menu()</signature>
              <docrelurl>ajax_test_menu/7</docrelurl>
            </item>
            <item name= "ajax_test_render">
              <description>Menu callback; Returns $_GET['commands'] suitable for use by ajax_deliver(). Additionally ensures that ajax_render() incorporates JavaScript settings by invoking drupal_add_js() with a dummy setting.</description>
              <signature>ajax_test_render()</signature>
              <docrelurl>ajax_test_render/7</docrelurl>
            </item>
            <item name= "archiver_get_archiver">
              <description>Create the appropriate archiver for the specified file.</description>
              <signature>archiver_get_archiver($file)</signature>
              <docrelurl>archiver_get_archiver/7</docrelurl>
            </item>
            <item name= "archiver_get_info">
              <description>Retrieves a list of all available archivers.</description>
              <signature>archiver_get_info()</signature>
              <docrelurl>archiver_get_info/7</docrelurl>
            </item>
            <item name= "arg">
              <description>Return a component of the current Drupal path. When viewing a page at the path "admin/structure/types", for example, arg(0) returns "admin", arg(1) returns "structure", and arg(2) returns "types".</description>
              <signature>arg($index = NULL, $path = NULL)</signature>
              <docrelurl>arg/7</docrelurl>
            </item>
            <item name= "authorize_access_allowed">
              <description>Determine if the current user is allowed to run authorize.php. The killswitch in settings.php overrides all else, otherwise, the user must have access to the 'administer software updates' permission.</description>
              <signature>authorize_access_allowed()</signature>
              <docrelurl>authorize_access_allowed/7</docrelurl>
            </item>
            <item name= "authorize_access_denied_page">
              <description>Render a 403 access denied page for authorize.php</description>
              <signature>authorize_access_denied_page()</signature>
              <docrelurl>authorize_access_denied_page/7</docrelurl>
            </item>
            <item name= "authorize_filetransfer_form">
              <description>Build the form for choosing a FileTransfer type and supplying credentials.</description>
              <signature>authorize_filetransfer_form($form_state)</signature>
              <docrelurl>authorize_filetransfer_form/7</docrelurl>
            </item>
            <item name= "authorize_filetransfer_form_submit">
              <description>Submit callback when a file transfer is being authorized.</description>
              <signature>authorize_filetransfer_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>authorize_filetransfer_form_submit/7</docrelurl>
            </item>
            <item name= "authorize_filetransfer_form_validate">
              <description>Validate callback for the filetransfer authorization form.</description>
              <signature>authorize_filetransfer_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>authorize_filetransfer_form_validate/7</docrelurl>
            </item>
            <item name= "authorize_get_filetransfer">
              <description>Get a FileTransfer class for a specific transfer method and settings.</description>
              <signature>authorize_get_filetransfer($backend, $settings = array())</signature>
              <docrelurl>authorize_get_filetransfer/7</docrelurl>
            </item>
            <item name= "authorize_run_operation">
              <description>Run the operation specified in $_SESSION['authorize_operation']</description>
              <signature>authorize_run_operation($filetransfer)</signature>
              <docrelurl>authorize_run_operation/7</docrelurl>
            </item>
            <item name= "base_path">
              <description>Return the base URL path (i.e., directory) of the Drupal installation. base_path() prefixes and suffixes a "/" onto the returned path if the path is not empty. At the very least, this will return "/".</description>
              <signature>base_path()</signature>
              <docrelurl>base_path/7</docrelurl>
            </item>
            <item name= "batch_get">
              <description>Retrieves the current batch.</description>
              <signature>&amp;batch_get()</signature>
              <docrelurl>batch_get/7</docrelurl>
            </item>
            <item name= "batch_load">
              <description>Loads a batch from the database.</description>
              <signature>batch_load($id)</signature>
              <docrelurl>batch_load/7</docrelurl>
            </item>
            <item name= "batch_process">
              <description>Processes the batch. Unless the batch has been marked with 'progressive' = FALSE, the function issues a drupal_goto and thus ends page execution.</description>
              <signature>batch_process($redirect = NULL, $url = 'batch', $redirect_callback = 'drupal_goto')</signature>
              <docrelurl>batch_process/7</docrelurl>
            </item>
            <item name= "batch_set">
              <description>Opens a new batch.</description>
              <signature>batch_set($batch_definition)</signature>
              <docrelurl>batch_set/7</docrelurl>
            </item>
            <item name= "batch_test_chained_form">
              <description>Form with chained submit callbacks.</description>
              <signature>batch_test_chained_form()</signature>
              <docrelurl>batch_test_chained_form/7</docrelurl>
            </item>
            <item name= "batch_test_chained_form_submit_1">
              <description>Submit handler #1 for the chained form.</description>
              <signature>batch_test_chained_form_submit_1($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_chained_form_submit_1/7</docrelurl>
            </item>
            <item name= "batch_test_chained_form_submit_2">
              <description>Submit handler #2 for the chained form.</description>
              <signature>batch_test_chained_form_submit_2($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_chained_form_submit_2/7</docrelurl>
            </item>
            <item name= "batch_test_chained_form_submit_3">
              <description>Submit handler #3 for the chained form.</description>
              <signature>batch_test_chained_form_submit_3($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_chained_form_submit_3/7</docrelurl>
            </item>
            <item name= "batch_test_chained_form_submit_4">
              <description>Submit handler #4 for the chained form.</description>
              <signature>batch_test_chained_form_submit_4($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_chained_form_submit_4/7</docrelurl>
            </item>
            <item name= "batch_test_menu">
              <description>Implement hook_menu().</description>
              <signature>batch_test_menu()</signature>
              <docrelurl>batch_test_menu/7</docrelurl>
            </item>
            <item name= "batch_test_mock_form">
              <description>A simple form with a textfield and submit button.</description>
              <signature>batch_test_mock_form($form, $form_state)</signature>
              <docrelurl>batch_test_mock_form/7</docrelurl>
            </item>
            <item name= "batch_test_mock_form_submit">
              <description>Submit handler for the batch_test_mock form.</description>
              <signature>batch_test_mock_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_mock_form_submit/7</docrelurl>
            </item>
            <item name= "batch_test_multistep_form">
              <description>Multistep form.</description>
              <signature>batch_test_multistep_form($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_multistep_form/7</docrelurl>
            </item>
            <item name= "batch_test_multistep_form_submit">
              <description>Submit handler for the multistep form.</description>
              <signature>batch_test_multistep_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_multistep_form_submit/7</docrelurl>
            </item>
            <item name= "batch_test_nested_drupal_form_submit">
              <description>Menu callback: programmatically submits a form within a batch.</description>
              <signature>batch_test_nested_drupal_form_submit($value = 1)</signature>
              <docrelurl>batch_test_nested_drupal_form_submit/7</docrelurl>
            </item>
            <item name= "batch_test_no_form">
              <description>Menu callback: fire a batch process without a form submission.</description>
              <signature>batch_test_no_form()</signature>
              <docrelurl>batch_test_no_form/7</docrelurl>
            </item>
            <item name= "batch_test_programmatic">
              <description>Menu callback: programmatically submits the 'Chained' form.</description>
              <signature>batch_test_programmatic($value = 1)</signature>
              <docrelurl>batch_test_programmatic/7</docrelurl>
            </item>
            <item name= "batch_test_redirect_page">
              <description>Menu callback: successful redirection.</description>
              <signature>batch_test_redirect_page()</signature>
              <docrelurl>batch_test_redirect_page/7</docrelurl>
            </item>
            <item name= "batch_test_simple_form">
              <description>Simple form.</description>
              <signature>batch_test_simple_form()</signature>
              <docrelurl>batch_test_simple_form/7</docrelurl>
            </item>
            <item name= "batch_test_simple_form_submit">
              <description>Submit handler for the simple form.</description>
              <signature>batch_test_simple_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>batch_test_simple_form_submit/7</docrelurl>
            </item>
            <item name= "batch_test_stack">
              <description>Helper function: store or retrieve traced execution data.</description>
              <signature>batch_test_stack($data = NULL, $reset = FALSE)</signature>
              <docrelurl>batch_test_stack/7</docrelurl>
            </item>
            <item name= "batch_test_theme_batch">
              <description>Menu callback: run a batch for testing theme used on the progress page.</description>
              <signature>batch_test_theme_batch()</signature>
              <docrelurl>batch_test_theme_batch/7</docrelurl>
            </item>
            <item name= "blocked_ip_load">
              <description>Retrieve a blocked IP address from the database.</description>
              <signature>blocked_ip_load($iid)</signature>
              <docrelurl>blocked_ip_load/7</docrelurl>
            </item>
            <item name= "block_add_block_form">
              <description>Menu callback: display the custom block addition form.</description>
              <signature>block_add_block_form($form, &amp;$form_state)</signature>
              <docrelurl>block_add_block_form/7</docrelurl>
            </item>
            <item name= "block_add_block_form_submit">
              <description>Save the new custom block.</description>
              <signature>block_add_block_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>block_add_block_form_submit/7</docrelurl>
            </item>
            <item name= "block_add_block_form_validate">
              <description>Code modules/block/block.admin.inc, line 431</description>
              <signature>block_add_block_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>block_add_block_form_validate/7</docrelurl>
            </item>
            <item name= "block_admin_configure">
              <description>Menu callback; displays the block configuration form.</description>
              <signature>block_admin_configure($form, &amp;$form_state, $module, $delta)</signature>
              <docrelurl>block_admin_configure/7</docrelurl>
            </item>
            <item name= "block_admin_configure_submit">
              <description>Code modules/block/block.admin.inc, line 376</description>
              <signature>block_admin_configure_submit($form, &amp;$form_state)</signature>
              <docrelurl>block_admin_configure_submit/7</docrelurl>
            </item>
            <item name= "block_admin_configure_validate">
              <description>Code modules/block/block.admin.inc, line 364</description>
              <signature>block_admin_configure_validate($form, &amp;$form_state)</signature>
              <docrelurl>block_admin_configure_validate/7</docrelurl>
            </item>
            <item name= "block_admin_demo">
              <description>Menu callback for admin/structure/block/demo.</description>
              <signature>block_admin_demo($theme = NULL)</signature>
              <docrelurl>block_admin_demo/7</docrelurl>
            </item>
            <item name= "block_admin_display">
              <description>Menu callback for admin/structure/block. @param $theme The theme to display the administration page for. If not provided, defaults to the currently used theme.</description>
              <signature>block_admin_display($theme = NULL)</signature>
              <docrelurl>block_admin_display/7</docrelurl>
            </item>
            <item name= "block_admin_display_form">
              <description>Generate main blocks administration form.</description>
              <signature>block_admin_display_form($form, &amp;$form_state, $blocks, $theme)</signature>
              <docrelurl>block_admin_display_form/7</docrelurl>
            </item>
            <item name= "block_admin_display_form_submit">
              <description>Process main blocks administration form submissions.</description>
              <signature>block_admin_display_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>block_admin_display_form_submit/7</docrelurl>
            </item>
            <item name= "block_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>block_block_configure($delta = 0)</signature>
              <docrelurl>block_block_configure/7</docrelurl>
            </item>
            <item name= "block_block_info">
              <description>Implements hook_block_info().</description>
              <signature>block_block_info()</signature>
              <docrelurl>block_block_info/7</docrelurl>
            </item>
            <item name= "block_block_list_alter">
              <description>Implements hook_block_list_alter(). Check the page, user role and user specific visibilty settings. Remove the block if the visibility conditions are not met.</description>
              <signature>block_block_list_alter(&amp;$blocks)</signature>
              <docrelurl>block_block_list_alter/7</docrelurl>
            </item>
            <item name= "block_block_save">
              <description>Implements hook_block_save().</description>
              <signature>block_block_save($delta = 0, $edit = array())</signature>
              <docrelurl>block_block_save/7</docrelurl>
            </item>
            <item name= "block_block_view">
              <description>Implements hook_block_view(). Generates the administrator-defined blocks for display.</description>
              <signature>block_block_view($delta = 0, $edit = array())</signature>
              <docrelurl>block_block_view/7</docrelurl>
            </item>
            <item name= "block_custom_block_delete">
              <description>Menu callback; confirm deletion of custom blocks.</description>
              <signature>block_custom_block_delete($form, &amp;$form_state, $module, $delta)</signature>
              <docrelurl>block_custom_block_delete/7</docrelurl>
            </item>
            <item name= "block_custom_block_delete_submit">
              <description>Deletion of custom blocks.</description>
              <signature>block_custom_block_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>block_custom_block_delete_submit/7</docrelurl>
            </item>
            <item name= "block_custom_block_form">
              <description>Define the custom block form.</description>
              <signature>block_custom_block_form($edit = array())</signature>
              <docrelurl>block_custom_block_form/7</docrelurl>
            </item>
            <item name= "block_custom_block_get">
              <description>Returns information from database about a user-created (custom) block.</description>
              <signature>block_custom_block_get($bid)</signature>
              <docrelurl>block_custom_block_get/7</docrelurl>
            </item>
            <item name= "block_custom_block_save">
              <description>Saves a user-created block in the database.</description>
              <signature>block_custom_block_save($edit, $delta)</signature>
              <docrelurl>block_custom_block_save/7</docrelurl>
            </item>
            <item name= "block_filter_format_delete">
              <description>Implements hook_filter_format_delete().</description>
              <signature>block_filter_format_delete($format, $fallback)</signature>
              <docrelurl>block_filter_format_delete/7</docrelurl>
            </item>
            <item name= "block_flush_caches">
              <description>Implements hook_flush_caches().</description>
              <signature>block_flush_caches()</signature>
              <docrelurl>block_flush_caches/7</docrelurl>
            </item>
            <item name= "block_form_form_test_alter_form_alter">
              <description>Implements hook_form_FORM_ID_alter() on behalf of block.module.</description>
              <signature>block_form_form_test_alter_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>block_form_form_test_alter_form_alter/7</docrelurl>
            </item>
            <item name= "block_form_system_performance_settings_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>block_form_system_performance_settings_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>block_form_system_performance_settings_alter/7</docrelurl>
            </item>
            <item name= "block_form_user_profile_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>block_form_user_profile_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>block_form_user_profile_form_alter/7</docrelurl>
            </item>
            <item name= "block_get_blocks_by_region">
              <description>Get a renderable array of a region containing all enabled blocks.</description>
              <signature>block_get_blocks_by_region($region)</signature>
              <docrelurl>block_get_blocks_by_region/7</docrelurl>
            </item>
            <item name= "block_help">
              <description>Implements hook_help().</description>
              <signature>block_help($path, $arg)</signature>
              <docrelurl>block_help/7</docrelurl>
            </item>
            <item name= "block_install">
              <description>Implements hook_install().</description>
              <signature>block_install()</signature>
              <docrelurl>block_install/7</docrelurl>
            </item>
            <item name= "block_list">
              <description>
                Return all blocks in the specified region for the current user. @todo Now that the blocks table has a primary key, we should use that as the array key instead of <i>module</i>_<i>delta</i>.
              </description>
              <signature>block_list($region)</signature>
              <docrelurl>block_list/7</docrelurl>
            </item>
            <item name= "block_load">
              <description>Load a block object from the database.</description>
              <signature>block_load($module, $delta)</signature>
              <docrelurl>block_load/7</docrelurl>
            </item>
            <item name= "block_menu">
              <description>Implements hook_menu().</description>
              <signature>block_menu()</signature>
              <docrelurl>block_menu/7</docrelurl>
            </item>
            <item name= "block_menu_delete">
              <description>Implements hook_menu_delete().</description>
              <signature>block_menu_delete($menu)</signature>
              <docrelurl>block_menu_delete/7</docrelurl>
            </item>
            <item name= "block_modules_uninstalled">
              <description>Implements hook_modules_uninstalled(). Cleanup {block} and {block_role} tables from modules' blocks.</description>
              <signature>block_modules_uninstalled($modules)</signature>
              <docrelurl>block_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "block_page_build">
              <description>Implements hook_page_build(). Render blocks into their regions.</description>
              <signature>block_page_build(&amp;$page)</signature>
              <docrelurl>block_page_build/7</docrelurl>
            </item>
            <item name= "block_permission">
              <description>Implements hook_permission().</description>
              <signature>block_permission()</signature>
              <docrelurl>block_permission/7</docrelurl>
            </item>
            <item name= "block_schema">
              <description>Implements hook_schema().</description>
              <signature>block_schema()</signature>
              <docrelurl>block_schema/7</docrelurl>
            </item>
            <item name= "block_test_block_info">
              <description>Implements hook_block_info().</description>
              <signature>block_test_block_info()</signature>
              <docrelurl>block_test_block_info/7</docrelurl>
            </item>
            <item name= "block_test_block_view">
              <description>Implements hook_block_view().</description>
              <signature>block_test_block_view($delta = 0)</signature>
              <docrelurl>block_test_block_view/7</docrelurl>
            </item>
            <item name= "block_theme">
              <description>Implements hook_theme().</description>
              <signature>block_theme()</signature>
              <docrelurl>block_theme/7</docrelurl>
            </item>
            <item name= "block_themes_enabled">
              <description>Initialize blocks for enabled themes.</description>
              <signature>block_themes_enabled($theme_list)</signature>
              <docrelurl>block_themes_enabled/7</docrelurl>
            </item>
            <item name= "block_theme_initialize">
              <description>Assign an initial, default set of blocks for a theme. This function is called the first time a new theme is enabled. The new theme gets a copy of the default theme's blocks, with the difference that if a particular region isn't available in the new theme, the block is assigned to the new theme's default region.</description>
              <signature>block_theme_initialize($theme)</signature>
              <docrelurl>block_theme_initialize/7</docrelurl>
            </item>
            <item name= "block_update_7000">
              <description>Set system.weight to a low value for block module. Block should go first so that other modules can alter its output during hook_page_alter(). Almost everything on the page is a block, so before block module runs, there will not be much to alter.</description>
              <signature>block_update_7000()</signature>
              <docrelurl>block_update_7000/7</docrelurl>
            </item>
            <item name= "block_update_7002">
              <description>Rename {blocks} table to {block}, {blocks_roles} to {block_role} and {boxes} to {block_custom}.</description>
              <signature>block_update_7002()</signature>
              <docrelurl>block_update_7002/7</docrelurl>
            </item>
            <item name= "block_update_7003">
              <description>Change the weight column to normal int.</description>
              <signature>block_update_7003()</signature>
              <docrelurl>block_update_7003/7</docrelurl>
            </item>
            <item name= "block_update_7004">
              <description>Add new blocks to new regions, migrate custom variables to blocks.</description>
              <signature>block_update_7004()</signature>
              <docrelurl>block_update_7004/7</docrelurl>
            </item>
            <item name= "block_update_7005">
              <description>Remove {cache_block}.headers column.</description>
              <signature>block_update_7005()</signature>
              <docrelurl>block_update_7005/7</docrelurl>
            </item>
            <item name= "block_user_role_delete">
              <description>Implements hook_user_role_delete(). Remove deleted role from blocks that use it.</description>
              <signature>block_user_role_delete($role)</signature>
              <docrelurl>block_user_role_delete/7</docrelurl>
            </item>
            <item name= "blog_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>blog_block_configure($delta = '')</signature>
              <docrelurl>blog_block_configure/7</docrelurl>
            </item>
            <item name= "blog_block_info">
              <description>Implements hook_block_info().</description>
              <signature>blog_block_info()</signature>
              <docrelurl>blog_block_info/7</docrelurl>
            </item>
            <item name= "blog_block_save">
              <description>Implements hook_block_save().</description>
              <signature>blog_block_save($delta = '', $edit = array())</signature>
              <docrelurl>blog_block_save/7</docrelurl>
            </item>
            <item name= "blog_block_view">
              <description>Implements hook_block_view(). Displays the most recent 10 blog titles.</description>
              <signature>blog_block_view($delta = '')</signature>
              <docrelurl>blog_block_view/7</docrelurl>
            </item>
            <item name= "blog_feed_last">
              <description>Menu callback; displays an RSS feed containing recent blog entries of all users.</description>
              <signature>blog_feed_last()</signature>
              <docrelurl>blog_feed_last/7</docrelurl>
            </item>
            <item name= "blog_feed_user">
              <description>Menu callback; displays an RSS feed containing recent blog entries of a given user.</description>
              <signature>blog_feed_user($account)</signature>
              <docrelurl>blog_feed_user/7</docrelurl>
            </item>
            <item name= "blog_form">
              <description>Implements hook_form().</description>
              <signature>blog_form($node, $form_state)</signature>
              <docrelurl>blog_form/7</docrelurl>
            </item>
            <item name= "blog_help">
              <description>Implements hook_help().</description>
              <signature>blog_help($path, $arg)</signature>
              <docrelurl>blog_help/7</docrelurl>
            </item>
            <item name= "blog_install">
              <description>Implements hook_install().</description>
              <signature>blog_install()</signature>
              <docrelurl>blog_install/7</docrelurl>
            </item>
            <item name= "blog_menu">
              <description>Implements hook_menu().</description>
              <signature>blog_menu()</signature>
              <docrelurl>blog_menu/7</docrelurl>
            </item>
            <item name= "blog_menu_local_tasks_alter">
              <description>Implements hook_menu_local_tasks_alter().</description>
              <signature>blog_menu_local_tasks_alter(&amp;$data, $router_item, $root_path)</signature>
              <docrelurl>blog_menu_local_tasks_alter/7</docrelurl>
            </item>
            <item name= "blog_node_info">
              <description>Implements hook_node_info().</description>
              <signature>blog_node_info()</signature>
              <docrelurl>blog_node_info/7</docrelurl>
            </item>
            <item name= "blog_node_view">
              <description>Implements hook_node_view().</description>
              <signature>blog_node_view($node, $view_mode)</signature>
              <docrelurl>blog_node_view/7</docrelurl>
            </item>
            <item name= "blog_page_last">
              <description>Menu callback; displays a Drupal page containing recent blog entries of all users.</description>
              <signature>blog_page_last()</signature>
              <docrelurl>blog_page_last/7</docrelurl>
            </item>
            <item name= "blog_page_user">
              <description>Menu callback; displays a Drupal page containing recent blog entries of a given user.</description>
              <signature>blog_page_user($account)</signature>
              <docrelurl>blog_page_user/7</docrelurl>
            </item>
            <item name= "blog_page_user_access">
              <description>Access callback for user blog pages.</description>
              <signature>blog_page_user_access($account)</signature>
              <docrelurl>blog_page_user_access/7</docrelurl>
            </item>
            <item name= "blog_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>blog_rdf_mapping()</signature>
              <docrelurl>blog_rdf_mapping/7</docrelurl>
            </item>
            <item name= "blog_user_view">
              <description>Implements hook_user_view().</description>
              <signature>blog_user_view($account)</signature>
              <docrelurl>blog_user_view/7</docrelurl>
            </item>
            <item name= "blog_view">
              <description>Implements hook_view().</description>
              <signature>blog_view($node, $view_mode)</signature>
              <docrelurl>blog_view/7</docrelurl>
            </item>
            <item name= "book_admin_edit">
              <description>Build the form to administrate the hierarchy of a single book.</description>
              <signature>book_admin_edit($form, $form_state, $node)</signature>
              <docrelurl>book_admin_edit/7</docrelurl>
            </item>
            <item name= "book_admin_edit_submit">
              <description>Handle submission of the book administrative page form. This function takes care to save parent menu items before their children. Saving menu items in the incorrect order can break the menu tree.</description>
              <signature>book_admin_edit_submit($form, &amp;$form_state)</signature>
              <docrelurl>book_admin_edit_submit/7</docrelurl>
            </item>
            <item name= "book_admin_edit_validate">
              <description>Check that the book has not been changed while using the form.</description>
              <signature>book_admin_edit_validate($form, &amp;$form_state)</signature>
              <docrelurl>book_admin_edit_validate/7</docrelurl>
            </item>
            <item name= "book_admin_overview">
              <description>Returns an administrative overview of all books.</description>
              <signature>book_admin_overview()</signature>
              <docrelurl>book_admin_overview/7</docrelurl>
            </item>
            <item name= "book_admin_paths">
              <description>Implements hook_admin_paths().</description>
              <signature>book_admin_paths()</signature>
              <docrelurl>book_admin_paths/7</docrelurl>
            </item>
            <item name= "book_admin_settings">
              <description>Builds and returns the book settings form.</description>
              <signature>book_admin_settings()</signature>
              <docrelurl>book_admin_settings/7</docrelurl>
            </item>
            <item name= "book_admin_settings_validate">
              <description>Validate the book settings form.</description>
              <signature>book_admin_settings_validate($form, &amp;$form_state)</signature>
              <docrelurl>book_admin_settings_validate/7</docrelurl>
            </item>
            <item name= "book_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>book_block_configure($delta = '')</signature>
              <docrelurl>book_block_configure/7</docrelurl>
            </item>
            <item name= "book_block_info">
              <description>Implements hook_block_info().</description>
              <signature>book_block_info()</signature>
              <docrelurl>book_block_info/7</docrelurl>
            </item>
            <item name= "book_block_save">
              <description>Implements hook_block_save().</description>
              <signature>book_block_save($delta = '', $edit = array())</signature>
              <docrelurl>book_block_save/7</docrelurl>
            </item>
            <item name= "book_block_view">
              <description>Implements hook_block_view(). Displays the book table of contents in a block when the current page is a single-node view of a book node.</description>
              <signature>book_block_view($delta = '')</signature>
              <docrelurl>book_block_view/7</docrelurl>
            </item>
            <item name= "book_children">
              <description>Format the menu links for the child pages of the current page.</description>
              <signature>book_children($book_link)</signature>
              <docrelurl>book_children/7</docrelurl>
            </item>
            <item name= "book_entity_info_alter">
              <description>Implements hook_entity_info_alter().</description>
              <signature>book_entity_info_alter(&amp;$info)</signature>
              <docrelurl>book_entity_info_alter/7</docrelurl>
            </item>
            <item name= "book_export">
              <description>Menu callback; Generates various representation of a book page and its children. The function delegates the generation of output to helper functions. The function name is derived by prepending 'book_export_' to the given output type. So, e.g., a type of 'html' results in a call to the function book_export_html().</description>
              <signature>book_export($type, $nid)</signature>
              <docrelurl>book_export/7</docrelurl>
            </item>
            <item name= "book_export_html">
              <description>This function is called by book_export() to generate HTML for export. The given node is /embedded to its absolute depth in a top level section/. For example, a child node with depth 2 in the hierarchy is contained in (otherwise empty) &lt;div&gt; elements corresponding to depth 0 and depth 1. This is intended to support WYSIWYG output - e.g., level 3 sections always look like level 3 sections, no matter their depth relative to the node selected to be exported as printer-friendly HTML.</description>
              <signature>book_export_html($nid)</signature>
              <docrelurl>book_export_html/7</docrelurl>
            </item>
            <item name= "book_export_traverse">
              <description>Traverse the book tree to build printable or exportable output. During the traversal, the $visit_func() callback is applied to each node, and is called recursively for each child of the node (in weight, title order).</description>
              <signature>book_export_traverse($tree, $visit_func)</signature>
              <docrelurl>book_export_traverse/7</docrelurl>
            </item>
            <item name= "book_form_alter">
              <description>Implements hook_form_alter(). Adds the book fieldset to the node form.</description>
              <signature>book_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>book_form_alter/7</docrelurl>
            </item>
            <item name= "book_form_node_delete_confirm_alter">
              <description>Form altering function for the confirm form for a single node deletion.</description>
              <signature>book_form_node_delete_confirm_alter(&amp;$form, $form_state)</signature>
              <docrelurl>book_form_node_delete_confirm_alter/7</docrelurl>
            </item>
            <item name= "book_form_update">
              <description>Renders a new parent page select element when the book selection changes. This function is called via AJAX when the selected book is changed on a node or book outline form. It creates a new parent page select element, adds it to the cached form, and then returns the rendered element so it can be displayed on the form.</description>
              <signature>book_form_update()</signature>
              <docrelurl>book_form_update/7</docrelurl>
            </item>
            <item name= "book_get_books">
              <description>Returns an array of all books. This list may be used for generating a list of all the books, or for building the options for a form select.</description>
              <signature>book_get_books()</signature>
              <docrelurl>book_get_books/7</docrelurl>
            </item>
            <item name= "book_get_flat_menu">
              <description>Get the book menu tree for a page, and return it as a linear array.</description>
              <signature>book_get_flat_menu($book_link)</signature>
              <docrelurl>book_get_flat_menu/7</docrelurl>
            </item>
            <item name= "book_help">
              <description>Implements hook_help().</description>
              <signature>book_help($path, $arg)</signature>
              <docrelurl>book_help/7</docrelurl>
            </item>
            <item name= "book_init">
              <description>Implements hook_init().</description>
              <signature>book_init()</signature>
              <docrelurl>book_init/7</docrelurl>
            </item>
            <item name= "book_install">
              <description>Implements hook_install().</description>
              <signature>book_install()</signature>
              <docrelurl>book_install/7</docrelurl>
            </item>
            <item name= "book_link_load">
              <description>Like menu_link_load(), but adds additional data from the {book} table. Do not call when loading a node, since this function may call node_load().</description>
              <signature>book_link_load($mlid)</signature>
              <docrelurl>book_link_load/7</docrelurl>
            </item>
            <item name= "book_menu">
              <description>Implements hook_menu().</description>
              <signature>book_menu()</signature>
              <docrelurl>book_menu/7</docrelurl>
            </item>
            <item name= "book_menu_name">
              <description>Generate the corresponding menu name from a book ID.</description>
              <signature>book_menu_name($bid)</signature>
              <docrelurl>book_menu_name/7</docrelurl>
            </item>
            <item name= "book_menu_subtree_data">
              <description>Get the data representing a subtree of the book hierarchy. The root of the subtree will be the link passed as a parameter, so the returned tree will contain this item and all its descendents in the menu tree.</description>
              <signature>book_menu_subtree_data($link)</signature>
              <docrelurl>book_menu_subtree_data/7</docrelurl>
            </item>
            <item name= "book_next">
              <description>Fetches the menu link for the next page of the book.</description>
              <signature>book_next($book_link)</signature>
              <docrelurl>book_next/7</docrelurl>
            </item>
            <item name= "book_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>book_node_delete($node)</signature>
              <docrelurl>book_node_delete/7</docrelurl>
            </item>
            <item name= "book_node_export">
              <description>Generates printer-friendly HTML for a node.</description>
              <signature>book_node_export($node, $children = '')</signature>
              <docrelurl>book_node_export/7</docrelurl>
            </item>
            <item name= "book_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>book_node_insert($node)</signature>
              <docrelurl>book_node_insert/7</docrelurl>
            </item>
            <item name= "book_node_load">
              <description>Implements hook_node_load().</description>
              <signature>book_node_load($nodes, $types)</signature>
              <docrelurl>book_node_load/7</docrelurl>
            </item>
            <item name= "book_node_prepare">
              <description>Implements hook_node_prepare().</description>
              <signature>book_node_prepare($node)</signature>
              <docrelurl>book_node_prepare/7</docrelurl>
            </item>
            <item name= "book_node_presave">
              <description>Implements hook_node_presave().</description>
              <signature>book_node_presave($node)</signature>
              <docrelurl>book_node_presave/7</docrelurl>
            </item>
            <item name= "book_node_type_update">
              <description>Implements hook_node_type_update(). Update book module's persistent variables if the machine-readable name of a node type is changed.</description>
              <signature>book_node_type_update($type)</signature>
              <docrelurl>book_node_type_update/7</docrelurl>
            </item>
            <item name= "book_node_update">
              <description>Implements hook_node_update().</description>
              <signature>book_node_update($node)</signature>
              <docrelurl>book_node_update/7</docrelurl>
            </item>
            <item name= "book_node_view">
              <description>Implements hook_node_view().</description>
              <signature>book_node_view($node, $view_mode)</signature>
              <docrelurl>book_node_view/7</docrelurl>
            </item>
            <item name= "book_node_view_link">
              <description>Inject links into $node as needed.</description>
              <signature>book_node_view_link($node, $view_mode)</signature>
              <docrelurl>book_node_view_link/7</docrelurl>
            </item>
            <item name= "book_outline">
              <description>Menu callback; show the outline form for a single node.</description>
              <signature>book_outline($node)</signature>
              <docrelurl>book_outline/7</docrelurl>
            </item>
            <item name= "book_outline_form">
              <description>Build the form to handle all book outline operations via the outline tab.</description>
              <signature>book_outline_form($form, &amp;$form_state, $node)</signature>
              <docrelurl>book_outline_form/7</docrelurl>
            </item>
            <item name= "book_outline_form_submit">
              <description>Handles book outline form submissions from the outline tab.</description>
              <signature>book_outline_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>book_outline_form_submit/7</docrelurl>
            </item>
            <item name= "book_page_alter">
              <description>Implements hook_page_alter(). Add the book menu to the list of menus used to build the active trail when viewing a book page.</description>
              <signature>book_page_alter(&amp;$page)</signature>
              <docrelurl>book_page_alter/7</docrelurl>
            </item>
            <item name= "book_permission">
              <description>Implements hook_permission().</description>
              <signature>book_permission()</signature>
              <docrelurl>book_permission/7</docrelurl>
            </item>
            <item name= "book_pick_book_nojs_submit">
              <description>Submit handler to change a node's book. This handler is run when JavaScript is disabled. It triggers the form to rebuild so that the "Parent item" options are changed to reflect the newly selected book. When JavaScript is enabled, the submit button that triggers this handler is hidden, and the "Book" dropdown directly triggers the book_form_update() AJAX callback instead.</description>
              <signature>book_pick_book_nojs_submit($form, &amp;$form_state)</signature>
              <docrelurl>book_pick_book_nojs_submit/7</docrelurl>
            </item>
            <item name= "book_prev">
              <description>Fetches the menu link for the previous page of the book.</description>
              <signature>book_prev($book_link)</signature>
              <docrelurl>book_prev/7</docrelurl>
            </item>
            <item name= "book_remove_button_submit">
              <description>Button submit function to redirect to removal confirm form.</description>
              <signature>book_remove_button_submit($form, &amp;$form_state)</signature>
              <docrelurl>book_remove_button_submit/7</docrelurl>
            </item>
            <item name= "book_remove_form">
              <description>Menu callback; builds a form to confirm removal of a node from the book.</description>
              <signature>book_remove_form($form, &amp;$form_state, $node)</signature>
              <docrelurl>book_remove_form/7</docrelurl>
            </item>
            <item name= "book_remove_form_submit">
              <description>Confirm form submit function to remove a node from the book.</description>
              <signature>book_remove_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>book_remove_form_submit/7</docrelurl>
            </item>
            <item name= "book_render">
              <description>Menu callback; prints a listing of all books.</description>
              <signature>book_render()</signature>
              <docrelurl>book_render/7</docrelurl>
            </item>
            <item name= "book_schema">
              <description>Implements hook_schema().</description>
              <signature>book_schema()</signature>
              <docrelurl>book_schema/7</docrelurl>
            </item>
            <item name= "book_theme">
              <description>Implements hook_theme().</description>
              <signature>book_theme()</signature>
              <docrelurl>book_theme/7</docrelurl>
            </item>
            <item name= "book_toc">
              <description>Returns an array of book pages in table of contents order.</description>
              <signature>book_toc($bid, $depth_limit, $exclude = array())</signature>
              <docrelurl>book_toc/7</docrelurl>
            </item>
            <item name= "book_type_is_allowed">
              <description>Determine if a given node type is in the list of types allowed for books.</description>
              <signature>book_type_is_allowed($type)</signature>
              <docrelurl>book_type_is_allowed/7</docrelurl>
            </item>
            <item name= "book_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>book_uninstall()</signature>
              <docrelurl>book_uninstall/7</docrelurl>
            </item>
            <item name= "book_update_bid">
              <description>Update the bid for a page and its children when it is moved to a new book.</description>
              <signature>book_update_bid($book_link)</signature>
              <docrelurl>book_update_bid/7</docrelurl>
            </item>
            <item name= "bootstrap_hooks">
              <description>Define the critical hooks that force modules to always be loaded.</description>
              <signature>bootstrap_hooks()</signature>
              <docrelurl>bootstrap_hooks/7</docrelurl>
            </item>
            <item name= "bootstrap_invoke_all">
              <description>Invoke a bootstrap hook in all bootstrap modules that implement it.</description>
              <signature>bootstrap_invoke_all($hook)</signature>
              <docrelurl>bootstrap_invoke_all/7</docrelurl>
            </item>
            <item name= "cache_clear_all">
              <description>Expire data from the cache. If called without arguments, expirable entries will be cleared from the cache_page and cache_block bins.</description>
              <signature>cache_clear_all($cid = NULL, $bin = NULL, $wildcard = FALSE)</signature>
              <docrelurl>cache_clear_all/7</docrelurl>
            </item>
            <item name= "cache_get">
              <description>Return data from the persistent cache Data may be stored as either plain text or as serialized data. cache_get will automatically return unserialized objects and arrays.</description>
              <signature>cache_get($cid, $bin = 'cache')</signature>
              <docrelurl>cache_get/7</docrelurl>
            </item>
            <item name= "cache_get_multiple">
              <description>Return data from the persistent cache when given an array of cache IDs.</description>
              <signature>cache_get_multiple(array &amp;$cids, $bin = 'cache')</signature>
              <docrelurl>cache_get_multiple/7</docrelurl>
            </item>
            <item name= "cache_is_empty">
              <description>Check if a cache bin is empty. A cache bin is considered empty if it does not contain any valid data for any cache ID.</description>
              <signature>cache_is_empty($bin)</signature>
              <docrelurl>cache_is_empty/7</docrelurl>
            </item>
            <item name= "cache_set">
              <description>Store data in the persistent cache. The persistent cache is split up into several cache bins. In the default cache implementation, each cache bin corresponds to a database table by the same name. Other implementations might want to store several bins in data structures that get flushed together. While it is not a problem for most cache bins if the entries in them are flushed before their expire time, some might break functionality or are extremely expensive to recalculate. These will be marked with a (*). The other bins expired automatically by core. Contributed modules can add additional bins and get them expired automatically by implementing hook_flush_caches().</description>
              <signature>cache_set($cid, $data, $bin = 'cache', $expire = CACHE_PERMANENT)</signature>
              <docrelurl>cache_set/7</docrelurl>
            </item>
            <item name= "check_markup">
              <description>Run all the enabled filters on a piece of text. Note: Because filters can inject JavaScript or execute PHP code, security is vital here. When a user supplies a text format, you should validate it using filter_access() before accepting/using it. This is normally done in the validation stage of the Form API. You should for example never make a preview of content in a disallowed format.</description>
              <signature>check_markup($text, $format_id = NULL, $langcode = '', $cache = FALSE)</signature>
              <docrelurl>check_markup/7</docrelurl>
            </item>
            <item name= "check_plain">
              <description>Encode special characters in a plain-text string for display as HTML. Also validates strings as UTF-8 to prevent cross site scripting attacks on Internet Explorer 6.</description>
              <signature>check_plain($text)</signature>
              <docrelurl>check_plain/7</docrelurl>
            </item>
            <item name= "check_url">
              <description>Prepare a URL for use in an HTML attribute. Strips harmful protocols.</description>
              <signature>check_url($uri)</signature>
              <docrelurl>check_url/7</docrelurl>
            </item>
            <item name= "color_form_system_themes_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>color_form_system_themes_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>color_form_system_themes_alter/7</docrelurl>
            </item>
            <item name= "color_form_system_theme_settings_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>color_form_system_theme_settings_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>color_form_system_theme_settings_alter/7</docrelurl>
            </item>
            <item name= "color_get_info">
              <description>Retrieve the color.module info for a particular theme.</description>
              <signature>color_get_info($theme)</signature>
              <docrelurl>color_get_info/7</docrelurl>
            </item>
            <item name= "color_get_palette">
              <description>Helper function to retrieve the color palette for a particular theme.</description>
              <signature>color_get_palette($theme, $default = FALSE)</signature>
              <docrelurl>color_get_palette/7</docrelurl>
            </item>
            <item name= "color_help">
              <description>Implements hook_help().</description>
              <signature>color_help($path, $arg)</signature>
              <docrelurl>color_help/7</docrelurl>
            </item>
            <item name= "color_requirements">
              <description>Code modules/color/color.install, line 9</description>
              <signature>color_requirements($phase)</signature>
              <docrelurl>color_requirements/7</docrelurl>
            </item>
            <item name= "color_scheme_form">
              <description>Form callback. Returns the configuration form.</description>
              <signature>color_scheme_form($complete_form, &amp;$form_state, $theme)</signature>
              <docrelurl>color_scheme_form/7</docrelurl>
            </item>
            <item name= "color_scheme_form_submit">
              <description>Submit handler for color change form.</description>
              <signature>color_scheme_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>color_scheme_form_submit/7</docrelurl>
            </item>
            <item name= "color_theme">
              <description>Implements hook_theme().</description>
              <signature>color_theme()</signature>
              <docrelurl>color_theme/7</docrelurl>
            </item>
            <item name= "comment_access">
              <description>This is *not* a hook_access() implementation. This function is called to determine whether the current user has access to a particular comment. Authenticated users can edit their comments as long they have not been replied to. This prevents people from changing or revising their statements based on the replies to their posts.</description>
              <signature>comment_access($op, $comment)</signature>
              <docrelurl>comment_access/7</docrelurl>
            </item>
            <item name= "comment_action_info">
              <description>Implements hook_action_info().</description>
              <signature>comment_action_info()</signature>
              <docrelurl>comment_action_info/7</docrelurl>
            </item>
            <item name= "comment_admin">
              <description>Menu callback; present an administrative comment listing.</description>
              <signature>comment_admin($type = 'new')</signature>
              <docrelurl>comment_admin/7</docrelurl>
            </item>
            <item name= "comment_admin_overview">
              <description>Form builder; Builds the comment overview form for the admin.</description>
              <signature>comment_admin_overview($form, &amp;$form_state, $arg)</signature>
              <docrelurl>comment_admin_overview/7</docrelurl>
            </item>
            <item name= "comment_admin_overview_submit">
              <description>Process comment_admin_overview form submissions. Execute the chosen 'Update option' on the selected comments, such as publishing, unpublishing or deleting.</description>
              <signature>comment_admin_overview_submit($form, &amp;$form_state)</signature>
              <docrelurl>comment_admin_overview_submit/7</docrelurl>
            </item>
            <item name= "comment_admin_overview_validate">
              <description>Validate comment_admin_overview form submissions.</description>
              <signature>comment_admin_overview_validate($form, &amp;$form_state)</signature>
              <docrelurl>comment_admin_overview_validate/7</docrelurl>
            </item>
            <item name= "comment_approve">
              <description>Menu callback; publish specified comment.</description>
              <signature>comment_approve($cid)</signature>
              <docrelurl>comment_approve/7</docrelurl>
            </item>
            <item name= "comment_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>comment_block_configure($delta = '')</signature>
              <docrelurl>comment_block_configure/7</docrelurl>
            </item>
            <item name= "comment_block_info">
              <description>Implements hook_block_info().</description>
              <signature>comment_block_info()</signature>
              <docrelurl>comment_block_info/7</docrelurl>
            </item>
            <item name= "comment_block_save">
              <description>Implements hook_block_save().</description>
              <signature>comment_block_save($delta = '', $edit = array())</signature>
              <docrelurl>comment_block_save/7</docrelurl>
            </item>
            <item name= "comment_block_view">
              <description>Implements hook_block_view(). Generates a block with the most recent comments.</description>
              <signature>comment_block_view($delta = '')</signature>
              <docrelurl>comment_block_view/7</docrelurl>
            </item>
            <item name= "comment_build_content">
              <description>Builds a structured array representing the comment's content. The content built for the comment (field values, comments, file attachments or other comment components) will vary depending on the $view_mode parameter.</description>
              <signature>comment_build_content($comment, $node, $view_mode = 'full')</signature>
              <docrelurl>comment_build_content/7</docrelurl>
            </item>
            <item name= "comment_confirm_delete">
              <description>Form builder; Builds the confirmation form for deleting a single comment.</description>
              <signature>comment_confirm_delete($form, &amp;$form_state, $comment)</signature>
              <docrelurl>comment_confirm_delete/7</docrelurl>
            </item>
            <item name= "comment_confirm_delete_page">
              <description>Page callback for comment deletions.</description>
              <signature>comment_confirm_delete_page($cid)</signature>
              <docrelurl>comment_confirm_delete_page/7</docrelurl>
            </item>
            <item name= "comment_confirm_delete_submit">
              <description>Process comment_confirm_delete form submissions.</description>
              <signature>comment_confirm_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>comment_confirm_delete_submit/7</docrelurl>
            </item>
            <item name= "comment_count_unpublished">
              <description>Returns a menu title which includes the number of unapproved comments.</description>
              <signature>comment_count_unpublished()</signature>
              <docrelurl>comment_count_unpublished/7</docrelurl>
            </item>
            <item name= "comment_delete">
              <description>Delete a comment and all its replies.</description>
              <signature>comment_delete($cid)</signature>
              <docrelurl>comment_delete/7</docrelurl>
            </item>
            <item name= "comment_delete_multiple">
              <description>Delete comments and all their replies.</description>
              <signature>comment_delete_multiple($cids)</signature>
              <docrelurl>comment_delete_multiple/7</docrelurl>
            </item>
            <item name= "comment_edit_page">
              <description>Page callback for comment editing.</description>
              <signature>comment_edit_page($comment)</signature>
              <docrelurl>comment_edit_page/7</docrelurl>
            </item>
            <item name= "comment_enable">
              <description>Implements hook_enable().</description>
              <signature>comment_enable()</signature>
              <docrelurl>comment_enable/7</docrelurl>
            </item>
            <item name= "comment_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>comment_entity_info()</signature>
              <docrelurl>comment_entity_info/7</docrelurl>
            </item>
            <item name= "comment_field_extra_fields">
              <description>Implements hook_field_extra_fields().</description>
              <signature>comment_field_extra_fields()</signature>
              <docrelurl>comment_field_extra_fields/7</docrelurl>
            </item>
            <item name= "comment_form">
              <description>Generate the basic commenting form, for appending to a node or display on a separate page.</description>
              <signature>comment_form($form, &amp;$form_state, $comment)</signature>
              <docrelurl>comment_form/7</docrelurl>
            </item>
            <item name= "comment_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>comment_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>comment_form_alter/7</docrelurl>
            </item>
            <item name= "comment_form_build_preview">
              <description>Build a preview from submitted form values.</description>
              <signature>comment_form_build_preview($form, &amp;$form_state)</signature>
              <docrelurl>comment_form_build_preview/7</docrelurl>
            </item>
            <item name= "comment_form_node_type_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>comment_form_node_type_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>comment_form_node_type_form_alter/7</docrelurl>
            </item>
            <item name= "comment_form_submit">
              <description>Process comment form submissions; prepare the comment, store it, and set a redirection target.</description>
              <signature>comment_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>comment_form_submit/7</docrelurl>
            </item>
            <item name= "comment_form_submit_build_comment">
              <description>Updates the form state's comment entity by processing this submission's values. This is the default #builder_function for the comment form. It is called during the "Save" and "Preview" submit handlers to retrieve the entity to save or preview. This function can also be called by a "Next" button of a wizard to update the form state's entity with the current step's values before proceeding to the next step.</description>
              <signature>comment_form_submit_build_comment($form, &amp;$form_state)</signature>
              <docrelurl>comment_form_submit_build_comment/7</docrelurl>
            </item>
            <item name= "comment_form_validate">
              <description>Validate comment form submissions.</description>
              <signature>comment_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>comment_form_validate/7</docrelurl>
            </item>
            <item name= "comment_get_display_ordinal">
              <description>Get the display ordinal for a comment, starting from 0. Count the number of comments which appear before the comment we want to display, taking into account display settings and threading.</description>
              <signature>comment_get_display_ordinal($cid, $node_type)</signature>
              <docrelurl>comment_get_display_ordinal/7</docrelurl>
            </item>
            <item name= "comment_get_display_page">
              <description>Return the page number for a comment. Finds the correct page number for a comment taking into account display and paging settings.</description>
              <signature>comment_get_display_page($cid, $node_type)</signature>
              <docrelurl>comment_get_display_page/7</docrelurl>
            </item>
            <item name= "comment_get_recent">
              <description>Find the most recent comments that are available to the current user.</description>
              <signature>comment_get_recent($number = 10)</signature>
              <docrelurl>comment_get_recent/7</docrelurl>
            </item>
            <item name= "comment_get_thread">
              <description>Retrieve comments for a thread.</description>
              <signature>comment_get_thread($node, $mode, $comments_per_page)</signature>
              <docrelurl>comment_get_thread/7</docrelurl>
            </item>
            <item name= "comment_help">
              <description>Implements hook_help().</description>
              <signature>comment_help($path, $arg)</signature>
              <docrelurl>comment_help/7</docrelurl>
            </item>
            <item name= "comment_links">
              <description>Helper function, build links for an individual comment. Adds reply, edit, delete etc. depending on the current user permissions.</description>
              <signature>comment_links($comment, $node)</signature>
              <docrelurl>comment_links/7</docrelurl>
            </item>
            <item name= "comment_load">
              <description>Load the entire comment by cid.</description>
              <signature>comment_load($cid)</signature>
              <docrelurl>comment_load/7</docrelurl>
            </item>
            <item name= "comment_load_multiple">
              <description>Load comments from the database.</description>
              <signature>comment_load_multiple($cids = array(), $conditions = array())</signature>
              <docrelurl>comment_load_multiple/7</docrelurl>
            </item>
            <item name= "comment_menu">
              <description>Implements hook_menu().</description>
              <signature>comment_menu()</signature>
              <docrelurl>comment_menu/7</docrelurl>
            </item>
            <item name= "comment_menu_alter">
              <description>Implements hook_menu_alter().</description>
              <signature>comment_menu_alter(&amp;$items)</signature>
              <docrelurl>comment_menu_alter/7</docrelurl>
            </item>
            <item name= "comment_multiple_delete_confirm">
              <description>List the selected comments and verify that the admin wants to delete them.</description>
              <signature>comment_multiple_delete_confirm($form, &amp;$form_state)</signature>
              <docrelurl>comment_multiple_delete_confirm/7</docrelurl>
            </item>
            <item name= "comment_multiple_delete_confirm_submit">
              <description>Process comment_multiple_delete_confirm form submissions.</description>
              <signature>comment_multiple_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>comment_multiple_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "comment_new_page_count">
              <description>Calculate page number for first new comment.</description>
              <signature>comment_new_page_count($num_comments, $new_replies, $node)</signature>
              <docrelurl>comment_new_page_count/7</docrelurl>
            </item>
            <item name= "comment_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>comment_node_delete($node)</signature>
              <docrelurl>comment_node_delete/7</docrelurl>
            </item>
            <item name= "comment_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>comment_node_insert($node)</signature>
              <docrelurl>comment_node_insert/7</docrelurl>
            </item>
            <item name= "comment_node_load">
              <description>Implements hook_node_load().</description>
              <signature>comment_node_load($nodes, $types)</signature>
              <docrelurl>comment_node_load/7</docrelurl>
            </item>
            <item name= "comment_node_page_additions">
              <description>Build the comment-related elements for node detail pages.</description>
              <signature>comment_node_page_additions($node)</signature>
              <docrelurl>comment_node_page_additions/7</docrelurl>
            </item>
            <item name= "comment_node_prepare">
              <description>Implements hook_node_prepare().</description>
              <signature>comment_node_prepare($node)</signature>
              <docrelurl>comment_node_prepare/7</docrelurl>
            </item>
            <item name= "comment_node_search_result">
              <description>Implements hook_node_search_result(). Formats a comment count string and returns it, for display with search results.</description>
              <signature>comment_node_search_result($node)</signature>
              <docrelurl>comment_node_search_result/7</docrelurl>
            </item>
            <item name= "comment_node_type_delete">
              <description>Implements hook_node_type_delete().</description>
              <signature>comment_node_type_delete($info)</signature>
              <docrelurl>comment_node_type_delete/7</docrelurl>
            </item>
            <item name= "comment_node_type_insert">
              <description>Implements hook_node_type_insert().</description>
              <signature>comment_node_type_insert($info)</signature>
              <docrelurl>comment_node_type_insert/7</docrelurl>
            </item>
            <item name= "comment_node_type_load">
              <description>Menu loader callback for Field UI paths. Return a comment bundle name from a node type in the URL.</description>
              <signature>comment_node_type_load($name)</signature>
              <docrelurl>comment_node_type_load/7</docrelurl>
            </item>
            <item name= "comment_node_type_update">
              <description>Implements hook_node_type_update().</description>
              <signature>comment_node_type_update($info)</signature>
              <docrelurl>comment_node_type_update/7</docrelurl>
            </item>
            <item name= "comment_node_update_index">
              <description>Implements hook_node_update_index().</description>
              <signature>comment_node_update_index($node)</signature>
              <docrelurl>comment_node_update_index/7</docrelurl>
            </item>
            <item name= "comment_node_view">
              <description>Implements hook_node_view().</description>
              <signature>comment_node_view($node, $view_mode)</signature>
              <docrelurl>comment_node_view/7</docrelurl>
            </item>
            <item name= "comment_num_new">
              <description>Get number of new comments for current user and specified node.</description>
              <signature>comment_num_new($nid, $timestamp = 0)</signature>
              <docrelurl>comment_num_new/7</docrelurl>
            </item>
            <item name= "comment_permalink">
              <description>Redirects comment links to the correct page depending on comment settings. Since comments are paged there is no way to guarantee which page a comment appears on. Comment paging and threading settings may be changed at any time. With threaded comments, an individual comment may move between pages as comments can be added either before or after it in the overall discussion. Therefore we use a central routing function for comment links, which calculates the page number based on current comment settings and returns the full comment view with the pager set dynamically.</description>
              <signature>comment_permalink($cid)</signature>
              <docrelurl>comment_permalink/7</docrelurl>
            </item>
            <item name= "comment_permission">
              <description>Implements hook_permission().</description>
              <signature>comment_permission()</signature>
              <docrelurl>comment_permission/7</docrelurl>
            </item>
            <item name= "comment_prepare_thread">
              <description>Loop over comment thread, noting indentation level.</description>
              <signature>comment_prepare_thread(&amp;$comments)</signature>
              <docrelurl>comment_prepare_thread/7</docrelurl>
            </item>
            <item name= "comment_preview">
              <description>Generate a comment preview.</description>
              <signature>comment_preview($comment)</signature>
              <docrelurl>comment_preview/7</docrelurl>
            </item>
            <item name= "comment_publish_action">
              <description>Publishes a comment.</description>
              <signature>comment_publish_action($comment, $context = array())</signature>
              <docrelurl>comment_publish_action/7</docrelurl>
            </item>
            <item name= "comment_ranking">
              <description>Implements hook_ranking().</description>
              <signature>comment_ranking()</signature>
              <docrelurl>comment_ranking/7</docrelurl>
            </item>
            <item name= "comment_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>comment_rdf_mapping()</signature>
              <docrelurl>comment_rdf_mapping/7</docrelurl>
            </item>
            <item name= "comment_reply">
              <description>This function is responsible for generating a comment reply form. There are several cases that have to be handled, including:</description>
              <signature>comment_reply($node, $pid = NULL)</signature>
              <docrelurl>comment_reply/7</docrelurl>
            </item>
            <item name= "comment_save">
              <description>Accepts a submission of new or changed comment content.</description>
              <signature>comment_save($comment)</signature>
              <docrelurl>comment_save/7</docrelurl>
            </item>
            <item name= "comment_save_action">
              <description>Saves a comment.</description>
              <signature>comment_save_action($comment)</signature>
              <docrelurl>comment_save_action/7</docrelurl>
            </item>
            <item name= "comment_schema">
              <description>Implements hook_schema().</description>
              <signature>comment_schema()</signature>
              <docrelurl>comment_schema/7</docrelurl>
            </item>
            <item name= "comment_submit">
              <description>Prepare a comment for submission.</description>
              <signature>comment_submit($comment)</signature>
              <docrelurl>comment_submit/7</docrelurl>
            </item>
            <item name= "comment_theme">
              <description>Implements hook_theme().</description>
              <signature>comment_theme()</signature>
              <docrelurl>comment_theme/7</docrelurl>
            </item>
            <item name= "comment_tokens">
              <description>Implements hook_tokens().</description>
              <signature>comment_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>comment_tokens/7</docrelurl>
            </item>
            <item name= "comment_token_info">
              <description>Implements hook_token_info().</description>
              <signature>comment_token_info()</signature>
              <docrelurl>comment_token_info/7</docrelurl>
            </item>
            <item name= "comment_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>comment_uninstall()</signature>
              <docrelurl>comment_uninstall/7</docrelurl>
            </item>
            <item name= "comment_unpublish_action">
              <description>Unpublishes a comment.</description>
              <signature>comment_unpublish_action($comment, $context = array())</signature>
              <docrelurl>comment_unpublish_action/7</docrelurl>
            </item>
            <item name= "comment_unpublish_by_keyword_action">
              <description>Unpublishes a comment if it contains certain keywords.</description>
              <signature>comment_unpublish_by_keyword_action($comment, $context)</signature>
              <docrelurl>comment_unpublish_by_keyword_action/7</docrelurl>
            </item>
            <item name= "comment_unpublish_by_keyword_action_form">
              <description>Form builder; Prepare a form for blacklisted keywords.</description>
              <signature>comment_unpublish_by_keyword_action_form($context)</signature>
              <docrelurl>comment_unpublish_by_keyword_action_form/7</docrelurl>
            </item>
            <item name= "comment_unpublish_by_keyword_action_submit">
              <description>Process comment_unpublish_by_keyword_action_form form submissions.</description>
              <signature>comment_unpublish_by_keyword_action_submit($form, $form_state)</signature>
              <docrelurl>comment_unpublish_by_keyword_action_submit/7</docrelurl>
            </item>
            <item name= "comment_update_7000">
              <description>Remove comment settings for page ordering.</description>
              <signature>comment_update_7000()</signature>
              <docrelurl>comment_update_7000/7</docrelurl>
            </item>
            <item name= "comment_update_7001">
              <description>Change comment status from published being 0 to being 1</description>
              <signature>comment_update_7001()</signature>
              <docrelurl>comment_update_7001/7</docrelurl>
            </item>
            <item name= "comment_update_7002">
              <description>Rename {comments} table to {comment}.</description>
              <signature>comment_update_7002()</signature>
              <docrelurl>comment_update_7002/7</docrelurl>
            </item>
            <item name= "comment_update_7004">
              <description>Rename comment display setting variables.</description>
              <signature>comment_update_7004()</signature>
              <docrelurl>comment_update_7004/7</docrelurl>
            </item>
            <item name= "comment_update_7005">
              <description>Create comment Field API bundles.</description>
              <signature>comment_update_7005()</signature>
              <docrelurl>comment_update_7005/7</docrelurl>
            </item>
            <item name= "comment_update_7006">
              <description>Create user related indexes.</description>
              <signature>comment_update_7006()</signature>
              <docrelurl>comment_update_7006/7</docrelurl>
            </item>
            <item name= "comment_update_7007">
              <description>Split {comment}.timestamp into 'created' and 'changed', improve indexing on {comment}.</description>
              <signature>comment_update_7007()</signature>
              <docrelurl>comment_update_7007/7</docrelurl>
            </item>
            <item name= "comment_update_7008">
              <description>Add language column to the {comment} table.</description>
              <signature>comment_update_7008()</signature>
              <docrelurl>comment_update_7008/7</docrelurl>
            </item>
            <item name= "comment_update_7009">
              <description>Update preview setting variable to use new constants</description>
              <signature>comment_update_7009()</signature>
              <docrelurl>comment_update_7009/7</docrelurl>
            </item>
            <item name= "comment_update_7010">
              <description>Add {node_comment_statistics}.cid column.</description>
              <signature>comment_update_7010()</signature>
              <docrelurl>comment_update_7010/7</docrelurl>
            </item>
            <item name= "comment_update_7011">
              <description>Add an index to node_comment_statistics on comment_count.</description>
              <signature>comment_update_7011()</signature>
              <docrelurl>comment_update_7011/7</docrelurl>
            </item>
            <item name= "comment_update_7012">
              <description>Create the comment_body field.</description>
              <signature>comment_update_7012()</signature>
              <docrelurl>comment_update_7012/7</docrelurl>
            </item>
            <item name= "comment_update_7013">
              <description>Migrate data from the comment field to field storage.</description>
              <signature>comment_update_7013(&amp;$sandbox)</signature>
              <docrelurl>comment_update_7013/7</docrelurl>
            </item>
            <item name= "comment_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>comment_update_dependencies()</signature>
              <docrelurl>comment_update_dependencies/7</docrelurl>
            </item>
            <item name= "comment_update_index">
              <description>Implements hook_update_index().</description>
              <signature>comment_update_index()</signature>
              <docrelurl>comment_update_index/7</docrelurl>
            </item>
            <item name= "comment_uri">
              <description>Entity uri callback.</description>
              <signature>comment_uri($comment)</signature>
              <docrelurl>comment_uri/7</docrelurl>
            </item>
            <item name= "comment_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>comment_user_cancel($edit, $account, $method)</signature>
              <docrelurl>comment_user_cancel/7</docrelurl>
            </item>
            <item name= "comment_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>comment_user_delete($account)</signature>
              <docrelurl>comment_user_delete/7</docrelurl>
            </item>
            <item name= "comment_view">
              <description>Generate an array for rendering the given comment.</description>
              <signature>comment_view($comment, $node, $view_mode = 'full')</signature>
              <docrelurl>comment_view/7</docrelurl>
            </item>
            <item name= "comment_view_multiple">
              <description>Construct a drupal_render() style array from an array of loaded comments.</description>
              <signature>comment_view_multiple($comments, $node, $view_mode = 'full', $weight = 0)</signature>
              <docrelurl>comment_view_multiple/7</docrelurl>
            </item>
            <item name= "common_test_destination">
              <description>Print destination query parameter.</description>
              <signature>common_test_destination()</signature>
              <docrelurl>common_test_destination/7</docrelurl>
            </item>
            <item name= "common_test_drupal_alter_alter">
              <description>Implements hook_TYPE_alter().</description>
              <signature>common_test_drupal_alter_alter(&amp;$data, &amp;$arg2 = NULL, &amp;$arg3 = NULL)</signature>
              <docrelurl>common_test_drupal_alter_alter/7</docrelurl>
            </item>
            <item name= "common_test_drupal_goto_alter">
              <description>Implements hook_drupal_goto_alter().</description>
              <signature>common_test_drupal_goto_alter(&amp;$path, &amp;$options, &amp;$http_response_code)</signature>
              <docrelurl>common_test_drupal_goto_alter/7</docrelurl>
            </item>
            <item name= "common_test_drupal_goto_land">
              <description>Landing page for drupal_goto().</description>
              <signature>common_test_drupal_goto_land()</signature>
              <docrelurl>common_test_drupal_goto_land/7</docrelurl>
            </item>
            <item name= "common_test_drupal_goto_land_fail">
              <description>Fail landing page for drupal_goto().</description>
              <signature>common_test_drupal_goto_land_fail()</signature>
              <docrelurl>common_test_drupal_goto_land_fail/7</docrelurl>
            </item>
            <item name= "common_test_drupal_goto_redirect">
              <description>Redirect using drupal_goto().</description>
              <signature>common_test_drupal_goto_redirect()</signature>
              <docrelurl>common_test_drupal_goto_redirect/7</docrelurl>
            </item>
            <item name= "common_test_drupal_goto_redirect_advanced">
              <description>Redirect using drupal_goto().</description>
              <signature>common_test_drupal_goto_redirect_advanced()</signature>
              <docrelurl>common_test_drupal_goto_redirect_advanced/7</docrelurl>
            </item>
            <item name= "common_test_js_and_css_querystring">
              <description>Adds a JavaScript file and a CSS file with a query string appended.</description>
              <signature>common_test_js_and_css_querystring()</signature>
              <docrelurl>common_test_js_and_css_querystring/7</docrelurl>
            </item>
            <item name= "common_test_library">
              <description>Implements hook_library(). Adds Farbtastic in a different version.</description>
              <signature>common_test_library()</signature>
              <docrelurl>common_test_library/7</docrelurl>
            </item>
            <item name= "common_test_library_alter">
              <description>Implements hook_library_alter().</description>
              <signature>common_test_library_alter(&amp;$libraries, $module)</signature>
              <docrelurl>common_test_library_alter/7</docrelurl>
            </item>
            <item name= "common_test_menu">
              <description>Implements hook_menu().</description>
              <signature>common_test_menu()</signature>
              <docrelurl>common_test_menu/7</docrelurl>
            </item>
            <item name= "common_test_theme">
              <description>Implements hook_theme().</description>
              <signature>common_test_theme()</signature>
              <docrelurl>common_test_theme/7</docrelurl>
            </item>
            <item name= "confirm_form">
              <description>Generates a form array for a confirmation form. This function returns a complete form array for confirming an action. The form contains a confirm button as well as a cancellation link that allows a user to abort the action.</description>
              <signature>confirm_form($form, $question, $path, $description = NULL, $yes = NULL, $no = NULL, $name = 'confirm')</signature>
              <docrelurl>confirm_form/7</docrelurl>
            </item>
            <item name= "conf_path">
              <description>Find the appropriate configuration directory. Try finding a matching configuration directory by stripping the website's hostname from left to right and pathname from right to left. The first configuration file found will be used; the remaining will ignored. If no configuration file is found, return a default value '$confdir/default'.</description>
              <signature>conf_path($require_settings = TRUE, $reset = FALSE)</signature>
              <docrelurl>conf_path/7</docrelurl>
            </item>
            <item name= "contact_category_delete_form">
              <description>Form builder for deleting a contact category.</description>
              <signature>contact_category_delete_form($form, &amp;$form_state, array $contact)</signature>
              <docrelurl>contact_category_delete_form/7</docrelurl>
            </item>
            <item name= "contact_category_delete_form_submit">
              <description>Submit handler for the confirm delete category form.</description>
              <signature>contact_category_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>contact_category_delete_form_submit/7</docrelurl>
            </item>
            <item name= "contact_category_edit_form">
              <description>Category edit page.</description>
              <signature>contact_category_edit_form($form, &amp;$form_state, array $category = array())</signature>
              <docrelurl>contact_category_edit_form/7</docrelurl>
            </item>
            <item name= "contact_category_edit_form_submit">
              <description>Process the contact category edit page form submission.</description>
              <signature>contact_category_edit_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>contact_category_edit_form_submit/7</docrelurl>
            </item>
            <item name= "contact_category_edit_form_validate">
              <description>Validate the contact category edit page form submission.</description>
              <signature>contact_category_edit_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>contact_category_edit_form_validate/7</docrelurl>
            </item>
            <item name= "contact_category_list">
              <description>Categories/list tab.</description>
              <signature>contact_category_list()</signature>
              <docrelurl>contact_category_list/7</docrelurl>
            </item>
            <item name= "contact_form_user_admin_settings_alter">
              <description>Implement of hook_form_FORM_ID_alter(). Add the default personal contact setting on the user settings page.</description>
              <signature>contact_form_user_admin_settings_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>contact_form_user_admin_settings_alter/7</docrelurl>
            </item>
            <item name= "contact_form_user_profile_form_alter">
              <description>Implements hook_form_FORM_ID_alter(). Add the enable personal contact form to an individual user's account page.</description>
              <signature>contact_form_user_profile_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>contact_form_user_profile_form_alter/7</docrelurl>
            </item>
            <item name= "contact_help">
              <description>Implements hook_help().</description>
              <signature>contact_help($path, $arg)</signature>
              <docrelurl>contact_help/7</docrelurl>
            </item>
            <item name= "contact_install">
              <description>Implements hook_install().</description>
              <signature>contact_install()</signature>
              <docrelurl>contact_install/7</docrelurl>
            </item>
            <item name= "contact_load">
              <description>Load a contact category.</description>
              <signature>contact_load($cid)</signature>
              <docrelurl>contact_load/7</docrelurl>
            </item>
            <item name= "contact_mail">
              <description>Implements hook_mail().</description>
              <signature>contact_mail($key, &amp;$message, $params)</signature>
              <docrelurl>contact_mail/7</docrelurl>
            </item>
            <item name= "contact_menu">
              <description>Implements hook_menu().</description>
              <signature>contact_menu()</signature>
              <docrelurl>contact_menu/7</docrelurl>
            </item>
            <item name= "contact_permission">
              <description>Implements hook_permission().</description>
              <signature>contact_permission()</signature>
              <docrelurl>contact_permission/7</docrelurl>
            </item>
            <item name= "contact_personal_form">
              <description>Form builder; the personal contact form.</description>
              <signature>contact_personal_form($form, &amp;$form_state, $recipient)</signature>
              <docrelurl>contact_personal_form/7</docrelurl>
            </item>
            <item name= "contact_personal_form_submit">
              <description>Form submission handler for contact_personal_form().</description>
              <signature>contact_personal_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>contact_personal_form_submit/7</docrelurl>
            </item>
            <item name= "contact_personal_form_validate">
              <description>Form validation handler for contact_personal_form().</description>
              <signature>contact_personal_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>contact_personal_form_validate/7</docrelurl>
            </item>
            <item name= "contact_schema">
              <description>Implements hook_schema().</description>
              <signature>contact_schema()</signature>
              <docrelurl>contact_schema/7</docrelurl>
            </item>
            <item name= "contact_site_form">
              <description>Form builder; the site-wide contact form.</description>
              <signature>contact_site_form($form, &amp;$form_state)</signature>
              <docrelurl>contact_site_form/7</docrelurl>
            </item>
            <item name= "contact_site_form_submit">
              <description>Form submission handler for contact_site_form().</description>
              <signature>contact_site_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>contact_site_form_submit/7</docrelurl>
            </item>
            <item name= "contact_site_form_validate">
              <description>Form validation handler for contact_site_form().</description>
              <signature>contact_site_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>contact_site_form_validate/7</docrelurl>
            </item>
            <item name= "contact_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>contact_uninstall()</signature>
              <docrelurl>contact_uninstall/7</docrelurl>
            </item>
            <item name= "contact_update_7000">
              <description>Rename the threshold limit variable.</description>
              <signature>contact_update_7000()</signature>
              <docrelurl>contact_update_7000/7</docrelurl>
            </item>
            <item name= "contact_update_7001">
              <description>Rename the administer contact forms permission.</description>
              <signature>contact_update_7001()</signature>
              <docrelurl>contact_update_7001/7</docrelurl>
            </item>
            <item name= "contact_update_7002">
              <description>Enable the 'access user contact forms' for registered users by default.</description>
              <signature>contact_update_7002()</signature>
              <docrelurl>contact_update_7002/7</docrelurl>
            </item>
            <item name= "contact_update_7003">
              <description>Change the weight column to normal int.</description>
              <signature>contact_update_7003()</signature>
              <docrelurl>contact_update_7003/7</docrelurl>
            </item>
            <item name= "contact_user_presave">
              <description>Implements hook_user_presave().</description>
              <signature>contact_user_presave(&amp;$edit, $account, $category)</signature>
              <docrelurl>contact_user_presave/7</docrelurl>
            </item>
            <item name= "contextual_help">
              <description>Implements hook_help().</description>
              <signature>contextual_help($path, $arg)</signature>
              <docrelurl>contextual_help/7</docrelurl>
            </item>
            <item name= "contextual_library">
              <description>Implements hook_library().</description>
              <signature>contextual_library()</signature>
              <docrelurl>contextual_library/7</docrelurl>
            </item>
            <item name= "contextual_links_view">
              <description>Build a renderable array for contextual links.</description>
              <signature>contextual_links_view($element)</signature>
              <docrelurl>contextual_links_view/7</docrelurl>
            </item>
            <item name= "contextual_permission">
              <description>Implements hook_permission().</description>
              <signature>contextual_permission()</signature>
              <docrelurl>contextual_permission/7</docrelurl>
            </item>
            <item name= "contextual_preprocess">
              <description>Template variable preprocessor for contextual links.</description>
              <signature>contextual_preprocess(&amp;$variables, $hook)</signature>
              <docrelurl>contextual_preprocess/7</docrelurl>
            </item>
            <item name= "country_get_list">
              <description>Get list of all predefined and custom countries.</description>
              <signature>country_get_list()</signature>
              <docrelurl>country_get_list/7</docrelurl>
            </item>
            <item name= "current_path">
              <description>Return the current URL path of the page being viewed. Examples:</description>
              <signature>current_path()</signature>
              <docrelurl>current_path/7</docrelurl>
            </item>
            <item name= "dashboard_admin">
              <description>Dashboard page callback.</description>
              <signature>dashboard_admin($launch_customize = FALSE)</signature>
              <docrelurl>dashboard_admin/7</docrelurl>
            </item>
            <item name= "dashboard_block_list_alter">
              <description>Implements hook_block_list_alter(). Skip rendering dashboard blocks when not on the dashboard page itself. This prevents expensive dashboard blocks from causing performance issues on pages where they will never be displayed.</description>
              <signature>dashboard_block_list_alter(&amp;$blocks)</signature>
              <docrelurl>dashboard_block_list_alter/7</docrelurl>
            </item>
            <item name= "dashboard_dashboard_regions">
              <description>Implements hook_dashboard_regions().</description>
              <signature>dashboard_dashboard_regions()</signature>
              <docrelurl>dashboard_dashboard_regions/7</docrelurl>
            </item>
            <item name= "dashboard_help">
              <description>Implements hook_help().</description>
              <signature>dashboard_help($path, $arg)</signature>
              <docrelurl>dashboard_help/7</docrelurl>
            </item>
            <item name= "dashboard_is_visible">
              <description>Determines if the dashboard should be displayed on the current page. This function checks if the user is currently viewing the dashboard and has access to see it. It is used by other functions in the dashboard module to decide whether or not the dashboard content should be displayed to the current user.</description>
              <signature>dashboard_is_visible()</signature>
              <docrelurl>dashboard_is_visible/7</docrelurl>
            </item>
            <item name= "dashboard_menu">
              <description>Implements hook_menu().</description>
              <signature>dashboard_menu()</signature>
              <docrelurl>dashboard_menu/7</docrelurl>
            </item>
            <item name= "dashboard_menu_alter">
              <description>Implements hook_menu_alter().</description>
              <signature>dashboard_menu_alter(&amp;$items)</signature>
              <docrelurl>dashboard_menu_alter/7</docrelurl>
            </item>
            <item name= "dashboard_page_build">
              <description>Implements hook_page_build(). Display dashboard blocks in the main content region.</description>
              <signature>dashboard_page_build(&amp;$page)</signature>
              <docrelurl>dashboard_page_build/7</docrelurl>
            </item>
            <item name= "dashboard_regions">
              <description>Return an array of dashboard region names.</description>
              <signature>dashboard_regions()</signature>
              <docrelurl>dashboard_regions/7</docrelurl>
            </item>
            <item name= "dashboard_region_descriptions">
              <description>Return an array of dashboard region descriptions, keyed by region name.</description>
              <signature>dashboard_region_descriptions()</signature>
              <docrelurl>dashboard_region_descriptions/7</docrelurl>
            </item>
            <item name= "dashboard_show_block_content">
              <description>AJAX callback to display the rendered contents of a specific block.</description>
              <signature>dashboard_show_block_content($module, $delta)</signature>
              <docrelurl>dashboard_show_block_content/7</docrelurl>
            </item>
            <item name= "dashboard_show_disabled">
              <description>AJAX callback to show disabled blocks in the dashboard customization mode.</description>
              <signature>dashboard_show_disabled()</signature>
              <docrelurl>dashboard_show_disabled/7</docrelurl>
            </item>
            <item name= "dashboard_system_info_alter">
              <description>Implements hook_system_info_alter(). Add regions to each theme to store the dashboard blocks.</description>
              <signature>dashboard_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>dashboard_system_info_alter/7</docrelurl>
            </item>
            <item name= "dashboard_theme">
              <description>Implements hook_theme().</description>
              <signature>dashboard_theme()</signature>
              <docrelurl>dashboard_theme/7</docrelurl>
            </item>
            <item name= "dashboard_update">
              <description>Set the new weight of each region according to the drag-and-drop order.</description>
              <signature>dashboard_update()</signature>
              <docrelurl>dashboard_update/7</docrelurl>
            </item>
            <item name= "database_test_db_query_temporary">
              <description>Run a db_query_temporary and output the table name and its number of rows. We need to test that the table created is temporary, so we run it here, in a separate menu callback request; After this request is done, the temporary table should automatically dropped.</description>
              <signature>database_test_db_query_temporary()</signature>
              <docrelurl>database_test_db_query_temporary/7</docrelurl>
            </item>
            <item name= "database_test_even_pager_query">
              <description>Run a pager query and return the results. This function does care about the page GET parameter, as set by the simpletest HTTP call.</description>
              <signature>database_test_even_pager_query($limit)</signature>
              <docrelurl>database_test_even_pager_query/7</docrelurl>
            </item>
            <item name= "database_test_menu">
              <description>Implements hook_menu().</description>
              <signature>database_test_menu()</signature>
              <docrelurl>database_test_menu/7</docrelurl>
            </item>
            <item name= "database_test_odd_pager_query">
              <description>Run a pager query and return the results. This function does care about the page GET parameter, as set by the simpletest HTTP call.</description>
              <signature>database_test_odd_pager_query($limit)</signature>
              <docrelurl>database_test_odd_pager_query/7</docrelurl>
            </item>
            <item name= "database_test_query_alter">
              <description>Implements hook_query_alter().</description>
              <signature>database_test_query_alter(QueryAlterableInterface $query)</signature>
              <docrelurl>database_test_query_alter/7</docrelurl>
            </item>
            <item name= "database_test_query_database_test_alter_remove_range_alter">
              <description>Implements hook_query_TAG_alter(). Called by DatabaseTestCase::testAlterRemoveRange.</description>
              <signature>database_test_query_database_test_alter_remove_range_alter(QueryAlterableInterface $query)</signature>
              <docrelurl>database_test_query_database_test_alter_remove_range_alter/7</docrelurl>
            </item>
            <item name= "database_test_schema">
              <description>Implements hook_schema(). The database tests use the database API which depends on schema information for certain operations on certain databases. Therefore, the schema must actually be declared in a normal module like any other, not directly in the test file.</description>
              <signature>database_test_schema()</signature>
              <docrelurl>database_test_schema/7</docrelurl>
            </item>
            <item name= "database_test_tablesort">
              <description>Run a tablesort query and return the results. This function does care about the page GET parameter, as set by the simpletest HTTP call.</description>
              <signature>database_test_tablesort()</signature>
              <docrelurl>database_test_tablesort/7</docrelurl>
            </item>
            <item name= "database_test_tablesort_first">
              <description>Run a tablesort query with a second order_by after and return the results. This function does care about the page GET parameter, as set by the simpletest HTTP call.</description>
              <signature>database_test_tablesort_first()</signature>
              <docrelurl>database_test_tablesort_first/7</docrelurl>
            </item>
            <item name= "date_iso8601">
              <description>Returns an ISO8601 formatted date based on the given date. Can be used as a callback for RDF mappings.</description>
              <signature>date_iso8601($date)</signature>
              <docrelurl>date_iso8601/7</docrelurl>
            </item>
            <item name= "date_validate">
              <description>Validates the date type to stop dates like February 30, 2006.</description>
              <signature>date_validate($form)</signature>
              <docrelurl>date_validate/7</docrelurl>
            </item>
            <item name= "dblog_build_filter_query">
              <description>Build query for dblog administration filters based on session.</description>
              <signature>dblog_build_filter_query()</signature>
              <docrelurl>dblog_build_filter_query/7</docrelurl>
            </item>
            <item name= "dblog_clear_log_form">
              <description>Return form for dblog clear button.</description>
              <signature>dblog_clear_log_form($form)</signature>
              <docrelurl>dblog_clear_log_form/7</docrelurl>
            </item>
            <item name= "dblog_clear_log_submit">
              <description>Submit callback: clear database with log messages.</description>
              <signature>dblog_clear_log_submit()</signature>
              <docrelurl>dblog_clear_log_submit/7</docrelurl>
            </item>
            <item name= "dblog_cron">
              <description>Implements hook_cron(). Remove expired log messages and flood control events.</description>
              <signature>dblog_cron()</signature>
              <docrelurl>dblog_cron/7</docrelurl>
            </item>
            <item name= "dblog_event">
              <description>Menu callback; displays details about a log message.</description>
              <signature>dblog_event($id)</signature>
              <docrelurl>dblog_event/7</docrelurl>
            </item>
            <item name= "dblog_filters">
              <description>List dblog administration filters that can be applied.</description>
              <signature>dblog_filters()</signature>
              <docrelurl>dblog_filters/7</docrelurl>
            </item>
            <item name= "dblog_filter_form">
              <description>Return form for dblog administration filters.</description>
              <signature>dblog_filter_form($form)</signature>
              <docrelurl>dblog_filter_form/7</docrelurl>
            </item>
            <item name= "dblog_filter_form_submit">
              <description>Process result from dblog administration filter form.</description>
              <signature>dblog_filter_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>dblog_filter_form_submit/7</docrelurl>
            </item>
            <item name= "dblog_filter_form_validate">
              <description>Validate result from dblog administration filter form.</description>
              <signature>dblog_filter_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>dblog_filter_form_validate/7</docrelurl>
            </item>
            <item name= "dblog_form_system_logging_settings_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>dblog_form_system_logging_settings_alter(&amp;$form, $form_state)</signature>
              <docrelurl>dblog_form_system_logging_settings_alter/7</docrelurl>
            </item>
            <item name= "dblog_help">
              <description>Implements hook_help().</description>
              <signature>dblog_help($path, $arg)</signature>
              <docrelurl>dblog_help/7</docrelurl>
            </item>
            <item name= "dblog_init">
              <description>Implements hook_init().</description>
              <signature>dblog_init()</signature>
              <docrelurl>dblog_init/7</docrelurl>
            </item>
            <item name= "dblog_menu">
              <description>Implements hook_menu().</description>
              <signature>dblog_menu()</signature>
              <docrelurl>dblog_menu/7</docrelurl>
            </item>
            <item name= "dblog_overview">
              <description>Menu callback; displays a listing of log messages. Messages are truncated at 56 chars. Full-length message could be viewed at the message details page.</description>
              <signature>dblog_overview()</signature>
              <docrelurl>dblog_overview/7</docrelurl>
            </item>
            <item name= "dblog_schema">
              <description>Implements hook_schema().</description>
              <signature>dblog_schema()</signature>
              <docrelurl>dblog_schema/7</docrelurl>
            </item>
            <item name= "dblog_theme">
              <description>Implements hook_theme().</description>
              <signature>dblog_theme()</signature>
              <docrelurl>dblog_theme/7</docrelurl>
            </item>
            <item name= "dblog_top">
              <description>Menu callback; generic function to display a page of the most frequent events. Messages are not truncated because events from this page have no detail view.</description>
              <signature>dblog_top($type)</signature>
              <docrelurl>dblog_top/7</docrelurl>
            </item>
            <item name= "dblog_update_7001">
              <description>Allow NULL values for links.</description>
              <signature>dblog_update_7001()</signature>
              <docrelurl>dblog_update_7001/7</docrelurl>
            </item>
            <item name= "dblog_update_7002">
              <description>Add index on uid.</description>
              <signature>dblog_update_7002()</signature>
              <docrelurl>dblog_update_7002/7</docrelurl>
            </item>
            <item name= "dblog_update_7003">
              <description>Allow longer type values.</description>
              <signature>dblog_update_7003()</signature>
              <docrelurl>dblog_update_7003/7</docrelurl>
            </item>
            <item name= "dblog_watchdog">
              <description>Implements hook_watchdog(). Note some values may be truncated for database column size restrictions.</description>
              <signature>dblog_watchdog(array $log_entry)</signature>
              <docrelurl>dblog_watchdog/7</docrelurl>
            </item>
            <item name= "db_add_field">
              <description>Adds a new field to a table.</description>
              <signature>db_add_field($table, $field, $spec, $keys_new = array())</signature>
              <docrelurl>db_add_field/7</docrelurl>
            </item>
            <item name= "db_add_index">
              <description>Adds an index.</description>
              <signature>db_add_index($table, $name, $fields)</signature>
              <docrelurl>db_add_index/7</docrelurl>
            </item>
            <item name= "db_add_primary_key">
              <description>Adds a primary key to a database table.</description>
              <signature>db_add_primary_key($table, $fields)</signature>
              <docrelurl>db_add_primary_key/7</docrelurl>
            </item>
            <item name= "db_add_unique_key">
              <description>Adds a unique key.</description>
              <signature>db_add_unique_key($table, $name, $fields)</signature>
              <docrelurl>db_add_unique_key/7</docrelurl>
            </item>
            <item name= "db_and">
              <description>Returns a new DatabaseCondition, set to "AND" all conditions together.</description>
              <signature>db_and()</signature>
              <docrelurl>db_and/7</docrelurl>
            </item>
            <item name= "db_autoload">
              <description>Autoload callback for the database system.</description>
              <signature>db_autoload($class)</signature>
              <docrelurl>db_autoload/7</docrelurl>
            </item>
            <item name= "db_change_field">
              <description>Changes a field definition. IMPORTANT NOTE: To maintain database portability, you have to explicitly recreate all indices and primary keys that are using the changed field.</description>
              <signature>db_change_field($table, $field, $field_new, $spec, $keys_new = array())</signature>
              <docrelurl>db_change_field/7</docrelurl>
            </item>
            <item name= "db_close">
              <description>Closes the active database connection.</description>
              <signature>db_close(array $options = array())</signature>
              <docrelurl>db_close/7</docrelurl>
            </item>
            <item name= "db_condition">
              <description>Returns a new DatabaseCondition, set to the specified conjunction. Internal API function call. The db_and(), db_or(), and db_xor() functions are preferred.</description>
              <signature>db_condition($conjunction)</signature>
              <docrelurl>db_condition/7</docrelurl>
            </item>
            <item name= "db_create_table">
              <description>Creates a new table from a Drupal table definition.</description>
              <signature>db_create_table($name, $table)</signature>
              <docrelurl>db_create_table/7</docrelurl>
            </item>
            <item name= "db_delete">
              <description>Returns a new DeleteQuery object for the active database.</description>
              <signature>db_delete($table, array $options = array())</signature>
              <docrelurl>db_delete/7</docrelurl>
            </item>
            <item name= "db_driver">
              <description>Retrieves the name of the currently active database driver.</description>
              <signature>db_driver()</signature>
              <docrelurl>db_driver/7</docrelurl>
            </item>
            <item name= "db_drop_field">
              <description>Drops a field.</description>
              <signature>db_drop_field($table, $field)</signature>
              <docrelurl>db_drop_field/7</docrelurl>
            </item>
            <item name= "db_drop_index">
              <description>Drops an index.</description>
              <signature>db_drop_index($table, $name)</signature>
              <docrelurl>db_drop_index/7</docrelurl>
            </item>
            <item name= "db_drop_primary_key">
              <description>Drops the primary key of a database table.</description>
              <signature>db_drop_primary_key($table)</signature>
              <docrelurl>db_drop_primary_key/7</docrelurl>
            </item>
            <item name= "db_drop_table">
              <description>Drops a table.</description>
              <signature>db_drop_table($table)</signature>
              <docrelurl>db_drop_table/7</docrelurl>
            </item>
            <item name= "db_drop_unique_key">
              <description>Drops a unique key.</description>
              <signature>db_drop_unique_key($table, $name)</signature>
              <docrelurl>db_drop_unique_key/7</docrelurl>
            </item>
            <item name= "db_escape_field">
              <description>Restricts a dynamic column or constraint name to safe characters. Only keeps alphanumeric and underscores.</description>
              <signature>db_escape_field($field)</signature>
              <docrelurl>db_escape_field/7</docrelurl>
            </item>
            <item name= "db_escape_table">
              <description>Restricts a dynamic table name to safe characters. Only keeps alphanumeric and underscores.</description>
              <signature>db_escape_table($table)</signature>
              <docrelurl>db_escape_table/7</docrelurl>
            </item>
            <item name= "db_field_exists">
              <description>Checks if a column exists in the given table.</description>
              <signature>db_field_exists($table, $field)</signature>
              <docrelurl>db_field_exists/7</docrelurl>
            </item>
            <item name= "db_field_names">
              <description>Returns an array of field names from an array of key/index column specifiers. This is usually an identity function but if a key/index uses a column prefix specification, this function extracts just the name.</description>
              <signature>db_field_names($fields)</signature>
              <docrelurl>db_field_names/7</docrelurl>
            </item>
            <item name= "db_field_set_default">
              <description>Sets the default value for a field.</description>
              <signature>db_field_set_default($table, $field, $default)</signature>
              <docrelurl>db_field_set_default/7</docrelurl>
            </item>
            <item name= "db_field_set_no_default">
              <description>Sets a field to have no default value.</description>
              <signature>db_field_set_no_default($table, $field)</signature>
              <docrelurl>db_field_set_no_default/7</docrelurl>
            </item>
            <item name= "db_find_tables">
              <description>Finds all tables that are like the specified base table name.</description>
              <signature>db_find_tables($table_expression)</signature>
              <docrelurl>db_find_tables/7</docrelurl>
            </item>
            <item name= "db_ignore_slave">
              <description>Sets a session variable specifying the lag time for ignoring a slave server.</description>
              <signature>db_ignore_slave()</signature>
              <docrelurl>db_ignore_slave/7</docrelurl>
            </item>
            <item name= "db_index_exists">
              <description>Checks if an index exists in the given table.</description>
              <signature>db_index_exists($table, $name)</signature>
              <docrelurl>db_index_exists/7</docrelurl>
            </item>
            <item name= "db_insert">
              <description>Returns a new InsertQuery object for the active database.</description>
              <signature>db_insert($table, array $options = array())</signature>
              <docrelurl>db_insert/7</docrelurl>
            </item>
            <item name= "db_like">
              <description>Escapes characters that work as wildcard characters in a LIKE pattern. The wildcard characters "%" and "_" as well as backslash are prefixed with a backslash. Use this to do a search for a verbatim string without any wildcard behavior.</description>
              <signature>db_like($string)</signature>
              <docrelurl>db_like/7</docrelurl>
            </item>
            <item name= "db_merge">
              <description>Returns a new MergeQuery object for the active database.</description>
              <signature>db_merge($table, array $options = array())</signature>
              <docrelurl>db_merge/7</docrelurl>
            </item>
            <item name= "db_next_id">
              <description>Retrieves a unique id. Use this function if for some reason you can't use a serial field. Using a serial field is preferred, and InsertQuery::execute() returns the value of the last ID inserted.</description>
              <signature>db_next_id($existing_id = 0)</signature>
              <docrelurl>db_next_id/7</docrelurl>
            </item>
            <item name= "db_or">
              <description>Returns a new DatabaseCondition, set to "OR" all conditions together.</description>
              <signature>db_or()</signature>
              <docrelurl>db_or/7</docrelurl>
            </item>
            <item name= "db_query">
              <description>Executes an arbitrary query string against the active database. Do not use this function for INSERT, UPDATE, or DELETE queries. Those should be handled via the appropriate query builder factory. Use this function for SELECT queries that do not require a query builder.</description>
              <signature>db_query($query, array $args = array(), array $options = array())</signature>
              <docrelurl>db_query/7</docrelurl>
            </item>
            <item name= "db_query_range">
              <description>Executes a query against the active database, restricted to a range.</description>
              <signature>db_query_range($query, $from, $count, array $args = array(), array $options = array())</signature>
              <docrelurl>db_query_range/7</docrelurl>
            </item>
            <item name= "db_query_temporary">
              <description>Executes a query string and saves the result set to a temporary table. The execution of the query string happens against the active database.</description>
              <signature>db_query_temporary($query, array $args = array(), array $options = array())</signature>
              <docrelurl>db_query_temporary/7</docrelurl>
            </item>
            <item name= "db_rename_table">
              <description>Renames a table.</description>
              <signature>db_rename_table($table, $new_name)</signature>
              <docrelurl>db_rename_table/7</docrelurl>
            </item>
            <item name= "db_run_tasks">
              <description>Ensures the environment for a Drupal database on a predefined connection. This will run tasks that check that Drupal can perform all of the functions on a database, that Drupal needs. Tasks include simple checks like CREATE TABLE to database specific functions like stored procedures and client encoding.</description>
              <signature>db_run_tasks($driver)</signature>
              <docrelurl>db_run_tasks/7</docrelurl>
            </item>
            <item name= "db_select">
              <description>Returns a new SelectQuery object for the active database.</description>
              <signature>db_select($table, $alias = NULL, array $options = array())</signature>
              <docrelurl>db_select/7</docrelurl>
            </item>
            <item name= "db_set_active">
              <description>Sets a new active database.</description>
              <signature>db_set_active($key = 'default')</signature>
              <docrelurl>db_set_active/7</docrelurl>
            </item>
            <item name= "db_table_exists">
              <description>Checks if a table exists.</description>
              <signature>db_table_exists($table)</signature>
              <docrelurl>db_table_exists/7</docrelurl>
            </item>
            <item name= "db_transaction">
              <description>Returns a new transaction object for the active database.</description>
              <signature>db_transaction($name = NULL, array $options = array())</signature>
              <docrelurl>db_transaction/7</docrelurl>
            </item>
            <item name= "db_truncate">
              <description>Returns a new TruncateQuery object for the active database.</description>
              <signature>db_truncate($table, array $options = array())</signature>
              <docrelurl>db_truncate/7</docrelurl>
            </item>
            <item name= "db_update">
              <description>Returns a new UpdateQuery object for the active database.</description>
              <signature>db_update($table, array $options = array())</signature>
              <docrelurl>db_update/7</docrelurl>
            </item>
            <item name= "db_xor">
              <description>Returns a new DatabaseCondition, set to "XOR" all conditions together.</description>
              <signature>db_xor()</signature>
              <docrelurl>db_xor/7</docrelurl>
            </item>
            <item name= "debug">
              <description>Debug function used for outputting debug information. The debug information is passed on to trigger_error() after being converted to a string using _drupal_debug_message().</description>
              <signature>debug($data, $label = NULL, $print_r = FALSE)</signature>
              <docrelurl>debug/7</docrelurl>
            </item>
            <item name= "decode_entities">
              <description>
                Decodes all HTML entities (including numerical ones) to regular UTF-8 bytes. Double-escaped entities will only be decoded once ("&amp;lt;" becomes "&lt;", not "&lt;"). Be careful when using this function, as decode_entities can revert previous sanitization efforts (&lt;script&gt; will become &lt;script&gt;).
              </description>
              <signature>decode_entities($text, $exclude = array())</signature>
              <docrelurl>decode_entities/7</docrelurl>
            </item>
            <item name= "drupal_access_denied">
              <description>Deliver a "access denied" error to the browser. Page callback functions wanting to report an "access denied" message should return MENU_ACCESS_DENIED instead of calling drupal_access_denied(). However, functions that are invoked in contexts where that return value might not bubble up to menu_execute_active_handler() should call drupal_access_denied().</description>
              <signature>drupal_access_denied()</signature>
              <docrelurl>drupal_access_denied/7</docrelurl>
            </item>
            <item name= "drupal_add_css">
              <description>Adds a cascading stylesheet to the stylesheet queue. Calling drupal_static_reset('drupal_add_css') will clear all cascading stylesheets added so far.</description>
              <signature>drupal_add_css($data = NULL, $options = NULL)</signature>
              <docrelurl>drupal_add_css/7</docrelurl>
            </item>
            <item name= "drupal_add_feed">
              <description>Add a feed URL for the current page. This function can be called as long the HTML header hasn't been sent.</description>
              <signature>drupal_add_feed($url = NULL, $title = '')</signature>
              <docrelurl>drupal_add_feed/7</docrelurl>
            </item>
            <item name= "drupal_add_html_head">
              <description>Add output to the head tag of the HTML page. This function can be called as long the headers aren't sent. Pass no arguments (or NULL for both) to retrieve the currently stored elements.</description>
              <signature>drupal_add_html_head($data = NULL, $key = NULL)</signature>
              <docrelurl>drupal_add_html_head/7</docrelurl>
            </item>
            <item name= "drupal_add_html_head_link">
              <description>Add a LINK tag with a distinct 'rel' attribute to the page's HEAD. This function can be called as long the HTML header hasn't been sent, which on normal pages is up through the preprocess step of theme('html'). Adding a link will overwrite a prior link with the exact same 'rel' and 'href' attributes.</description>
              <signature>drupal_add_html_head_link($attributes, $header = FALSE)</signature>
              <docrelurl>drupal_add_html_head_link/7</docrelurl>
            </item>
            <item name= "drupal_add_http_header">
              <description>Set an HTTP response header for the current page. Note: When sending a Content-Type header, always include a 'charset' type, too. This is necessary to avoid security bugs (e.g. UTF-7 XSS).</description>
              <signature>drupal_add_http_header($name, $value, $append = FALSE)</signature>
              <docrelurl>drupal_add_http_header/7</docrelurl>
            </item>
            <item name= "drupal_add_js">
              <description>Adds a JavaScript file, setting, or inline code to the page. The behavior of this function depends on the parameters it is called with. Generally, it handles the addition of JavaScript to the page, either as reference to an existing file or as inline code. The following actions can be performed using this function:</description>
              <signature>drupal_add_js($data = NULL, $options = NULL)</signature>
              <docrelurl>drupal_add_js/7</docrelurl>
            </item>
            <item name= "drupal_add_library">
              <description>Adds multiple JavaScript or CSS files at the same time. A library defines a set of JavaScript and/or CSS files, optionally using settings, and optionally requiring another library. For example, a library can be a jQuery plugin, a JavaScript framework, or a CSS framework. This function allows modules to load a library defined/shipped by itself or a depending module; without having to add all files of the library separately. Each library is only loaded once.</description>
              <signature>drupal_add_library($module, $name)</signature>
              <docrelurl>drupal_add_library/7</docrelurl>
            </item>
            <item name= "drupal_add_region_content">
              <description>Add content to a specified region.</description>
              <signature>drupal_add_region_content($region = NULL, $data = NULL)</signature>
              <docrelurl>drupal_add_region_content/7</docrelurl>
            </item>
            <item name= "drupal_add_tabledrag">
              <description>Assist in adding the tableDrag JavaScript behavior to a themed table. Draggable tables should be used wherever an outline or list of sortable items needs to be arranged by an end-user. Draggable tables are very flexible and can manipulate the value of form elements placed within individual columns.</description>
              <signature>drupal_add_tabledrag($table_id, $action, $relationship, $group, $subgroup = NULL, $source = NULL, $hidden = TRUE, $limit = 0)</signature>
              <docrelurl>drupal_add_tabledrag/7</docrelurl>
            </item>
            <item name= "drupal_aggregate_css">
              <description>Default callback to aggregate CSS files and inline content. Having the browser load fewer CSS files results in much faster page loads than when it loads many small files. This function aggregates files within the same group into a single file unless the site-wide setting to do so is disabled (commonly the case during site development). To optimize download, it also compresses the aggregate files by removing comments, whitespace, and other unnecessary content. Additionally, this functions aggregates inline content together, regardless of the site-wide aggregation setting.</description>
              <signature>drupal_aggregate_css(&amp;$css_groups)</signature>
              <docrelurl>drupal_aggregate_css/7</docrelurl>
            </item>
            <item name= "drupal_alter">
              <description>Hands off alterable variables to type-specific *_alter implementations. This dispatch function hands off the passed in variables to type-specific hook_TYPE_alter() implementations in modules. It ensures a consistent interface for all altering operations.</description>
              <signature>drupal_alter($type, &amp;$data, &amp;$context1 = NULL, &amp;$context2 = NULL)</signature>
              <docrelurl>drupal_alter/7</docrelurl>
            </item>
            <item name= "drupal_anonymous_user">
              <description>Generates a default anonymous $user object.</description>
              <signature>drupal_anonymous_user($session = '')</signature>
              <docrelurl>drupal_anonymous_user/7</docrelurl>
            </item>
            <item name= "drupal_attributes">
              <description>Format an attribute string to insert in a tag. Each array key and its value will be formatted into an HTML attribute string. If a value is itself an array, then each array element is concatenated with a space between each value (e.g. a multi-value class attribute).</description>
              <signature>drupal_attributes(array $attributes = array())</signature>
              <docrelurl>drupal_attributes/7</docrelurl>
            </item>
            <item name= "drupal_autoload_class">
              <description>Confirm that a class is available. This function is rarely called directly. Instead, it is registered as an spl_autoload() handler, and PHP calls it for us when necessary.</description>
              <signature>drupal_autoload_class($class)</signature>
              <docrelurl>drupal_autoload_class/7</docrelurl>
            </item>
            <item name= "drupal_autoload_interface">
              <description>Confirm that an interface is available. This function is rarely called directly. Instead, it is registered as an spl_autoload() handler, and PHP calls it for us when necessary.</description>
              <signature>drupal_autoload_interface($interface)</signature>
              <docrelurl>drupal_autoload_interface/7</docrelurl>
            </item>
            <item name= "drupal_block_denied">
              <description>Handle denied users.</description>
              <signature>drupal_block_denied($ip)</signature>
              <docrelurl>drupal_block_denied/7</docrelurl>
            </item>
            <item name= "drupal_bootstrap">
              <description>A string describing a phase of Drupal to load. Each phase adds to the previous one, so invoking a later phase automatically runs the earlier phases too. The most important usage is that if you want to access the Drupal database from a script without loading anything else, you can include bootstrap.inc, and call drupal_bootstrap(DRUPAL_BOOTSTRAP_DATABASE).</description>
              <signature>drupal_bootstrap($phase = NULL, $new_phase = TRUE)</signature>
              <docrelurl>drupal_bootstrap/7</docrelurl>
            </item>
            <item name= "drupal_build_css_cache">
              <description>Aggregates and optimizes CSS files into a cache file in the files directory. The file name for the CSS cache file is generated from the hash of the aggregated contents of the files in $css. This forces proxies and browsers to download new CSS when the CSS changes.</description>
              <signature>drupal_build_css_cache($css)</signature>
              <docrelurl>drupal_build_css_cache/7</docrelurl>
            </item>
            <item name= "drupal_build_form">
              <description>Build and process a form based on a form id. The form may also be retrieved from the cache if the form was built in a previous page-load. The form is then passed on for processing, validation and submission if there is proper input.</description>
              <signature>drupal_build_form($form_id, &amp;$form_state)</signature>
              <docrelurl>drupal_build_form/7</docrelurl>
            </item>
            <item name= "drupal_build_js_cache">
              <description>Aggregates JavaScript files into a cache file in the files directory. The file name for the JavaScript cache file is generated from the hash of the aggregated contents of the files in $files. This forces proxies and browsers to download new JavaScript when the JavaScript changes.</description>
              <signature>drupal_build_js_cache($files)</signature>
              <docrelurl>drupal_build_js_cache/7</docrelurl>
            </item>
            <item name= "drupal_cache_system_paths">
              <description>Cache system paths for a page. Cache an array of the system paths available on each page. We assume that aliases will be needed for the majority of these paths during subsequent requests, and load them in a single query during drupal_lookup_path().</description>
              <signature>drupal_cache_system_paths()</signature>
              <docrelurl>drupal_cache_system_paths/7</docrelurl>
            </item>
            <item name= "drupal_check_incompatibility">
              <description>Check whether a version is compatible with a given dependency.</description>
              <signature>drupal_check_incompatibility($v, $current_version)</signature>
              <docrelurl>drupal_check_incompatibility/7</docrelurl>
            </item>
            <item name= "drupal_check_module">
              <description>Check a module's requirements.</description>
              <signature>drupal_check_module($module)</signature>
              <docrelurl>drupal_check_module/7</docrelurl>
            </item>
            <item name= "drupal_check_profile">
              <description>Check an install profile's requirements.</description>
              <signature>drupal_check_profile($profile)</signature>
              <docrelurl>drupal_check_profile/7</docrelurl>
            </item>
            <item name= "drupal_chmod">
              <description>Set the permissions on a file or directory. This function will use the 'file_chmod_directory' and 'file_chmod_file' variables for the default modes for directories and uploaded/generated files. By default these will give everyone read access so that users accessing the files with a user account without the webserver group (e.g. via FTP) can read these files, and give group write permissions so webserver group members (e.g. a vhost account) can alter files uploaded and owned by the webserver.</description>
              <signature>drupal_chmod($uri, $mode = NULL)</signature>
              <docrelurl>drupal_chmod/7</docrelurl>
            </item>
            <item name= "drupal_clean_css_identifier">
              <description>Prepare a string for use as a valid CSS identifier (element, class or ID name). http://www.w3.org/TR/CSS21/syndata.html#characters shows the syntax for valid CSS identifiers (including element names, classes, and IDs in selectors.)</description>
              <signature>drupal_clean_css_identifier($identifier, $filter = array(' ' => '-', '_' => '-', '/' => '-', '[' => '-', ']' => ''))</signature>
              <docrelurl>drupal_clean_css_identifier/7</docrelurl>
            </item>
            <item name= "drupal_clear_css_cache">
              <description>Deletes old cached CSS files.</description>
              <signature>drupal_clear_css_cache()</signature>
              <docrelurl>drupal_clear_css_cache/7</docrelurl>
            </item>
            <item name= "drupal_clear_js_cache">
              <description>Deletes old cached JavaScript files and variables.</description>
              <signature>drupal_clear_js_cache()</signature>
              <docrelurl>drupal_clear_js_cache/7</docrelurl>
            </item>
            <item name= "drupal_clear_path_cache">
              <description>Clear the path cache.</description>
              <signature>drupal_clear_path_cache($source = NULL)</signature>
              <docrelurl>drupal_clear_path_cache/7</docrelurl>
            </item>
            <item name= "drupal_common_theme">
              <description>Provide theme registration for themes across .inc files.</description>
              <signature>drupal_common_theme()</signature>
              <docrelurl>drupal_common_theme/7</docrelurl>
            </item>
            <item name= "drupal_convert_to_utf8">
              <description>Convert data to UTF-8 Requires the iconv, GNU recode or mbstring PHP extension.</description>
              <signature>drupal_convert_to_utf8($data, $encoding)</signature>
              <docrelurl>drupal_convert_to_utf8/7</docrelurl>
            </item>
            <item name= "drupal_cron_cleanup">
              <description>Shutdown function for cron cleanup.</description>
              <signature>drupal_cron_cleanup()</signature>
              <docrelurl>drupal_cron_cleanup/7</docrelurl>
            </item>
            <item name= "drupal_cron_run">
              <description>Executes a cron run when called. Do not call this function from test, use $this->cronRun() instead.</description>
              <signature>drupal_cron_run()</signature>
              <docrelurl>drupal_cron_run/7</docrelurl>
            </item>
            <item name= "drupal_delete_file_if_stale">
              <description>Callback to delete files modified more than a set time ago.</description>
              <signature>drupal_delete_file_if_stale($uri)</signature>
              <docrelurl>drupal_delete_file_if_stale/7</docrelurl>
            </item>
            <item name= "drupal_deliver_html_page">
              <description>Package and send the result of a page callback to the browser as HTML.</description>
              <signature>drupal_deliver_html_page($page_callback_result)</signature>
              <docrelurl>drupal_deliver_html_page/7</docrelurl>
            </item>
            <item name= "drupal_deliver_page">
              <description>Deliver a page callback result to the browser in the format appropriate. This function is most commonly called by menu_execute_active_handler(), but can also be called by error conditions such as drupal_not_found(), drupal_access_denied(), and drupal_site_offline().</description>
              <signature>drupal_deliver_page($page_callback_result, $default_delivery_callback = NULL)</signature>
              <docrelurl>drupal_deliver_page/7</docrelurl>
            </item>
            <item name= "drupal_depth_first_search">
              <description>Perform a depth first sort on a directed acyclic graph.</description>
              <signature>drupal_depth_first_search(&amp;$graph)</signature>
              <docrelurl>drupal_depth_first_search/7</docrelurl>
            </item>
            <item name= "drupal_detect_baseurl">
              <description>Auto detect the base_url with PHP predefined variables.</description>
              <signature>drupal_detect_baseurl($file = 'install.php')</signature>
              <docrelurl>drupal_detect_baseurl/7</docrelurl>
            </item>
            <item name= "drupal_detect_database_types">
              <description>Detect all supported databases that are compiled into PHP.</description>
              <signature>drupal_detect_database_types()</signature>
              <docrelurl>drupal_detect_database_types/7</docrelurl>
            </item>
            <item name= "drupal_dirname">
              <description>Gets the name of the directory from a given path. PHP's dirname() does not properly pass streams, so this function fills that gap. It is backwards compatible with normal paths and will use PHP's dirname() as a fallback.</description>
              <signature>drupal_dirname($uri)</signature>
              <docrelurl>drupal_dirname/7</docrelurl>
            </item>
            <item name= "drupal_encode_path">
              <description>Encodes a Drupal path for use in a URL. For aesthetic reasons slashes are not escaped.</description>
              <signature>drupal_encode_path($path)</signature>
              <docrelurl>drupal_encode_path/7</docrelurl>
            </item>
            <item name= "drupal_environment_initialize">
              <description>Initialize PHP environment.</description>
              <signature>drupal_environment_initialize()</signature>
              <docrelurl>drupal_environment_initialize/7</docrelurl>
            </item>
            <item name= "drupal_error_levels">
              <description>Map PHP error constants to watchdog severity levels. The error constants are documented at http://php.net/manual/en/errorfunc.constants.php</description>
              <signature>drupal_error_levels()</signature>
              <docrelurl>drupal_error_levels/7</docrelurl>
            </item>
            <item name= "drupal_exit">
              <description>Perform end-of-request tasks. In some cases page requests need to end without calling drupal_page_footer(). In these cases, call drupal_exit() instead. There should rarely be a reason to call exit instead of drupal_exit();</description>
              <signature>drupal_exit($destination = NULL)</signature>
              <docrelurl>drupal_exit/7</docrelurl>
            </item>
            <item name= "drupal_explode_tags">
              <description>Explode a string of given tags into an array.</description>
              <signature>drupal_explode_tags($tags)</signature>
              <docrelurl>drupal_explode_tags/7</docrelurl>
            </item>
            <item name= "drupal_find_theme_functions">
              <description>Allow themes and/or theme engines to easily discover overridden theme functions.</description>
              <signature>drupal_find_theme_functions($cache, $prefixes)</signature>
              <docrelurl>drupal_find_theme_functions/7</docrelurl>
            </item>
            <item name= "drupal_find_theme_templates">
              <description>Allow themes and/or theme engines to easily discover overridden templates.</description>
              <signature>drupal_find_theme_templates($cache, $extension, $path)</signature>
              <docrelurl>drupal_find_theme_templates/7</docrelurl>
            </item>
            <item name= "drupal_flush_all_caches">
              <description>Flush all cached data on the site. Empties cache tables, rebuilds the menu cache and theme registries, and invokes a hook so that other modules' cache data can be cleared as well.</description>
              <signature>drupal_flush_all_caches()</signature>
              <docrelurl>drupal_flush_all_caches/7</docrelurl>
            </item>
            <item name= "drupal_form_submit">
              <description>Retrieves, populates, and processes a form. This function allows you to supply values for form elements and submit a form for processing. Compare to drupal_get_form(), which also builds and processes a form, but does not allow you to supply values.</description>
              <signature>drupal_form_submit($form_id, &amp;$form_state)</signature>
              <docrelurl>drupal_form_submit/7</docrelurl>
            </item>
            <item name= "drupal_generate_test_ua">
              <description>Generate a user agent string with a HMAC and timestamp for simpletest.</description>
              <signature>drupal_generate_test_ua($prefix)</signature>
              <docrelurl>drupal_generate_test_ua/7</docrelurl>
            </item>
            <item name= "drupal_get_bootstrap_phase">
              <description>Returns the current bootstrap phase for this Drupal process. The current phase is the one most recently completed by drupal_bootstrap().</description>
              <signature>drupal_get_bootstrap_phase()</signature>
              <docrelurl>drupal_get_bootstrap_phase/7</docrelurl>
            </item>
            <item name= "drupal_get_breadcrumb">
              <description>Get the breadcrumb trail for the current page.</description>
              <signature>drupal_get_breadcrumb()</signature>
              <docrelurl>drupal_get_breadcrumb/7</docrelurl>
            </item>
            <item name= "drupal_get_css">
              <description>Returns a themed representation of all stylesheets that should be attached to the page. It loads the CSS in order, with 'module' first, then 'theme' afterwards. This ensures proper cascading of styles so themes can easily override module styles through CSS selectors.</description>
              <signature>drupal_get_css($css = NULL)</signature>
              <docrelurl>drupal_get_css/7</docrelurl>
            </item>
            <item name= "drupal_get_destination">
              <description>Prepare a 'destination' URL query parameter for use in combination with drupal_goto(). Used to direct the user back to the referring page after completing a form. By default the current URL is returned. If a destination exists in the previous request, that destination is returned. As such, a destination can persist across multiple pages.</description>
              <signature>drupal_get_destination()</signature>
              <docrelurl>drupal_get_destination/7</docrelurl>
            </item>
            <item name= "drupal_get_feeds">
              <description>Get the feed URLs for the current page.</description>
              <signature>drupal_get_feeds($delimiter = "\n")</signature>
              <docrelurl>drupal_get_feeds/7</docrelurl>
            </item>
            <item name= "drupal_get_filename">
              <description>Returns and optionally sets the filename for a system item (module, theme, etc.). The filename, whether provided, cached, or retrieved from the database, is only returned if the file exists. This function plays a key role in allowing Drupal's resources (modules and themes) to be located in different places depending on a site's configuration. For example, a module 'foo' may legally be be located in any of these three places:</description>
              <signature>drupal_get_filename($type, $name, $filename = NULL)</signature>
              <docrelurl>drupal_get_filename/7</docrelurl>
            </item>
            <item name= "drupal_get_form">
              <description>Wrapper for drupal_build_form() for use when $form_state is not needed.</description>
              <signature>drupal_get_form($form_id)</signature>
              <docrelurl>drupal_get_form/7</docrelurl>
            </item>
            <item name= "drupal_get_hash_salt">
              <description>Get a salt useful for hardening against SQL injection.</description>
              <signature>drupal_get_hash_salt()</signature>
              <docrelurl>drupal_get_hash_salt/7</docrelurl>
            </item>
            <item name= "drupal_get_html_head">
              <description>Retrieve output to be displayed in the HEAD tag of the HTML page.</description>
              <signature>drupal_get_html_head()</signature>
              <docrelurl>drupal_get_html_head/7</docrelurl>
            </item>
            <item name= "drupal_get_http_header">
              <description>Get the HTTP response headers for the current page.</description>
              <signature>drupal_get_http_header($name = NULL)</signature>
              <docrelurl>drupal_get_http_header/7</docrelurl>
            </item>
            <item name= "drupal_get_installed_schema_version">
              <description>Returns the currently installed schema version for a module.</description>
              <signature>drupal_get_installed_schema_version($module, $reset = FALSE, $array = FALSE)</signature>
              <docrelurl>drupal_get_installed_schema_version/7</docrelurl>
            </item>
            <item name= "drupal_get_js">
              <description>Returns a themed presentation of all JavaScript code for the current page. References to JavaScript files are placed in a certain order: first, all 'core' files, then all 'module' and finally all 'theme' JavaScript files are added to the page. Then, all settings are output, followed by 'inline' JavaScript code. If running update.php, all preprocessing is disabled.</description>
              <signature>drupal_get_js($scope = 'header', $javascript = NULL)</signature>
              <docrelurl>drupal_get_js/7</docrelurl>
            </item>
            <item name= "drupal_get_library">
              <description>Retrieves information for a JavaScript/CSS library. Library information is statically cached. Libraries are keyed by module for several reasons:</description>
              <signature>drupal_get_library($module, $name)</signature>
              <docrelurl>drupal_get_library/7</docrelurl>
            </item>
            <item name= "drupal_get_messages">
              <description>Return all messages that have been set.</description>
              <signature>drupal_get_messages($type = NULL, $clear_queue = TRUE)</signature>
              <docrelurl>drupal_get_messages/7</docrelurl>
            </item>
            <item name= "drupal_get_normal_path">
              <description>Given a path alias, return the internal path it represents.</description>
              <signature>drupal_get_normal_path($path, $path_language = NULL)</signature>
              <docrelurl>drupal_get_normal_path/7</docrelurl>
            </item>
            <item name= "drupal_get_path">
              <description>Returns the path to a system item (module, theme, etc.).</description>
              <signature>drupal_get_path($type, $name)</signature>
              <docrelurl>drupal_get_path/7</docrelurl>
            </item>
            <item name= "drupal_get_path_alias">
              <description>Given an internal Drupal path, return the alias set by the administrator. If no path is provided, the function will return the alias of the current page.</description>
              <signature>drupal_get_path_alias($path = NULL, $path_language = NULL)</signature>
              <docrelurl>drupal_get_path_alias/7</docrelurl>
            </item>
            <item name= "drupal_get_private_key">
              <description>Ensure the private key variable used to generate tokens is set.</description>
              <signature>drupal_get_private_key()</signature>
              <docrelurl>drupal_get_private_key/7</docrelurl>
            </item>
            <item name= "drupal_get_profile">
              <description>Get the name of the currently active install profile. When this function is called during Drupal's initial installation process, the name of the profile that's about to be installed is stored in the global installation state. At all other times, the standard Drupal systems variable table contains the name of the current profile, and we can call variable_get() to determine what one is active.</description>
              <signature>drupal_get_profile()</signature>
              <docrelurl>drupal_get_profile/7</docrelurl>
            </item>
            <item name= "drupal_get_query_array">
              <description>Split an URL-encoded query string into an array.</description>
              <signature>drupal_get_query_array($query)</signature>
              <docrelurl>drupal_get_query_array/7</docrelurl>
            </item>
            <item name= "drupal_get_query_parameters">
              <description>Process a URL query parameter array to remove unwanted elements.</description>
              <signature>drupal_get_query_parameters(array $query = NULL, array $exclude = array('q'), $parent = '')</signature>
              <docrelurl>drupal_get_query_parameters/7</docrelurl>
            </item>
            <item name= "drupal_get_rdf_namespaces">
              <description>Returns a string containing RDF namespace declarations for use in XML and XHTML output.</description>
              <signature>drupal_get_rdf_namespaces()</signature>
              <docrelurl>drupal_get_rdf_namespaces/7</docrelurl>
            </item>
            <item name= "drupal_get_region_content">
              <description>Get assigned content for a given region.</description>
              <signature>drupal_get_region_content($region = NULL, $delimiter = ' ')</signature>
              <docrelurl>drupal_get_region_content/7</docrelurl>
            </item>
            <item name= "drupal_get_schema">
              <description>Get the schema definition of a table, or the whole database schema. The returned schema will include any modifications made by any module that implements hook_schema_alter().</description>
              <signature>drupal_get_schema($table = NULL, $rebuild = FALSE)</signature>
              <docrelurl>drupal_get_schema/7</docrelurl>
            </item>
            <item name= "drupal_get_schema_unprocessed">
              <description>Returns the unprocessed and unaltered version of a module's schema. Use this function only if you explicitly need the original specification of a schema, as it was defined in a module's hook_schema(). No additional default values will be set, hook_schema_alter() is not invoked and these unprocessed definitions won't be cached.</description>
              <signature>drupal_get_schema_unprocessed($module, $table = NULL)</signature>
              <docrelurl>drupal_get_schema_unprocessed/7</docrelurl>
            </item>
            <item name= "drupal_get_schema_versions">
              <description>Returns an array of available schema versions for a module.</description>
              <signature>drupal_get_schema_versions($module)</signature>
              <docrelurl>drupal_get_schema_versions/7</docrelurl>
            </item>
            <item name= "drupal_get_title">
              <description>Get the title of the current page, for display on the page and in the title bar.</description>
              <signature>drupal_get_title()</signature>
              <docrelurl>drupal_get_title/7</docrelurl>
            </item>
            <item name= "drupal_get_token">
              <description>Generate a token based on $value, the current user session and private key.</description>
              <signature>drupal_get_token($value = '')</signature>
              <docrelurl>drupal_get_token/7</docrelurl>
            </item>
            <item name= "drupal_get_updaters">
              <description>Drupal Updater registry. An Updater is a class that knows how to update various parts of the Drupal file system, for example to update modules that have newer releases, or to install a new theme.</description>
              <signature>drupal_get_updaters()</signature>
              <docrelurl>drupal_get_updaters/7</docrelurl>
            </item>
            <item name= "drupal_get_user_timezone">
              <description>Return the time zone of the current user.</description>
              <signature>drupal_get_user_timezone()</signature>
              <docrelurl>drupal_get_user_timezone/7</docrelurl>
            </item>
            <item name= "drupal_goto">
              <description>Send the user to a different Drupal page. This issues an on-site HTTP redirect. The function makes sure the redirected URL is formatted correctly.</description>
              <signature>drupal_goto($path = '', array $options = array(), $http_response_code = 302)</signature>
              <docrelurl>drupal_goto/7</docrelurl>
            </item>
            <item name= "drupal_group_css">
              <description>Default callback to group CSS items. This function arranges the CSS items that are in the #items property of the styles element into groups. Arranging the CSS items into groups serves two purposes. When aggregation is enabled, files within a group are aggregated into a single file, significantly improving page loading performance by minimizing network traffic overhead. When aggregation is disabled, grouping allows multiple files to be loaded from a single STYLE tag, enabling sites with many modules enabled or a complex theme being used to stay within IE's 31 CSS inclusion tag limit: http://drupal.org/node/228818.</description>
              <signature>drupal_group_css($css)</signature>
              <docrelurl>drupal_group_css/7</docrelurl>
            </item>
            <item name= "drupal_hash_base64">
              <description>Calculate a base-64 encoded, URL-safe sha-256 hash.</description>
              <signature>drupal_hash_base64($data)</signature>
              <docrelurl>drupal_hash_base64/7</docrelurl>
            </item>
            <item name= "drupal_help_arg">
              <description>Generates elements for the $arg array in the help hook.</description>
              <signature>drupal_help_arg($arg = array())</signature>
              <docrelurl>drupal_help_arg/7</docrelurl>
            </item>
            <item name= "drupal_hmac_base64">
              <description>Calculate a base-64 encoded, URL-safe sha-256 hmac.</description>
              <signature>drupal_hmac_base64($data, $key)</signature>
              <docrelurl>drupal_hmac_base64/7</docrelurl>
            </item>
            <item name= "drupal_html_class">
              <description>Prepare a string for use as a valid class name. Do not pass one string containing multiple classes as they will be incorrectly concatenated with dashes, i.e. "one two" will become "one-two".</description>
              <signature>drupal_html_class($class)</signature>
              <docrelurl>drupal_html_class/7</docrelurl>
            </item>
            <item name= "drupal_html_id">
              <description>Prepare a string for use as a valid HTML ID and guarantee uniqueness. This function ensures that each passed HTML ID value only exists once on the page. By tracking the already returned ids, this function enables forms, blocks, and other content to be output multiple times on the same page, without breaking (X)HTML validation.</description>
              <signature>drupal_html_id($id)</signature>
              <docrelurl>drupal_html_id/7</docrelurl>
            </item>
            <item name= "drupal_html_to_text">
              <description>Transform an HTML string into plain text, preserving the structure of the markup. Useful for preparing the body of a node to be sent by e-mail. The output will be suitable for use as 'format=flowed; delsp=yes' text (RFC 3676) and can be passed directly to drupal_mail() for sending.</description>
              <signature>drupal_html_to_text($string, $allowed_tags = NULL)</signature>
              <docrelurl>drupal_html_to_text/7</docrelurl>
            </item>
            <item name= "drupal_http_build_query">
              <description>Parse an array into a valid, rawurlencoded query string. This differs from http_build_query() as we need to rawurlencode() (instead of urlencode()) all query parameters.</description>
              <signature>drupal_http_build_query(array $query, $parent = '')</signature>
              <docrelurl>drupal_http_build_query/7</docrelurl>
            </item>
            <item name= "drupal_http_header_attributes">
              <description>Format an attribute string for a HTTP header.</description>
              <signature>drupal_http_header_attributes(array $attributes = array())</signature>
              <docrelurl>drupal_http_header_attributes/7</docrelurl>
            </item>
            <item name= "drupal_http_request">
              <description>Perform an HTTP request. This is a flexible and powerful HTTP client implementation. Correctly handles GET, POST, PUT or any other HTTP requests. Handles redirects.</description>
              <signature>drupal_http_request($url, array $options = array())</signature>
              <docrelurl>drupal_http_request/7</docrelurl>
            </item>
            <item name= "drupal_implode_tags">
              <description>Implode an array of tags into a string.</description>
              <signature>drupal_implode_tags($tags)</signature>
              <docrelurl>drupal_implode_tags/7</docrelurl>
            </item>
            <item name= "drupal_installation_attempted">
              <description>Return TRUE if a Drupal installation is currently being attempted.</description>
              <signature>drupal_installation_attempted()</signature>
              <docrelurl>drupal_installation_attempted/7</docrelurl>
            </item>
            <item name= "drupal_install_fix_file">
              <description>Attempt to fix file permissions. The general approach here is that, because we do not know the security setup of the webserver, we apply our permission changes to all three digits of the file permission (i.e. user, group and all).</description>
              <signature>drupal_install_fix_file($file, $mask, $message = TRUE)</signature>
              <docrelurl>drupal_install_fix_file/7</docrelurl>
            </item>
            <item name= "drupal_install_mkdir">
              <description>Create a directory with specified permissions.</description>
              <signature>drupal_install_mkdir($file, $mask, $message = TRUE)</signature>
              <docrelurl>drupal_install_mkdir/7</docrelurl>
            </item>
            <item name= "drupal_install_profile_distribution_name">
              <description>Loads the install profile, extracting its defined distribution name.</description>
              <signature>drupal_install_profile_distribution_name()</signature>
              <docrelurl>drupal_install_profile_distribution_name/7</docrelurl>
            </item>
            <item name= "drupal_install_schema">
              <description>Creates all tables in a module's hook_schema() implementation. Note: This function does not pass the module's schema through hook_schema_alter(). The module's tables will be created exactly as the module defines them.</description>
              <signature>drupal_install_schema($module)</signature>
              <docrelurl>drupal_install_schema/7</docrelurl>
            </item>
            <item name= "drupal_install_system">
              <description>Callback to install the system module. Separated from the installation of other modules so core system functions can be made available while other modules are installed.</description>
              <signature>drupal_install_system()</signature>
              <docrelurl>drupal_install_system/7</docrelurl>
            </item>
            <item name= "drupal_is_cli">
              <description>Detect whether the current script is running in a command-line environment.</description>
              <signature>drupal_is_cli()</signature>
              <docrelurl>drupal_is_cli/7</docrelurl>
            </item>
            <item name= "drupal_is_denied">
              <description>Check to see if an IP address has been blocked. Blocked IP addresses are stored in the database by default. However for performance reasons we allow an override in settings.php. This allows us to avoid querying the database at this critical stage of the bootstrap if an administrative interface for IP address blocking is not required.</description>
              <signature>drupal_is_denied($ip)</signature>
              <docrelurl>drupal_is_denied/7</docrelurl>
            </item>
            <item name= "drupal_is_front_page">
              <description>Check if the current page is the front page.</description>
              <signature>drupal_is_front_page()</signature>
              <docrelurl>drupal_is_front_page/7</docrelurl>
            </item>
            <item name= "drupal_json_decode">
              <description>Converts an HTML-safe JSON string into its PHP equivalent.</description>
              <signature>drupal_json_decode($var)</signature>
              <docrelurl>drupal_json_decode/7</docrelurl>
            </item>
            <item name= "drupal_json_encode">
              <description>Converts a PHP variable into its Javascript equivalent. We use HTML-safe strings, i.e. with &lt;, &gt; and &amp; escaped.</description>
              <signature>drupal_json_encode($var)</signature>
              <docrelurl>drupal_json_encode/7</docrelurl>
            </item>
            <item name= "drupal_json_output">
              <description>Return data in JSON format. This function should be used for JavaScript callback functions returning data in JSON format. It sets the header for JavaScript output.</description>
              <signature>drupal_json_output($var = NULL)</signature>
              <docrelurl>drupal_json_output/7</docrelurl>
            </item>
            <item name= "drupal_js_defaults">
              <description>Constructs an array of the defaults that are used for JavaScript items.</description>
              <signature>drupal_js_defaults($data = NULL)</signature>
              <docrelurl>drupal_js_defaults/7</docrelurl>
            </item>
            <item name= "drupal_language_initialize">
              <description>Initialize all the defined language types.</description>
              <signature>drupal_language_initialize()</signature>
              <docrelurl>drupal_language_initialize/7</docrelurl>
            </item>
            <item name= "drupal_language_types">
              <description>The built-in language types.</description>
              <signature>drupal_language_types()</signature>
              <docrelurl>drupal_language_types/7</docrelurl>
            </item>
            <item name= "drupal_load">
              <description>Includes a file with the provided type and name. This prevents including a theme, engine, module, etc., more than once.</description>
              <signature>drupal_load($type, $name)</signature>
              <docrelurl>drupal_load/7</docrelurl>
            </item>
            <item name= "drupal_load_stylesheet">
              <description>Loads the stylesheet and resolves all @import commands. Loads a stylesheet and replaces @import commands with the contents of the imported file. Use this instead of file_get_contents when processing stylesheets.</description>
              <signature>drupal_load_stylesheet($file, $optimize = NULL)</signature>
              <docrelurl>drupal_load_stylesheet/7</docrelurl>
            </item>
            <item name= "drupal_load_stylesheet_content">
              <description>Process the contents of a stylesheet for aggregation.</description>
              <signature>drupal_load_stylesheet_content($contents, $optimize = FALSE)</signature>
              <docrelurl>drupal_load_stylesheet_content/7</docrelurl>
            </item>
            <item name= "drupal_load_updates">
              <description>Initialize the update system by loading all installed module's .install files.</description>
              <signature>drupal_load_updates()</signature>
              <docrelurl>drupal_load_updates/7</docrelurl>
            </item>
            <item name= "drupal_lookup_path">
              <description>Given an alias, return its Drupal system URL if one exists. Given a Drupal system URL return one of its aliases if such a one exists. Otherwise, return FALSE.</description>
              <signature>drupal_lookup_path($action, $path = '', $path_language = NULL)</signature>
              <docrelurl>drupal_lookup_path/7</docrelurl>
            </item>
            <item name= "drupal_mail">
              <description>Compose and optionally send an e-mail message. Sending an e-mail works with defining an e-mail template (subject, text and possibly e-mail headers) and the replacement values to use in the appropriate places in the template. Processed e-mail templates are requested from hook_mail() from the module sending the e-mail. Any module can modify the composed e-mail message array using hook_mail_alter(). Finally drupal_mail_system()->mail() sends the e-mail, which can be reused if the exact same composed e-mail is to be sent to multiple recipients.</description>
              <signature>drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = TRUE)</signature>
              <docrelurl>drupal_mail/7</docrelurl>
            </item>
            <item name= "drupal_mail_system">
              <description>Returns an object that implements the MailSystemInterface. Allows for one or more custom mail backends to format and send mail messages composed using drupal_mail().</description>
              <signature>drupal_mail_system($module, $key)</signature>
              <docrelurl>drupal_mail_system/7</docrelurl>
            </item>
            <item name= "drupal_maintenance_theme">
              <description>Enables use of the theme system without requiring database access. Loads and initializes the theme system for site installs, updates and when the site is in maintenance mode. This also applies when the database fails.</description>
              <signature>drupal_maintenance_theme()</signature>
              <docrelurl>drupal_maintenance_theme/7</docrelurl>
            </item>
            <item name= "drupal_map_assoc">
              <description>Form an associative array from a linear array. This function walks through the provided array and constructs an associative array out of it. The keys of the resulting array will be the values of the input array. The values will be the same as the keys unless a function is specified, in which case the output of the function is used for the values instead.</description>
              <signature>drupal_map_assoc($array, $function = NULL)</signature>
              <docrelurl>drupal_map_assoc/7</docrelurl>
            </item>
            <item name= "drupal_match_path">
              <description>Check if a path matches any pattern in a set of patterns.</description>
              <signature>drupal_match_path($path, $patterns)</signature>
              <docrelurl>drupal_match_path/7</docrelurl>
            </item>
            <item name= "drupal_mkdir">
              <description>Creates a directory using Drupal's default mode. PHP's mkdir() does not respect Drupal's default permissions mode. If a mode is not provided, this function will make sure that Drupal's is used.</description>
              <signature>drupal_mkdir($uri, $mode = NULL, $recursive = FALSE, $context = NULL)</signature>
              <docrelurl>drupal_mkdir/7</docrelurl>
            </item>
            <item name= "drupal_multilingual">
              <description>Return true if there is more than one language enabled.</description>
              <signature>drupal_multilingual()</signature>
              <docrelurl>drupal_multilingual/7</docrelurl>
            </item>
            <item name= "drupal_not_found">
              <description>Deliver a "page not found" error to the browser. Page callback functions wanting to report a "page not found" message should return MENU_NOT_FOUND instead of calling drupal_not_found(). However, functions that are invoked in contexts where that return value might not bubble up to menu_execute_active_handler() should call drupal_not_found().</description>
              <signature>drupal_not_found()</signature>
              <docrelurl>drupal_not_found/7</docrelurl>
            </item>
            <item name= "drupal_override_server_variables">
              <description>Set appropriate server variables needed for command line scripts to work. This function can be called by command line scripts before bootstrapping Drupal, to ensure that the page loads with the desired server parameters. This is because many parts of Drupal assume that they are running in a web browser and therefore use information from the global PHP $_SERVER variable that does not get set when Drupal is run from the command line.</description>
              <signature>drupal_override_server_variables($variables = array())</signature>
              <docrelurl>drupal_override_server_variables/7</docrelurl>
            </item>
            <item name= "drupal_page_footer">
              <description>Perform end-of-request tasks. This function sets the page cache if appropriate, and allows modules to react to the closing of the page by calling hook_exit().</description>
              <signature>drupal_page_footer()</signature>
              <docrelurl>drupal_page_footer/7</docrelurl>
            </item>
            <item name= "drupal_page_get_cache">
              <description>Retrieve the current page from the cache. Note: we do not serve cached pages to authenticated users, or to anonymous users when $_SESSION is non-empty. $_SESSION may contain status messages from a form submission, the contents of a shopping cart, or other user- specific content that should not be cached and displayed to other users.</description>
              <signature>drupal_page_get_cache($check_only = FALSE)</signature>
              <docrelurl>drupal_page_get_cache/7</docrelurl>
            </item>
            <item name= "drupal_page_header">
              <description>Set HTTP headers in preparation for a page response. Authenticated users are always given a 'no-cache' header, and will fetch a fresh page on every request. This prevents authenticated users from seeing locally cached pages.</description>
              <signature>drupal_page_header()</signature>
              <docrelurl>drupal_page_header/7</docrelurl>
            </item>
            <item name= "drupal_page_is_cacheable">
              <description>Determine the cacheability of the current page.</description>
              <signature>drupal_page_is_cacheable($allow_caching = NULL)</signature>
              <docrelurl>drupal_page_is_cacheable/7</docrelurl>
            </item>
            <item name= "drupal_page_set_cache">
              <description>Store the current page in the cache. If page_compression is enabled, a gzipped version of the page is stored in the cache to avoid compressing the output on each request. The cache entry is unzipped in the relatively rare event that the page is requested by a client without gzip support.</description>
              <signature>drupal_page_set_cache()</signature>
              <docrelurl>drupal_page_set_cache/7</docrelurl>
            </item>
            <item name= "drupal_parse_dependency">
              <description>Parse a dependency for comparison by drupal_check_incompatibility().</description>
              <signature>drupal_parse_dependency($dependency)</signature>
              <docrelurl>drupal_parse_dependency/7</docrelurl>
            </item>
            <item name= "drupal_parse_info_file">
              <description>Parse Drupal module and theme info file format. Info files are NOT for placing arbitrary theme and module-specific settings. Use variable_get() and variable_set() for that.</description>
              <signature>drupal_parse_info_file($filename)</signature>
              <docrelurl>drupal_parse_info_file/7</docrelurl>
            </item>
            <item name= "drupal_parse_info_format">
              <description>Parse data in Drupal's .info format. Data should be in an .ini-like format to specify values. White-space generally doesn't matter, except inside values:</description>
              <signature>drupal_parse_info_format($data)</signature>
              <docrelurl>drupal_parse_info_format/7</docrelurl>
            </item>
            <item name= "drupal_parse_url">
              <description>Wrapper around parse_url() to parse a system URL string into an associative array, suitable for url(). This function should only be used for URLs that have been generated by the system, resp. url(). It should not be used for URLs that come from external sources, or URLs that link to external resources.</description>
              <signature>drupal_parse_url($url)</signature>
              <docrelurl>drupal_parse_url/7</docrelurl>
            </item>
            <item name= "drupal_path_alias_whitelist_rebuild">
              <description>Rebuild the path alias white list.</description>
              <signature>drupal_path_alias_whitelist_rebuild($source = NULL)</signature>
              <docrelurl>drupal_path_alias_whitelist_rebuild/7</docrelurl>
            </item>
            <item name= "drupal_path_initialize">
              <description>Initialize the $_GET['q'] variable to the proper normal path.</description>
              <signature>drupal_path_initialize()</signature>
              <docrelurl>drupal_path_initialize/7</docrelurl>
            </item>
            <item name= "drupal_placeholder">
              <description>Formats text for emphasized display in a placeholder inside a sentence. Used automatically by t().</description>
              <signature>drupal_placeholder($variables)</signature>
              <docrelurl>drupal_placeholder/7</docrelurl>
            </item>
            <item name= "drupal_prepare_form">
              <description>Prepares a structured form array by adding required elements, executing any hook_form_alter functions, and optionally inserting a validation token to prevent tampering.</description>
              <signature>drupal_prepare_form($form_id, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>drupal_prepare_form/7</docrelurl>
            </item>
            <item name= "drupal_pre_render_conditional_comments">
              <description>#pre_render callback to render #browsers into #prefix and #suffix.</description>
              <signature>drupal_pre_render_conditional_comments($elements)</signature>
              <docrelurl>drupal_pre_render_conditional_comments/7</docrelurl>
            </item>
            <item name= "drupal_pre_render_link">
              <description>#pre_render callback to render a link into #markup. Doing so during pre_render gives modules a chance to alter the link parts.</description>
              <signature>drupal_pre_render_link($elements)</signature>
              <docrelurl>drupal_pre_render_link/7</docrelurl>
            </item>
            <item name= "drupal_pre_render_markup">
              <description>#pre_render callback to append contents in #markup to #children. This needs to be a #pre_render callback, because eventually assigned #theme_wrappers will expect the element's rendered content in #children. Note that if also a #theme is defined for the element, then the result of the theme callback will override #children.</description>
              <signature>drupal_pre_render_markup($elements)</signature>
              <docrelurl>drupal_pre_render_markup/7</docrelurl>
            </item>
            <item name= "drupal_pre_render_styles">
              <description>#pre_render callback to add the elements needed for CSS tags to be rendered. For production websites, LINK tags are preferable to STYLE tags with @import statements, because:</description>
              <signature>drupal_pre_render_styles($elements)</signature>
              <docrelurl>drupal_pre_render_styles/7</docrelurl>
            </item>
            <item name= "drupal_process_attached">
              <description>Add to the page all structures attached to a render() structure. Libraries, JavaScript, CSS and other types of custom structures are attached to elements using the #attached property. The #attached property contains an associative array, where the keys are the the types of the structure, and the value the attached data. For example:</description>
              <signature>drupal_process_attached($elements, $weight = JS_DEFAULT, $dependency_check = FALSE)</signature>
              <docrelurl>drupal_process_attached/7</docrelurl>
            </item>
            <item name= "drupal_process_form">
              <description>Processes a form submission. This function is the heart of form API. The form gets built, validated and in appropriate cases, submitted.</description>
              <signature>drupal_process_form($form_id, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>drupal_process_form/7</docrelurl>
            </item>
            <item name= "drupal_process_states">
              <description>Adds JavaScript to change the state of an element based on another element. A "state" means a certain property on a DOM element, such as "visible" or "checked". A state can be applied to an element, depending on the state of another element on the page. In general, states depend on HTML attributes and DOM element properties, which change due to user interaction.</description>
              <signature>drupal_process_states(&amp;$elements)</signature>
              <docrelurl>drupal_process_states/7</docrelurl>
            </item>
            <item name= "drupal_random_bytes">
              <description>
                Returns a string of highly randomized bytes (over the full 8-bit range). This function is better than simply calling mt_rand() or any other built-in PHP function because it can return a long string of bytes (compared to &lt; 4 bytes normally from mt_rand()) and uses the best available pseudo-random source.</description>
              <signature>drupal_random_bytes($count)</signature>
              <docrelurl>drupal_random_bytes/7</docrelurl>
            </item>
            <item name= "drupal_realpath">
              <description>Returns the absolute path of a file or directory PHP's realpath() does not properly support streams, so this function fills that gap. If a stream wrapped URI is provided, it will be passed to the registered wrapper for handling. If the URI does not contain a scheme or the wrapper implementation does not implement realpath, then FALSE will be returned.</description>
              <signature>drupal_realpath($uri)</signature>
              <docrelurl>drupal_realpath/7</docrelurl>
            </item>
            <item name= "drupal_rebuild_form">
              <description>Retrieves a form, caches it and processes it again. If your AJAX callback simulates the pressing of a button, then your AJAX callback will need to do the same as what drupal_get_form() would do when the button is pressed: get the form from the cache, run drupal_process_form over it and then if it needs rebuild, run drupal_rebuild_form() over it. Then send back a part of the returned form. $form_state['triggering_element']['#array_parents'] will help you to find which part.</description>
              <signature>drupal_rebuild_form($form_id, &amp;$form_state, $old_form = NULL)</signature>
              <docrelurl>drupal_rebuild_form/7</docrelurl>
            </item>
            <item name= "drupal_redirect_form">
              <description>Redirects the user to a URL after a form has been processed. After a form was executed, the data in $form_state controls whether the form is redirected. By default, we redirect to a new destination page. The path of the destination page can be set in $form_state['redirect']. If that is not set, the user is redirected to the current page to display a fresh, unpopulated copy of the form.</description>
              <signature>drupal_redirect_form($form_state)</signature>
              <docrelurl>drupal_redirect_form/7</docrelurl>
            </item>
            <item name= "drupal_region_class">
              <description>Provides a standard HTML class name that identifies a page region. It is recommended that template preprocess functions apply this class to any page region that is output by the theme (Drupal core already handles this in the standard template preprocess implementation). Standardizing the class names in this way allows modules to implement certain features, such as drag-and-drop or dynamic AJAX loading, in a theme-independent way.</description>
              <signature>drupal_region_class($region)</signature>
              <docrelurl>drupal_region_class/7</docrelurl>
            </item>
            <item name= "drupal_register_shutdown_function">
              <description>Register a function for execution on shutdown. Wrapper for register_shutdown_function() which catches thrown exceptions to avoid "Exception thrown without a stack frame in Unknown".</description>
              <signature>&amp;drupal_register_shutdown_function($callback = NULL, $parameters = NULL)</signature>
              <docrelurl>drupal_register_shutdown_function/7</docrelurl>
            </item>
            <item name= "drupal_render">
              <description>Renders HTML given a structured array tree. Recursively iterates over each of the array elements, generating HTML code.</description>
              <signature>drupal_render(&amp;$elements)</signature>
              <docrelurl>drupal_render/7</docrelurl>
            </item>
            <item name= "drupal_render_cache_by_query">
              <description>Prepare an element for caching based on a query. This smart caching strategy saves Drupal from querying and rendering to HTML when the underlying query is unchanged. Expensive queries should use the query builder to create the query and then call this function. Executing the query and formatting results should happen in a #pre_render callback.</description>
              <signature>drupal_render_cache_by_query($query, $function, $expire = CACHE_TEMPORARY, $granularity = NULL)</signature>
              <docrelurl>drupal_render_cache_by_query/7</docrelurl>
            </item>
            <item name= "drupal_render_cache_get">
              <description>Get the rendered output of a renderable element from cache.</description>
              <signature>drupal_render_cache_get($elements)</signature>
              <docrelurl>drupal_render_cache_get/7</docrelurl>
            </item>
            <item name= "drupal_render_cache_set">
              <description>Cache the rendered output of a renderable element. This is called by drupal_render() if the #cache property is set on an element.</description>
              <signature>drupal_render_cache_set(&amp;$markup, $elements)</signature>
              <docrelurl>drupal_render_cache_set/7</docrelurl>
            </item>
            <item name= "drupal_render_children">
              <description>Render children of an element and concatenate them. This renders all children of an element using drupal_render() and then joins them together into a single string.</description>
              <signature>drupal_render_children(&amp;$element, $children_keys = NULL)</signature>
              <docrelurl>drupal_render_children/7</docrelurl>
            </item>
            <item name= "drupal_render_cid_create">
              <description>Create the cache ID for a renderable element. This creates the cache ID string, either by returning the #cache['cid'] property if present or by building the cache ID out of the #cache['keys'] and, optionally, the #cache['granularity'] properties.</description>
              <signature>drupal_render_cid_create($elements)</signature>
              <docrelurl>drupal_render_cid_create/7</docrelurl>
            </item>
            <item name= "drupal_render_cid_parts">
              <description>Helper function for building cache ids.</description>
              <signature>drupal_render_cid_parts($granularity = NULL)</signature>
              <docrelurl>drupal_render_cid_parts/7</docrelurl>
            </item>
            <item name= "drupal_render_page">
              <description>Renders the page, including all theming.</description>
              <signature>drupal_render_page($page)</signature>
              <docrelurl>drupal_render_page/7</docrelurl>
            </item>
            <item name= "drupal_required_modules">
              <description>Array of modules required by core.</description>
              <signature>drupal_required_modules()</signature>
              <docrelurl>drupal_required_modules/7</docrelurl>
            </item>
            <item name= "drupal_requirements_severity">
              <description>Extract highest severity from requirements array.</description>
              <signature>drupal_requirements_severity(&amp;$requirements)</signature>
              <docrelurl>drupal_requirements_severity/7</docrelurl>
            </item>
            <item name= "drupal_retrieve_form">
              <description>Retrieves the structured array that defines a given form.</description>
              <signature>drupal_retrieve_form($form_id, &amp;$form_state)</signature>
              <docrelurl>drupal_retrieve_form/7</docrelurl>
            </item>
            <item name= "drupal_rewrite_settings">
              <description>Replace values in settings.php with values in the submitted array.</description>
              <signature>drupal_rewrite_settings($settings = array(), $prefix = '')</signature>
              <docrelurl>drupal_rewrite_settings/7</docrelurl>
            </item>
            <item name= "drupal_save_session">
              <description>Determine whether to save session data of the current request. This function allows the caller to temporarily disable writing of session data, should the request end while performing potentially dangerous operations, such as manipulating the global $user object. See http://drupal.org/node/218104 for usage.</description>
              <signature>drupal_save_session($status = NULL)</signature>
              <docrelurl>drupal_save_session/7</docrelurl>
            </item>
            <item name= "drupal_schema_fields_sql">
              <description>Retrieve a list of fields from a table schema. The list is suitable for use in a SQL query.</description>
              <signature>drupal_schema_fields_sql($table, $prefix = NULL)</signature>
              <docrelurl>drupal_schema_fields_sql/7</docrelurl>
            </item>
            <item name= "drupal_send_headers">
              <description>Send the HTTP response headers previously set using drupal_add_http_header(). Add default headers, unless they have been replaced or unset using drupal_add_http_header().</description>
              <signature>drupal_send_headers($default_headers = array(), $only_default = FALSE)</signature>
              <docrelurl>drupal_send_headers/7</docrelurl>
            </item>
            <item name= "drupal_serve_page_from_cache">
              <description>Set HTTP headers in preparation for a cached page response. The headers allow as much as possible in proxies and browsers without any particular knowledge about the pages. Modules can override these headers using drupal_add_http_header().</description>
              <signature>drupal_serve_page_from_cache(stdClass $cache)</signature>
              <docrelurl>drupal_serve_page_from_cache/7</docrelurl>
            </item>
            <item name= "drupal_session_commit">
              <description>Commit the current session, if necessary. If an anonymous user already have an empty session, destroy it.</description>
              <signature>drupal_session_commit()</signature>
              <docrelurl>drupal_session_commit/7</docrelurl>
            </item>
            <item name= "drupal_session_destroy_uid">
              <description>End a specific user's session(s).</description>
              <signature>drupal_session_destroy_uid($uid)</signature>
              <docrelurl>drupal_session_destroy_uid/7</docrelurl>
            </item>
            <item name= "drupal_session_initialize">
              <description>Initialize the session handler, starting a session if needed.</description>
              <signature>drupal_session_initialize()</signature>
              <docrelurl>drupal_session_initialize/7</docrelurl>
            </item>
            <item name= "drupal_session_regenerate">
              <description>Called when an anonymous user becomes authenticated or vice-versa.</description>
              <signature>drupal_session_regenerate()</signature>
              <docrelurl>drupal_session_regenerate/7</docrelurl>
            </item>
            <item name= "drupal_session_start">
              <description>Forcefully start a session, preserving already set session data.</description>
              <signature>drupal_session_start()</signature>
              <docrelurl>drupal_session_start/7</docrelurl>
            </item>
            <item name= "drupal_session_started">
              <description>Return whether a session has been started.</description>
              <signature>drupal_session_started($set = NULL)</signature>
              <docrelurl>drupal_session_started/7</docrelurl>
            </item>
            <item name= "drupal_settings_initialize">
              <description>Loads the configuration and sets the base URL, cookie domain, and session name correctly.</description>
              <signature>drupal_settings_initialize()</signature>
              <docrelurl>drupal_settings_initialize/7</docrelurl>
            </item>
            <item name= "drupal_set_breadcrumb">
              <description>Set the breadcrumb trail for the current page.</description>
              <signature>drupal_set_breadcrumb($breadcrumb = NULL)</signature>
              <docrelurl>drupal_set_breadcrumb/7</docrelurl>
            </item>
            <item name= "drupal_set_installed_schema_version">
              <description>Update the installed version information for a module.</description>
              <signature>drupal_set_installed_schema_version($module, $version)</signature>
              <docrelurl>drupal_set_installed_schema_version/7</docrelurl>
            </item>
            <item name= "drupal_set_message">
              <description>Set a message which reflects the status of the performed operation. If the function is called with no arguments, this function returns all set messages without clearing them.</description>
              <signature>drupal_set_message($message = NULL, $type = 'status', $repeat = TRUE)</signature>
              <docrelurl>drupal_set_message/7</docrelurl>
            </item>
            <item name= "drupal_set_page_content">
              <description>Set the main page content value for later use. Given the nature of the Drupal page handling, this will be called once with a string or array. We store that and return it later as the block is being displayed.</description>
              <signature>drupal_set_page_content($content = NULL)</signature>
              <docrelurl>drupal_set_page_content/7</docrelurl>
            </item>
            <item name= "drupal_set_time_limit">
              <description>Attempts to set the PHP maximum execution time. This function is a wrapper around the PHP function set_time_limit(). When called, set_time_limit() restarts the timeout counter from zero. In other words, if the timeout is the default 30 seconds, and 25 seconds into script execution a call such as set_time_limit(20) is made, the script will run for a total of 45 seconds before timing out.</description>
              <signature>drupal_set_time_limit($time_limit)</signature>
              <docrelurl>drupal_set_time_limit/7</docrelurl>
            </item>
            <item name= "drupal_set_title">
              <description>Set the title of the current page, for display on the page and in the title bar.</description>
              <signature>drupal_set_title($title = NULL, $output = CHECK_PLAIN)</signature>
              <docrelurl>drupal_set_title/7</docrelurl>
            </item>
            <item name= "drupal_site_offline">
              <description>Deliver a "site is under maintenance" message to the browser. Page callback functions wanting to report a "site offline" message should return MENU_SITE_OFFLINE instead of calling drupal_site_offline(). However, functions that are invoked in contexts where that return value might not bubble up to menu_execute_active_handler() should call drupal_site_offline().</description>
              <signature>drupal_site_offline()</signature>
              <docrelurl>drupal_site_offline/7</docrelurl>
            </item>
            <item name= "drupal_sort_weight">
              <description>Function used by uasort to sort structured arrays by weight, without the property weight prefix.</description>
              <signature>drupal_sort_weight($a, $b)</signature>
              <docrelurl>drupal_sort_weight/7</docrelurl>
            </item>
            <item name= "drupal_static">
              <description>Central static variable storage. All functions requiring a static variable to persist or cache data within a single page request are encouraged to use this function unless it is absolutely certain that the static variable will not need to be reset during the page request. By centralizing static variable storage through this function, other functions can rely on a consistent API for resetting any other function's static variables.</description>
              <signature>&amp;drupal_static($name, $default_value = NULL, $reset = FALSE)</signature>
              <docrelurl>drupal_static/7</docrelurl>
            </item>
            <item name= "drupal_static_reset">
              <description>Reset one or all centrally stored static variable(s).</description>
              <signature>drupal_static_reset($name = NULL)</signature>
              <docrelurl>drupal_static_reset/7</docrelurl>
            </item>
            <item name= "drupal_strlen">
              <description>Count the amount of characters in a UTF-8 string. This is less than or equal to the byte count.</description>
              <signature>drupal_strlen($text)</signature>
              <docrelurl>drupal_strlen/7</docrelurl>
            </item>
            <item name= "drupal_strtolower">
              <description>Lowercase a UTF-8 string.</description>
              <signature>drupal_strtolower($text)</signature>
              <docrelurl>drupal_strtolower/7</docrelurl>
            </item>
            <item name= "drupal_strtoupper">
              <description>Uppercase a UTF-8 string.</description>
              <signature>drupal_strtoupper($text)</signature>
              <docrelurl>drupal_strtoupper/7</docrelurl>
            </item>
            <item name= "drupal_substr">
              <description>Cut off a piece of a string based on character indices and counts. Follows the same behavior as PHP's own substr() function. Note that for cutting off a string at a known character/substring location, the usage of PHP's normal strpos/substr is safe and much faster.</description>
              <signature>drupal_substr($text, $start, $length = NULL)</signature>
              <docrelurl>drupal_substr/7</docrelurl>
            </item>
            <item name= "drupal_system_listing">
              <description>Returns information about system object files (modules, themes, etc.). This function is used to find all or some system object files (module files, theme files, etc.) that exist on the site. It searches in several locations, depending on what type of object you are looking for. For instance, if you are looking for modules and call:</description>
              <signature>drupal_system_listing($mask, $directory, $key = 'name', $min_depth = 1)</signature>
              <docrelurl>drupal_system_listing/7</docrelurl>
            </item>
            <item name= "drupal_tempnam">
              <description>Creates a file with a unique filename in the specified directory. PHP's tempnam() does not return a URI like we want. This function will return a URI if given a URI, or it will return a filepath if given a filepath.</description>
              <signature>drupal_tempnam($directory, $prefix)</signature>
              <docrelurl>drupal_tempnam/7</docrelurl>
            </item>
            <item name= "drupal_theme_access">
              <description>Determines if a theme is available to use.</description>
              <signature>drupal_theme_access($theme)</signature>
              <docrelurl>drupal_theme_access/7</docrelurl>
            </item>
            <item name= "drupal_theme_initialize">
              <description>Initialize the theme system by loading the theme.</description>
              <signature>drupal_theme_initialize()</signature>
              <docrelurl>drupal_theme_initialize/7</docrelurl>
            </item>
            <item name= "drupal_theme_rebuild">
              <description>Force the system to rebuild the theme registry; this should be called when modules are added to the system, or when a dynamic system needs to add more theme hooks.</description>
              <signature>drupal_theme_rebuild()</signature>
              <docrelurl>drupal_theme_rebuild/7</docrelurl>
            </item>
            <item name= "drupal_truncate_bytes">
              <description>Truncate a UTF-8-encoded string safely to a number of bytes. If the end position is in the middle of a UTF-8 sequence, it scans backwards until the beginning of the byte sequence.</description>
              <signature>drupal_truncate_bytes($string, $len)</signature>
              <docrelurl>drupal_truncate_bytes/7</docrelurl>
            </item>
            <item name= "drupal_ucfirst">
              <description>Capitalize the first letter of a UTF-8 string.</description>
              <signature>drupal_ucfirst($text)</signature>
              <docrelurl>drupal_ucfirst/7</docrelurl>
            </item>
            <item name= "drupal_uninstall_modules">
              <description>Calls the uninstall function and updates the system table for a given module.</description>
              <signature>drupal_uninstall_modules($module_list = array())</signature>
              <docrelurl>drupal_uninstall_modules/7</docrelurl>
            </item>
            <item name= "drupal_uninstall_schema">
              <description>Remove all tables that a module defines in its hook_schema(). Note: This function does not pass the module's schema through hook_schema_alter(). The module's tables will be created exactly as the module defines them.</description>
              <signature>drupal_uninstall_schema($module)</signature>
              <docrelurl>drupal_uninstall_schema/7</docrelurl>
            </item>
            <item name= "drupal_unpack">
              <description>Unserializes and appends elements from a serialized string.</description>
              <signature>drupal_unpack($obj, $field = 'data')</signature>
              <docrelurl>drupal_unpack/7</docrelurl>
            </item>
            <item name= "drupal_validate_form">
              <description>Validates user-submitted form data from the $form_state using the validate functions defined in a structured form array.</description>
              <signature>drupal_validate_form($form_id, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>drupal_validate_form/7</docrelurl>
            </item>
            <item name= "drupal_validate_utf8">
              <description>Checks whether a string is valid UTF-8. All functions designed to filter input should use drupal_validate_utf8 to ensure they operate on valid UTF-8 strings to prevent bypass of the filter.</description>
              <signature>drupal_validate_utf8($text)</signature>
              <docrelurl>drupal_validate_utf8/7</docrelurl>
            </item>
            <item name= "drupal_valid_http_host">
              <description>Validate that a hostname (for example $_SERVER['HTTP_HOST']) is safe.</description>
              <signature>drupal_valid_http_host($host)</signature>
              <docrelurl>drupal_valid_http_host/7</docrelurl>
            </item>
            <item name= "drupal_valid_path">
              <description>Checks a path exists and the current user has access to it.</description>
              <signature>drupal_valid_path($path, $dynamic_allowed = FALSE)</signature>
              <docrelurl>drupal_valid_path/7</docrelurl>
            </item>
            <item name= "drupal_valid_test_ua">
              <description>Validate the HMAC and timestamp of a user agent header from simpletest.</description>
              <signature>drupal_valid_test_ua($user_agent)</signature>
              <docrelurl>drupal_valid_test_ua/7</docrelurl>
            </item>
            <item name= "drupal_valid_token">
              <description>Validate a token based on $value, the current user session and private key.</description>
              <signature>drupal_valid_token($token, $value = '', $skip_anonymous = FALSE)</signature>
              <docrelurl>drupal_valid_token/7</docrelurl>
            </item>
            <item name= "drupal_verify_install_file">
              <description>Verify the state of the specified file.</description>
              <signature>drupal_verify_install_file($file, $mask = NULL, $type = 'file')</signature>
              <docrelurl>drupal_verify_install_file/7</docrelurl>
            </item>
            <item name= "drupal_verify_profile">
              <description>Verify an install profile for installation.</description>
              <signature>drupal_verify_profile($install_state)</signature>
              <docrelurl>drupal_verify_profile/7</docrelurl>
            </item>
            <item name= "drupal_wrap_mail">
              <description>Perform format=flowed soft wrapping for mail (RFC 3676). We use delsp=yes wrapping, but only break non-spaced languages when absolutely necessary to avoid compatibility issues.</description>
              <signature>drupal_wrap_mail($text, $indent = '')</signature>
              <docrelurl>drupal_wrap_mail/7</docrelurl>
            </item>
            <item name= "drupal_write_record">
              <description>Saves a record to the database based upon the schema. Default values are filled in for missing items, and 'serial' (auto increment) types are filled in with IDs.</description>
              <signature>drupal_write_record($table, &amp;$object, $primary_keys = array())</signature>
              <docrelurl>drupal_write_record/7</docrelurl>
            </item>
            <item name= "drupal_xml_parser_create">
              <description>Prepare a new XML parser. This is a wrapper around xml_parser_create() which extracts the encoding from the XML data first and sets the output encoding to UTF-8. This function should be used instead of xml_parser_create(), because PHP 4's XML parser doesn't check the input encoding itself. "Starting from PHP 5, the input encoding is automatically detected, so that the encoding parameter specifies only the output encoding."</description>
              <signature>drupal_xml_parser_create(&amp;$data)</signature>
              <docrelurl>drupal_xml_parser_create/7</docrelurl>
            </item>
            <item name= "element_child">
              <description>Check if the key is a child.</description>
              <signature>element_child($key)</signature>
              <docrelurl>element_child/7</docrelurl>
            </item>
            <item name= "element_children">
              <description>Return the children of an element, optionally sorted by weight.</description>
              <signature>element_children(&amp;$elements, $sort = FALSE)</signature>
              <docrelurl>element_children/7</docrelurl>
            </item>
            <item name= "element_get_visible_children">
              <description>Return the visibile children of an element.</description>
              <signature>element_get_visible_children(array $elements)</signature>
              <docrelurl>element_get_visible_children/7</docrelurl>
            </item>
            <item name= "element_info">
              <description>Retrieve the default properties for the defined element type.</description>
              <signature>element_info($type)</signature>
              <docrelurl>element_info/7</docrelurl>
            </item>
            <item name= "element_properties">
              <description>Get properties of a structured array element. Properties begin with '#'.</description>
              <signature>element_properties($element)</signature>
              <docrelurl>element_properties/7</docrelurl>
            </item>
            <item name= "element_property">
              <description>Check if the key is a property.</description>
              <signature>element_property($key)</signature>
              <docrelurl>element_property/7</docrelurl>
            </item>
            <item name= "element_sort">
              <description>Function used by uasort to sort structured arrays by weight.</description>
              <signature>element_sort($a, $b)</signature>
              <docrelurl>element_sort/7</docrelurl>
            </item>
            <item name= "entity_cache_test_dependency_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>entity_cache_test_dependency_entity_info()</signature>
              <docrelurl>entity_cache_test_dependency_entity_info/7</docrelurl>
            </item>
            <item name= "entity_cache_test_watchdog">
              <description>Implements hook_watchdog(). This function is called during module_enable() and tries to access entity information provided by the module this one depends on. The information is stored in a temporary system variable and is later analyzed in the test case.</description>
              <signature>entity_cache_test_watchdog()</signature>
              <docrelurl>entity_cache_test_watchdog/7</docrelurl>
            </item>
            <item name= "entity_create_stub_entity">
              <description>Helper function to assemble an object structure with initial ids. This function can be seen as reciprocal to entity_extract_ids().</description>
              <signature>entity_create_stub_entity($entity_type, $ids)</signature>
              <docrelurl>entity_create_stub_entity/7</docrelurl>
            </item>
            <item name= "entity_extract_ids">
              <description>Helper function to extract id, vid, and bundle name from an entity.</description>
              <signature>entity_extract_ids($entity_type, $entity)</signature>
              <docrelurl>entity_extract_ids/7</docrelurl>
            </item>
            <item name= "entity_form_field_validate">
              <description>Helper function for attaching field API validation to entity forms.</description>
              <signature>entity_form_field_validate($entity_type, $form, &amp;$form_state)</signature>
              <docrelurl>entity_form_field_validate/7</docrelurl>
            </item>
            <item name= "entity_form_submit_build_entity">
              <description>Helper function for copying submitted values to entity properties for simple entity forms. During the submission handling of an entity form's "Save", "Preview", and possibly other buttons, the form state's entity needs to be updated with the submitted form values. Each entity form implements its own $form['#builder_function'] for doing this, appropriate for the particular entity and form. Many of these entity builder functions can call this helper function to re-use its logic of copying $form_state['values'][PROPERTY] values to $entity->PROPERTY for all entries in $form_state['values'] that are not field data, and calling field_attach_submit() to copy field data.</description>
              <signature>entity_form_submit_build_entity($entity_type, $entity, $form, &amp;$form_state)</signature>
              <docrelurl>entity_form_submit_build_entity/7</docrelurl>
            </item>
            <item name= "entity_get_controller">
              <description>Get the entity controller class for an entity type.</description>
              <signature>entity_get_controller($entity_type)</signature>
              <docrelurl>entity_get_controller/7</docrelurl>
            </item>
            <item name= "entity_get_info">
              <description>Get the entity info array of an entity type.</description>
              <signature>entity_get_info($entity_type = NULL)</signature>
              <docrelurl>entity_get_info/7</docrelurl>
            </item>
            <item name= "entity_info_cache_clear">
              <description>Resets the cached information about entity types.</description>
              <signature>entity_info_cache_clear()</signature>
              <docrelurl>entity_info_cache_clear/7</docrelurl>
            </item>
            <item name= "entity_invoke">
              <description>Invokes entity insert/update hooks.</description>
              <signature>entity_invoke($op, $entity_type, $entity)</signature>
              <docrelurl>entity_invoke/7</docrelurl>
            </item>
            <item name= "entity_load">
              <description>Load entities from the database. This function should be used whenever you need to load more than one entity from the database. The entities are loaded into memory and will not require database access if loaded again during the same page request.</description>
              <signature>entity_load($entity_type, $ids = array(), $conditions = array(), $reset = FALSE)</signature>
              <docrelurl>entity_load/7</docrelurl>
            </item>
            <item name= "entity_prepare_view">
              <description>Invoke hook_entity_prepare_view(). If adding a new entity similar to nodes, comments or users, you should invoke this function during the ENTITY_build_content() or ENTITY_view_multiple() phases of rendering to allow other modules to alter the objects during this phase. This is needed for situations where information needs to be loaded outside of ENTITY_load() - particularly when loading entities into one another - i.e. a user object into a node, due to the potential for unwanted side-effects such as caching and infinite recursion. By convention, entity_prepare_view() is called after field_attach_prepare_view() to allow entity level hooks to act on content loaded by field API.</description>
              <signature>entity_prepare_view($entity_type, $entities)</signature>
              <docrelurl>entity_prepare_view/7</docrelurl>
            </item>
            <item name= "entity_uri">
              <description>Returns the uri elements of an entity.</description>
              <signature>entity_uri($entity_type, $entity)</signature>
              <docrelurl>entity_uri/7</docrelurl>
            </item>
            <item name= "error_displayable">
              <description>Determines whether an error should be displayed. When in maintenance mode or when error_level is ERROR_REPORTING_DISPLAY_ALL, all errors should be displayed. For ERROR_REPORTING_DISPLAY_SOME, $error will be examined to determine if it should be displayed.</description>
              <signature>error_displayable($error = NULL)</signature>
              <docrelurl>error_displayable/7</docrelurl>
            </item>
            <item name= "error_test_generate_warnings">
              <description>Menu callback; generate warnings to test the error handler.</description>
              <signature>error_test_generate_warnings($collect_errors = FALSE)</signature>
              <docrelurl>error_test_generate_warnings/7</docrelurl>
            </item>
            <item name= "error_test_menu">
              <description>Implements hook_menu().</description>
              <signature>error_test_menu()</signature>
              <docrelurl>error_test_menu/7</docrelurl>
            </item>
            <item name= "error_test_trigger_exception">
              <description>Menu callback; trigger an exception to test the exception handler.</description>
              <signature>error_test_trigger_exception()</signature>
              <docrelurl>error_test_trigger_exception/7</docrelurl>
            </item>
            <item name= "error_test_trigger_pdo_exception">
              <description>Menu callback; trigger an exception to test the exception handler.</description>
              <signature>error_test_trigger_pdo_exception()</signature>
              <docrelurl>error_test_trigger_pdo_exception/7</docrelurl>
            </item>
            <item name= "example_form">
              <description>Form API array definition for the example form.</description>
              <signature>example_form(&amp;$form_state, $url)</signature>
              <docrelurl>example_form/7</docrelurl>
            </item>
            <item name= "example_form_alter">
              <description>Implementation of hook_form_alter(). Allows the profile to alter the site-configuration form. This is called through custom invocation, so $form_state is not populated.</description>
              <signature>example_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>example_form_alter/7</docrelurl>
            </item>
            <item name= "example_form_submit">
              <description>Form API submit for the example form.</description>
              <signature>example_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>example_form_submit/7</docrelurl>
            </item>
            <item name= "example_profile_details">
              <description>Return a description of the profile for the initial installation screen.</description>
              <signature>example_profile_details()</signature>
              <docrelurl>example_profile_details/7</docrelurl>
            </item>
            <item name= "example_profile_modules">
              <description>Return an array of the modules to be enabled when this profile is installed.</description>
              <signature>example_profile_modules()</signature>
              <docrelurl>example_profile_modules/7</docrelurl>
            </item>
            <item name= "example_profile_tasks">
              <description>Perform any final installation tasks for this profile. The installer goes through the profile-select -> locale-select -> requirements -> database -> locale-initial-batch -> configure -> locale-remaining-batch -> finished -> done tasks in this order, if you don't implement this function in your profile.</description>
              <signature>example_profile_tasks(&amp;$task, $url)</signature>
              <docrelurl>example_profile_tasks/7</docrelurl>
            </item>
            <item name= "example_profile_task_list">
              <description>Return a list of tasks that this profile supports.</description>
              <signature>example_profile_task_list()</signature>
              <docrelurl>example_profile_task_list/7</docrelurl>
            </item>
            <item name= "field_access">
              <description>Determine whether the user has access to a given field.</description>
              <signature>field_access($op, $field, $entity_type, $entity = NULL, $account = NULL)</signature>
              <docrelurl>field_access/7</docrelurl>
            </item>
            <item name= "field_add_more_js">
              <description>Ajax callback in response to a new empty widget being added to the form. This returns the new page content to replace the page content made obsolete by the form submission.</description>
              <signature>field_add_more_js($form, $form_state)</signature>
              <docrelurl>field_add_more_js/7</docrelurl>
            </item>
            <item name= "field_add_more_submit">
              <description>Submit handler for the "Add another item" button of a field form. This handler is run regardless of whether JS is enabled or not. It makes changes to the form state. If the button was clicked with JS disabled, then the page is reloaded with the complete rebuilt form. If the button was clicked with JS enabled, then ajax_form_callback() calls field_add_more_js() to return just the changed part of the form.</description>
              <signature>field_add_more_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_add_more_submit/7</docrelurl>
            </item>
            <item name= "field_associate_fields">
              <description>Allows a module to update the database for fields and columns it controls.</description>
              <signature>field_associate_fields($module)</signature>
              <docrelurl>field_associate_fields/7</docrelurl>
            </item>
            <item name= "field_attach_create_bundle">
              <description>Notify field.module that a new bundle was created. The default SQL-based storage doesn't need to do anything about it, but others might.</description>
              <signature>field_attach_create_bundle($entity_type, $bundle)</signature>
              <docrelurl>field_attach_create_bundle/7</docrelurl>
            </item>
            <item name= "field_attach_delete">
              <description>Delete field data for an existing entity. This deletes all revisions of field data for the entity.</description>
              <signature>field_attach_delete($entity_type, $entity)</signature>
              <docrelurl>field_attach_delete/7</docrelurl>
            </item>
            <item name= "field_attach_delete_bundle">
              <description>Notify field.module the a bundle was deleted. This deletes the data for the field instances as well as the field instances themselves. This function actually just marks the data and field instances and deleted, leaving the garbage collection for a separate process, because it is not always possible to delete this much data in a single page request (particularly since for some field types, the deletion is more than just a simple DELETE query).</description>
              <signature>field_attach_delete_bundle($entity_type, $bundle)</signature>
              <docrelurl>field_attach_delete_bundle/7</docrelurl>
            </item>
            <item name= "field_attach_delete_revision">
              <description>Delete field data for a single revision of an existing entity. The passed entity must have a revision id attribute.</description>
              <signature>field_attach_delete_revision($entity_type, $entity)</signature>
              <docrelurl>field_attach_delete_revision/7</docrelurl>
            </item>
            <item name= "field_attach_form">
              <description>Add form elements for all fields for an entity to a form structure. Sample structure for $form:</description>
              <signature>field_attach_form($entity_type, $entity, &amp;$form, &amp;$form_state, $langcode = NULL)</signature>
              <docrelurl>field_attach_form/7</docrelurl>
            </item>
            <item name= "field_attach_form_validate">
              <description>Perform field validation against form-submitted field values. There are two levels of validation for fields in forms: widget validation, and field validation.</description>
              <signature>field_attach_form_validate($entity_type, $entity, $form, &amp;$form_state)</signature>
              <docrelurl>field_attach_form_validate/7</docrelurl>
            </item>
            <item name= "field_attach_insert">
              <description>Save field data for a new entity. The passed in entity must already contain its id and (if applicable) revision id attributes. Default values (if any) will be saved for fields not present in the $entity.</description>
              <signature>field_attach_insert($entity_type, $entity)</signature>
              <docrelurl>field_attach_insert/7</docrelurl>
            </item>
            <item name= "field_attach_load">
              <description>Loads fields for the current revisions of a group of entities. Loads all fields for each entity object in a group of a single entity type. The loaded field values are added directly to the entity objects.</description>
              <signature>field_attach_load($entity_type, $entities, $age = FIELD_LOAD_CURRENT, $options = array())</signature>
              <docrelurl>field_attach_load/7</docrelurl>
            </item>
            <item name= "field_attach_load_revision">
              <description>Load all fields for previous versions of a group of entities. Loading different versions of the same entities is not supported, and should be done by separate calls to the function.</description>
              <signature>field_attach_load_revision($entity_type, $entities, $options = array())</signature>
              <docrelurl>field_attach_load_revision/7</docrelurl>
            </item>
            <item name= "field_attach_prepare_translation">
              <description>Prepares an entity for translation. This function is used to fill-in the form default values for Field API fields while performing entity translation. By default it copies all the source values in the given source language to the new entity and assigns them the target language.</description>
              <signature>field_attach_prepare_translation($entity_type, $entity, $langcode, $source_entity, $source_langcode)</signature>
              <docrelurl>field_attach_prepare_translation/7</docrelurl>
            </item>
            <item name= "field_attach_prepare_view">
              <description>Prepare field data prior to display. This function must be called before field_attach_view(). It lets field types and formatters load additional data needed for display, and therefore accepts an array of entities to allow query optimisation when displaying lists of entities.</description>
              <signature>field_attach_prepare_view($entity_type, $entities, $view_mode)</signature>
              <docrelurl>field_attach_prepare_view/7</docrelurl>
            </item>
            <item name= "field_attach_preprocess">
              <description>Populate the template variables with the field values available for rendering. The $variables array will be populated with all the field instance values associated with the given entity type, keyed by field name; in case of translatable fields the language currently chosen for display will be selected.</description>
              <signature>field_attach_preprocess($entity_type, $entity, $element, &amp;$variables)</signature>
              <docrelurl>field_attach_preprocess/7</docrelurl>
            </item>
            <item name= "field_attach_presave">
              <description>Perform necessary operations just before fields data get saved. We take no specific action here, we just give other modules the opportunity to act.</description>
              <signature>field_attach_presave($entity_type, $entity)</signature>
              <docrelurl>field_attach_presave/7</docrelurl>
            </item>
            <item name= "field_attach_rename_bundle">
              <description>Notify field.module that a bundle was renamed.</description>
              <signature>field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new)</signature>
              <docrelurl>field_attach_rename_bundle/7</docrelurl>
            </item>
            <item name= "field_attach_submit">
              <description>Perform necessary operations on field data submitted by a form. Currently, this accounts for drag-and-drop reordering of field values, and filtering of empty values.</description>
              <signature>field_attach_submit($entity_type, $entity, $form, &amp;$form_state)</signature>
              <docrelurl>field_attach_submit/7</docrelurl>
            </item>
            <item name= "field_attach_update">
              <description>Save field data for an existing entity.</description>
              <signature>field_attach_update($entity_type, $entity)</signature>
              <docrelurl>field_attach_update/7</docrelurl>
            </item>
            <item name= "field_attach_validate">
              <description>Perform field validation against the field data in an entity. This function does not perform field widget validation on form submissions. It is intended to be called during API save operations. Use field_attach_form_validate() to validate form submissions.</description>
              <signature>field_attach_validate($entity_type, $entity)</signature>
              <docrelurl>field_attach_validate/7</docrelurl>
            </item>
            <item name= "field_attach_view">
              <description>Returns a renderable array for the fields on an entity. Each field is displayed according to the display options specified in the $instance definition for the given $view_mode.</description>
              <signature>field_attach_view($entity_type, $entity, $view_mode, $langcode = NULL)</signature>
              <docrelurl>field_attach_view/7</docrelurl>
            </item>
            <item name= "field_available_languages">
              <description>Collects the available languages for the given entity type and field. If the given field has language support enabled, an array of available languages will be returned, otherwise only LANGUAGE_NONE will be returned. Since the default value for a 'translatable' entity property is FALSE, we ensure that only entities that are able to handle translations actually get translatable fields.</description>
              <signature>field_available_languages($entity_type, $field)</signature>
              <docrelurl>field_available_languages/7</docrelurl>
            </item>
            <item name= "field_behaviors_widget">
              <description>Determines the behavior of a widget with respect to an operation.</description>
              <signature>field_behaviors_widget($op, $instance)</signature>
              <docrelurl>field_behaviors_widget/7</docrelurl>
            </item>
            <item name= "field_bundle_settings">
              <description>Gets or sets administratively defined bundle settings. For each bundle, settings are provided as a nested array with the following structure: @code array( 'view_modes' => array( // One sub-array per view mode for the entity type: 'full' => array( 'custom_display' => Whether the view mode uses custom display settings or settings of the 'default' mode, ), 'teaser' => ... ), 'extra_fields' => array( 'form' => array( // One sub-array per pseudo-field in displayed entities: 'extra_field_1' => array( 'weight' => The weight of the pseudo-field, ), 'extra_field_2' => ... ), 'display' => array( // One sub-array per pseudo-field in displayed entities: 'extra_field_1' => array( // One sub-array per view mode for the entity type, including // the 'default' mode: 'default' => array( 'weight' => The weight of the pseudo-field, 'visibility' => Whether the pseudo-field is visible or hidden, ), 'full' => ... ), 'extra_field_2' => ... ), ), ), @encode</description>
              <signature>field_bundle_settings($entity_type, $bundle, $settings = NULL)</signature>
              <docrelurl>field_bundle_settings/7</docrelurl>
            </item>
            <item name= "field_cache_clear">
              <description>Clear the field info and field data caches.</description>
              <signature>field_cache_clear()</signature>
              <docrelurl>field_cache_clear/7</docrelurl>
            </item>
            <item name= "field_content_languages">
              <description>Returns available content languages. The languages that may be associated to fields include LANGUAGE_NONE.</description>
              <signature>field_content_languages()</signature>
              <docrelurl>field_content_languages/7</docrelurl>
            </item>
            <item name= "field_create_field">
              <description>Creates a field. This function does not bind the field to any bundle; use field_create_instance() for that.</description>
              <signature>field_create_field($field)</signature>
              <docrelurl>field_create_field/7</docrelurl>
            </item>
            <item name= "field_create_instance">
              <description>Creates an instance of a field, binding it to a bundle. @throw FieldException</description>
              <signature>field_create_instance($instance)</signature>
              <docrelurl>field_create_instance/7</docrelurl>
            </item>
            <item name= "field_cron">
              <description>Implements hook_cron(). Purges some deleted Field API data, if any exists.</description>
              <signature>field_cron()</signature>
              <docrelurl>field_cron/7</docrelurl>
            </item>
            <item name= "field_default_extract_form_values">
              <description>
                ▸ 2 functions call field_default_extract_form_values()
                ▾ 2 functions call field_default_extract_form_values()
                field_ui_field_edit_form_submit in modules/field_ui/field_ui.admin.inc
                Form submit handler for field instance settings form.
                field_ui_field_edit_form_validate in modules/field_ui/field_ui.admin.inc
                Form validation handler for field instance settings form.
              </description>
              <signature>field_default_extract_form_values($entity_type, $entity, $field, $instance, $langcode, &amp;$items, $form, &amp;$form_state)</signature>
              <docrelurl>field_default_extract_form_values/7</docrelurl>
            </item>
            <item name= "field_default_form">
              <description>Create a separate form element for each field.</description>
              <signature>field_default_form($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$form, &amp;$form_state, $get_delta = NULL)</signature>
              <docrelurl>field_default_form/7</docrelurl>
            </item>
            <item name= "field_default_form_errors">
              <description>Transfer field-level validation errors to widgets.</description>
              <signature>field_default_form_errors($entity_type, $entity, $field, $instance, $langcode, $items, $form, &amp;$form_state)</signature>
              <docrelurl>field_default_form_errors/7</docrelurl>
            </item>
            <item name= "field_default_insert">
              <description>Default field 'insert' operation. Insert default value if no $entity->$field_name entry was provided. This can happen with programmatic saves, or on form-based creation where the current user doesn't have 'edit' permission for the field.</description>
              <signature>field_default_insert($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>field_default_insert/7</docrelurl>
            </item>
            <item name= "field_default_prepare_translation">
              <description>Copies source field values into the entity to be prepared.</description>
              <signature>field_default_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &amp;$items, $source_entity, $source_langcode)</signature>
              <docrelurl>field_default_prepare_translation/7</docrelurl>
            </item>
            <item name= "field_default_prepare_view">
              <description>Invokes hook_field_formatter_prepare_view() on the relevant formatters.</description>
              <signature>field_default_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $display)</signature>
              <docrelurl>field_default_prepare_view/7</docrelurl>
            </item>
            <item name= "field_default_submit">
              <description>
                ▸ 1 function calls field_default_submit()
                ▾ 1 function calls field_default_submit()
                field_ui_field_edit_form_submit in modules/field_ui/field_ui.admin.inc
                Form submit handler for field instance settings form.
              </description>
              <signature>field_default_submit($entity_type, $entity, $field, $instance, $langcode, &amp;$items, $form, &amp;$form_state)</signature>
              <docrelurl>field_default_submit/7</docrelurl>
            </item>
            <item name= "field_default_validate">
              <description>Generic field validation handler. Possible error codes:</description>
              <signature>field_default_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>field_default_validate/7</docrelurl>
            </item>
            <item name= "field_default_view">
              <description>Builds a renderable array for field values.</description>
              <signature>field_default_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>field_default_view/7</docrelurl>
            </item>
            <item name= "field_delete_field">
              <description>Marks a field and its instances and data for deletion.</description>
              <signature>field_delete_field($field_name)</signature>
              <docrelurl>field_delete_field/7</docrelurl>
            </item>
            <item name= "field_delete_instance">
              <description>Marks a field instance and its data for deletion.</description>
              <signature>field_delete_instance($instance)</signature>
              <docrelurl>field_delete_instance/7</docrelurl>
            </item>
            <item name= "field_extract_bundle">
              <description>Helper function to extract the bundle name of from a bundle object.</description>
              <signature>field_extract_bundle($entity_type, $bundle)</signature>
              <docrelurl>field_extract_bundle/7</docrelurl>
            </item>
            <item name= "field_extra_fields">
              <description>Returns a list and settings of pseudo-field elements in a given bundle. If $context is 'form', an array with the following structure:</description>
              <signature>field_extra_fields($entity_type, $bundle, $context)</signature>
              <docrelurl>field_extra_fields/7</docrelurl>
            </item>
            <item name= "field_extra_fields_get_display">
              <description>Returns the display settings to use for pseudo-fields in a given view mode.</description>
              <signature>field_extra_fields_get_display($entity_type, $bundle, $view_mode)</signature>
              <docrelurl>field_extra_fields_get_display/7</docrelurl>
            </item>
            <item name= "field_filter_xss">
              <description>Like filter_xss_admin(), but with a shorter list of allowed tags. Used for items entered by administrators, like field descriptions, allowed values, where some (mainly inline) mark-up may be desired (so check_plain() is not acceptable).</description>
              <signature>field_filter_xss($string)</signature>
              <docrelurl>field_filter_xss/7</docrelurl>
            </item>
            <item name= "field_flush_caches">
              <description>Implements hook_flush_caches().</description>
              <signature>field_flush_caches()</signature>
              <docrelurl>field_flush_caches/7</docrelurl>
            </item>
            <item name= "field_form_element_after_build">
              <description>Stores information about the built form structure in the form storage. The 'array_parents' array is used to assign validation errors to actual form elements, and to identify the form element to return in the AJAX 'add more' button handler.</description>
              <signature>field_form_element_after_build($element, &amp;$form_state)</signature>
              <docrelurl>field_form_element_after_build/7</docrelurl>
            </item>
            <item name= "field_get_default_value">
              <description>Helper function to get the default value for a field on an entity.</description>
              <signature>field_get_default_value($entity_type, $entity, $field, $instance, $langcode = NULL)</signature>
              <docrelurl>field_get_default_value/7</docrelurl>
            </item>
            <item name= "field_get_display">
              <description>Returns the display settings to use for an instance in a given view mode.</description>
              <signature>field_get_display($instance, $view_mode)</signature>
              <docrelurl>field_get_display/7</docrelurl>
            </item>
            <item name= "field_get_items">
              <description>Returns the field items in the language they currently would be displayed.</description>
              <signature>field_get_items($entity_type, $entity, $field_name, $langcode = NULL)</signature>
              <docrelurl>field_get_items/7</docrelurl>
            </item>
            <item name= "field_has_data">
              <description>Determine whether a field has any data.</description>
              <signature>field_has_data($field)</signature>
              <docrelurl>field_has_data/7</docrelurl>
            </item>
            <item name= "field_has_translation_handler">
              <description>Checks if a module is registered as a translation handler for a given entity. If no handler is passed, simply check if there is any translation handler enabled for the given entity type.</description>
              <signature>field_has_translation_handler($entity_type, $handler = NULL)</signature>
              <docrelurl>field_has_translation_handler/7</docrelurl>
            </item>
            <item name= "field_help">
              <description>Implements hook_help().</description>
              <signature>field_help($path, $arg)</signature>
              <docrelurl>field_help/7</docrelurl>
            </item>
            <item name= "field_info_bundles">
              <description>Returns information about existing bundles.</description>
              <signature>field_info_bundles($entity_type = NULL)</signature>
              <docrelurl>field_info_bundles/7</docrelurl>
            </item>
            <item name= "field_info_cache_clear">
              <description>Clears the field info cache without clearing the field data cache. This is useful when deleted fields or instances are purged. We need to remove the purged records, but no actual field data items are affected.</description>
              <signature>field_info_cache_clear()</signature>
              <docrelurl>field_info_cache_clear/7</docrelurl>
            </item>
            <item name= "field_info_field">
              <description>Returns data about an individual field, given a field name.</description>
              <signature>field_info_field($field_name)</signature>
              <docrelurl>field_info_field/7</docrelurl>
            </item>
            <item name= "field_info_fields">
              <description>Returns all field definitions.</description>
              <signature>field_info_fields()</signature>
              <docrelurl>field_info_fields/7</docrelurl>
            </item>
            <item name= "field_info_field_by_id">
              <description>Returns data about an individual field, given a field ID.</description>
              <signature>field_info_field_by_id($field_id)</signature>
              <docrelurl>field_info_field_by_id/7</docrelurl>
            </item>
            <item name= "field_info_field_settings">
              <description>Returns a field type's default settings.</description>
              <signature>field_info_field_settings($type)</signature>
              <docrelurl>field_info_field_settings/7</docrelurl>
            </item>
            <item name= "field_info_field_types">
              <description>Returns information about field types from hook_field_info().</description>
              <signature>field_info_field_types($field_type = NULL)</signature>
              <docrelurl>field_info_field_types/7</docrelurl>
            </item>
            <item name= "field_info_formatter_settings">
              <description>Returns a field formatter's default settings.</description>
              <signature>field_info_formatter_settings($type)</signature>
              <docrelurl>field_info_formatter_settings/7</docrelurl>
            </item>
            <item name= "field_info_formatter_types">
              <description>Returns information about field formatters from hook_field_formatter_info().</description>
              <signature>field_info_formatter_types($formatter_type = NULL)</signature>
              <docrelurl>field_info_formatter_types/7</docrelurl>
            </item>
            <item name= "field_info_instance">
              <description>Returns an array of instance data for a specific field and bundle.</description>
              <signature>field_info_instance($entity_type, $field_name, $bundle_name)</signature>
              <docrelurl>field_info_instance/7</docrelurl>
            </item>
            <item name= "field_info_instances">
              <description>Retrieves information about field instances.</description>
              <signature>field_info_instances($entity_type = NULL, $bundle_name = NULL)</signature>
              <docrelurl>field_info_instances/7</docrelurl>
            </item>
            <item name= "field_info_instance_settings">
              <description>Returns a field type's default instance settings.</description>
              <signature>field_info_instance_settings($type)</signature>
              <docrelurl>field_info_instance_settings/7</docrelurl>
            </item>
            <item name= "field_info_storage_settings">
              <description>Returns a field storage type's default settings.</description>
              <signature>field_info_storage_settings($type)</signature>
              <docrelurl>field_info_storage_settings/7</docrelurl>
            </item>
            <item name= "field_info_storage_types">
              <description>Returns information about field storage from hook_field_storage_info().</description>
              <signature>field_info_storage_types($storage_type = NULL)</signature>
              <docrelurl>field_info_storage_types/7</docrelurl>
            </item>
            <item name= "field_info_widget_settings">
              <description>Returns a field widget's default settings.</description>
              <signature>field_info_widget_settings($type)</signature>
              <docrelurl>field_info_widget_settings/7</docrelurl>
            </item>
            <item name= "field_info_widget_types">
              <description>Returns information about field widgets from hook_field_widget_info().</description>
              <signature>field_info_widget_types($widget_type = NULL)</signature>
              <docrelurl>field_info_widget_types/7</docrelurl>
            </item>
            <item name= "field_is_translatable">
              <description>Checks whether a field has language support. A field has language support enabled if its 'translatable' property is set to TRUE, and its entity type has at least one translation handler registered.</description>
              <signature>field_is_translatable($entity_type, $field)</signature>
              <docrelurl>field_is_translatable/7</docrelurl>
            </item>
            <item name= "field_language">
              <description>Returns the display language for the fields attached to the given entity. The actual language for each given field is determined based on the requested language and the actual data available in the fields themselves. If there is no registered translation handler for the given entity type, the display language to be used is just LANGUAGE_NONE, as no other language code is allowed by field_available_languages(). If translation handlers are found, we let modules provide alternative display languages for fields not having the requested language available. Core language fallback rules are provided by locale_field_language_fallback() which is called by locale_field_language_alter().</description>
              <signature>field_language($entity_type, $entity, $field_name = NULL, $langcode = NULL)</signature>
              <docrelurl>field_language/7</docrelurl>
            </item>
            <item name= "field_modules_disabled">
              <description>Implements hook_modules_disabled().</description>
              <signature>field_modules_disabled($modules)</signature>
              <docrelurl>field_modules_disabled/7</docrelurl>
            </item>
            <item name= "field_modules_enabled">
              <description>Implements hook_modules_enabled().</description>
              <signature>field_modules_enabled($modules)</signature>
              <docrelurl>field_modules_enabled/7</docrelurl>
            </item>
            <item name= "field_modules_installed">
              <description>Implements hook_modules_installed().</description>
              <signature>field_modules_installed($modules)</signature>
              <docrelurl>field_modules_installed/7</docrelurl>
            </item>
            <item name= "field_modules_uninstalled">
              <description>Implements hook_modules_uninstalled().</description>
              <signature>field_modules_uninstalled($modules)</signature>
              <docrelurl>field_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "field_multilingual_settings_changed">
              <description>Implements hook_multilingual_settings_changed().</description>
              <signature>field_multilingual_settings_changed()</signature>
              <docrelurl>field_multilingual_settings_changed/7</docrelurl>
            </item>
            <item name= "field_multiple_value_form">
              <description>Special handling to create form elements for multiple values. Handles generic features for multiple fields:</description>
              <signature>field_multiple_value_form($field, $instance, $langcode, $items, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>field_multiple_value_form/7</docrelurl>
            </item>
            <item name= "field_purge_batch">
              <description>Purges a batch of deleted Field API data, instances, or fields. This function will purge deleted field data on up to a specified maximum number of entities and then return. If a deleted field instance with no remaining data records is found, the instance itself will be purged. If a deleted field with no remaining field instances is found, the field itself will be purged.</description>
              <signature>field_purge_batch($batch_size)</signature>
              <docrelurl>field_purge_batch/7</docrelurl>
            </item>
            <item name= "field_purge_data">
              <description>Purges the field data for a single field on a single pseudo-entity. This is basically the same as field_attach_delete() except it only applies to a single field. The entity itself is not being deleted, and it is quite possible that other field data will remain attached to it.</description>
              <signature>field_purge_data($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>field_purge_data/7</docrelurl>
            </item>
            <item name= "field_purge_field">
              <description>Purges a field record from the database. This function assumes all instances for the field has already been purged, and should only be called by field_purge_batch().</description>
              <signature>field_purge_field($field)</signature>
              <docrelurl>field_purge_field/7</docrelurl>
            </item>
            <item name= "field_purge_instance">
              <description>Purges a field instance record from the database. This function assumes all data for the instance has already been purged, and should only be called by field_purge_batch().</description>
              <signature>field_purge_instance($instance)</signature>
              <docrelurl>field_purge_instance/7</docrelurl>
            </item>
            <item name= "field_read_field">
              <description>Reads a single field record directly from the database. Generally, you should use the field_info_field() instead.</description>
              <signature>field_read_field($field_name, $include_additional = array())</signature>
              <docrelurl>field_read_field/7</docrelurl>
            </item>
            <item name= "field_read_fields">
              <description>Reads in fields that match an array of conditions.</description>
              <signature>field_read_fields($params = array(), $include_additional = array())</signature>
              <docrelurl>field_read_fields/7</docrelurl>
            </item>
            <item name= "field_read_instance">
              <description>Reads a single instance record directly from the database. Generally, you should use the field_info_instance() instead.</description>
              <signature>field_read_instance($entity_type, $field_name, $bundle, $include_additional = array())</signature>
              <docrelurl>field_read_instance/7</docrelurl>
            </item>
            <item name= "field_read_instances">
              <description>Reads in field instances that match an array of conditions.</description>
              <signature>field_read_instances($params = array(), $include_additional = array())</signature>
              <docrelurl>field_read_instances/7</docrelurl>
            </item>
            <item name= "field_schema">
              <description>Implements hook_schema().</description>
              <signature>field_schema()</signature>
              <docrelurl>field_schema/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_attach_rename_bundle">
              <description>Implements hook_field_attach_rename_bundle().</description>
              <signature>field_sql_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new)</signature>
              <docrelurl>field_sql_storage_field_attach_rename_bundle/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_create_field">
              <description>Implements hook_field_storage_create_field().</description>
              <signature>field_sql_storage_field_storage_create_field($field)</signature>
              <docrelurl>field_sql_storage_field_storage_create_field/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_delete">
              <description>Implements hook_field_storage_delete(). This function deletes data for all fields for an entity from the database.</description>
              <signature>field_sql_storage_field_storage_delete($entity_type, $entity, $fields)</signature>
              <docrelurl>field_sql_storage_field_storage_delete/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_delete_field">
              <description>Implements hook_field_storage_delete_field().</description>
              <signature>field_sql_storage_field_storage_delete_field($field)</signature>
              <docrelurl>field_sql_storage_field_storage_delete_field/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_delete_instance">
              <description>Implements hook_field_storage_delete_instance(). This function simply marks for deletion all data associated with the field.</description>
              <signature>field_sql_storage_field_storage_delete_instance($instance)</signature>
              <docrelurl>field_sql_storage_field_storage_delete_instance/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_delete_revision">
              <description>Implements hook_field_storage_delete_revision(). This function actually deletes the data from the database.</description>
              <signature>field_sql_storage_field_storage_delete_revision($entity_type, $entity, $fields)</signature>
              <docrelurl>field_sql_storage_field_storage_delete_revision/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_details">
              <description>Implements hook_field_storage_details().</description>
              <signature>field_sql_storage_field_storage_details($field)</signature>
              <docrelurl>field_sql_storage_field_storage_details/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_info">
              <description>Implements hook_field_storage_info().</description>
              <signature>field_sql_storage_field_storage_info()</signature>
              <docrelurl>field_sql_storage_field_storage_info/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_load">
              <description>Implements hook_field_storage_load().</description>
              <signature>field_sql_storage_field_storage_load($entity_type, $entities, $age, $fields, $options)</signature>
              <docrelurl>field_sql_storage_field_storage_load/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_purge">
              <description>Implements hook_field_storage_purge(). This function deletes data from the database for a single field on an entity.</description>
              <signature>field_sql_storage_field_storage_purge($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>field_sql_storage_field_storage_purge/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_purge_field">
              <description>Implements hook_field_storage_purge_field(). All field data items and instances have already been purged, so all that is left is to delete the table.</description>
              <signature>field_sql_storage_field_storage_purge_field($field)</signature>
              <docrelurl>field_sql_storage_field_storage_purge_field/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_query">
              <description>Implements hook_field_storage_query().</description>
              <signature>field_sql_storage_field_storage_query(EntityFieldQuery $query)</signature>
              <docrelurl>field_sql_storage_field_storage_query/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_update_field">
              <description>Implements hook_field_storage_update_field().</description>
              <signature>field_sql_storage_field_storage_update_field($field, $prior_field, $has_data)</signature>
              <docrelurl>field_sql_storage_field_storage_update_field/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_storage_write">
              <description>Implements hook_field_storage_write().</description>
              <signature>field_sql_storage_field_storage_write($entity_type, $entity, $op, $fields)</signature>
              <docrelurl>field_sql_storage_field_storage_write/7</docrelurl>
            </item>
            <item name= "field_sql_storage_field_update_forbid">
              <description>Implements hook_field_update_forbid(). Forbid any field update that changes column definitions if there is any data.</description>
              <signature>field_sql_storage_field_update_forbid($field, $prior_field, $has_data)</signature>
              <docrelurl>field_sql_storage_field_update_forbid/7</docrelurl>
            </item>
            <item name= "field_sql_storage_help">
              <description>Implements hook_help().</description>
              <signature>field_sql_storage_help($path, $arg)</signature>
              <docrelurl>field_sql_storage_help/7</docrelurl>
            </item>
            <item name= "field_sql_storage_schema">
              <description>Implements hook_schema().</description>
              <signature>field_sql_storage_schema()</signature>
              <docrelurl>field_sql_storage_schema/7</docrelurl>
            </item>
            <item name= "field_test_create_bundle">
              <description>Creates a new bundle for test_entity entities.</description>
              <signature>field_test_create_bundle($bundle, $text = NULL)</signature>
              <docrelurl>field_test_create_bundle/7</docrelurl>
            </item>
            <item name= "field_test_create_stub_entity">
              <description>Creates a basic test_entity entity.</description>
              <signature>field_test_create_stub_entity($id = 1, $vid = 1, $bundle = 'test_bundle')</signature>
              <docrelurl>field_test_create_stub_entity/7</docrelurl>
            </item>
            <item name= "field_test_default_value">
              <description>Sample 'default value' callback.</description>
              <signature>field_test_default_value($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>field_test_default_value/7</docrelurl>
            </item>
            <item name= "field_test_delete_bundle">
              <description>Deletes a bundle for test_entity objects.</description>
              <signature>field_test_delete_bundle($bundle)</signature>
              <docrelurl>field_test_delete_bundle/7</docrelurl>
            </item>
            <item name= "field_test_entity_add">
              <description>Menu callback: displays the 'Add new test_entity' form.</description>
              <signature>field_test_entity_add($fttype)</signature>
              <docrelurl>field_test_entity_add/7</docrelurl>
            </item>
            <item name= "field_test_entity_edit">
              <description>Menu callback: displays the 'Edit exiisting test_entity' form.</description>
              <signature>field_test_entity_edit($entity)</signature>
              <docrelurl>field_test_entity_edit/7</docrelurl>
            </item>
            <item name= "field_test_entity_form">
              <description>Test_entity form.</description>
              <signature>field_test_entity_form($form, &amp;$form_state, $entity, $add = FALSE)</signature>
              <docrelurl>field_test_entity_form/7</docrelurl>
            </item>
            <item name= "field_test_entity_form_submit">
              <description>Submit handler for field_test_entity_form().</description>
              <signature>field_test_entity_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_test_entity_form_submit/7</docrelurl>
            </item>
            <item name= "field_test_entity_form_submit_builder">
              <description>Updates the form state's entity by processing this submission's values.</description>
              <signature>field_test_entity_form_submit_builder($form, &amp;$form_state)</signature>
              <docrelurl>field_test_entity_form_submit_builder/7</docrelurl>
            </item>
            <item name= "field_test_entity_form_validate">
              <description>Validate handler for field_test_entity_form().</description>
              <signature>field_test_entity_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>field_test_entity_form_validate/7</docrelurl>
            </item>
            <item name= "field_test_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>field_test_entity_info()</signature>
              <docrelurl>field_test_entity_info/7</docrelurl>
            </item>
            <item name= "field_test_entity_info_alter">
              <description>Implements hook_entity_info_alter().</description>
              <signature>field_test_entity_info_alter(&amp;$entity_info)</signature>
              <docrelurl>field_test_entity_info_alter/7</docrelurl>
            </item>
            <item name= "field_test_entity_info_translatable">
              <description>Helper function to enable entity translations.</description>
              <signature>field_test_entity_info_translatable($entity_type = NULL, $translatable = NULL)</signature>
              <docrelurl>field_test_entity_info_translatable/7</docrelurl>
            </item>
            <item name= "field_test_entity_save">
              <description>Saves a test_entity. A new entity is created if $entity->ftid and $entity->is_new are both empty. A new revision is created if $entity->revision is not empty.</description>
              <signature>field_test_entity_save(&amp;$entity)</signature>
              <docrelurl>field_test_entity_save/7</docrelurl>
            </item>
            <item name= "field_test_entity_test_load">
              <description>Loads a test_entity.</description>
              <signature>field_test_entity_test_load($ftid, $ftvid = NULL)</signature>
              <docrelurl>field_test_entity_test_load/7</docrelurl>
            </item>
            <item name= "field_test_field_access">
              <description>Implements hook_field_access().</description>
              <signature>field_test_field_access($op, $field, $entity_type, $entity, $account)</signature>
              <docrelurl>field_test_field_access/7</docrelurl>
            </item>
            <item name= "field_test_field_attach_create_bundle">
              <description>Implements hook_field_attach_create_bundle().</description>
              <signature>field_test_field_attach_create_bundle($bundle)</signature>
              <docrelurl>field_test_field_attach_create_bundle/7</docrelurl>
            </item>
            <item name= "field_test_field_attach_delete_bundle">
              <description>Implements hook_field_attach_delete_bundle().</description>
              <signature>field_test_field_attach_delete_bundle($bundle, $instances)</signature>
              <docrelurl>field_test_field_attach_delete_bundle/7</docrelurl>
            </item>
            <item name= "field_test_field_attach_rename_bundle">
              <description>Implements hook_field_attach_rename_bundle().</description>
              <signature>field_test_field_attach_rename_bundle($bundle_old, $bundle_new)</signature>
              <docrelurl>field_test_field_attach_rename_bundle/7</docrelurl>
            </item>
            <item name= "field_test_field_available_languages_alter">
              <description>Implements hook_field_available_languages_alter().</description>
              <signature>field_test_field_available_languages_alter(&amp;$languages, $context)</signature>
              <docrelurl>field_test_field_available_languages_alter/7</docrelurl>
            </item>
            <item name= "field_test_field_create_field">
              <description>Memorize calls to hook_field_create_field().</description>
              <signature>field_test_field_create_field($field)</signature>
              <docrelurl>field_test_field_create_field/7</docrelurl>
            </item>
            <item name= "field_test_field_delete">
              <description>Memorize calls to hook_field_delete().</description>
              <signature>field_test_field_delete($entity_type, $entity, $field, $instance, $items)</signature>
              <docrelurl>field_test_field_delete/7</docrelurl>
            </item>
            <item name= "field_test_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>field_test_field_formatter_info()</signature>
              <docrelurl>field_test_field_formatter_info/7</docrelurl>
            </item>
            <item name= "field_test_field_formatter_prepare_view">
              <description>Implements hook_field_formatter_prepare_view().</description>
              <signature>field_test_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $displays)</signature>
              <docrelurl>field_test_field_formatter_prepare_view/7</docrelurl>
            </item>
            <item name= "field_test_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>field_test_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>field_test_field_formatter_view/7</docrelurl>
            </item>
            <item name= "field_test_field_info">
              <description>Implements hook_field_info().</description>
              <signature>field_test_field_info()</signature>
              <docrelurl>field_test_field_info/7</docrelurl>
            </item>
            <item name= "field_test_field_insert">
              <description>Memorize calls to hook_field_insert().</description>
              <signature>field_test_field_insert($entity_type, $entity, $field, $instance, $items)</signature>
              <docrelurl>field_test_field_insert/7</docrelurl>
            </item>
            <item name= "field_test_field_instance_settings_form">
              <description>Implements hook_field_instance_settings_form().</description>
              <signature>field_test_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>field_test_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "field_test_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>field_test_field_is_empty($item, $field)</signature>
              <docrelurl>field_test_field_is_empty/7</docrelurl>
            </item>
            <item name= "field_test_field_language_alter">
              <description>Implements hook_field_language_alter().</description>
              <signature>field_test_field_language_alter(&amp;$display_language, $context)</signature>
              <docrelurl>field_test_field_language_alter/7</docrelurl>
            </item>
            <item name= "field_test_field_load">
              <description>Implements hook_field_load().</description>
              <signature>field_test_field_load($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $age)</signature>
              <docrelurl>field_test_field_load/7</docrelurl>
            </item>
            <item name= "field_test_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>field_test_field_schema($field)</signature>
              <docrelurl>field_test_field_schema/7</docrelurl>
            </item>
            <item name= "field_test_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>field_test_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>field_test_field_settings_form/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_create_field">
              <description>Implements hook_field_storage_create_field().</description>
              <signature>field_test_field_storage_create_field($field)</signature>
              <docrelurl>field_test_field_storage_create_field/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_delete">
              <description>Implements hook_field_storage_delete().</description>
              <signature>field_test_field_storage_delete($entity_type, $entity, $fields)</signature>
              <docrelurl>field_test_field_storage_delete/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_delete_field">
              <description>Implements hook_field_storage_delete_field().</description>
              <signature>field_test_field_storage_delete_field($field)</signature>
              <docrelurl>field_test_field_storage_delete_field/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_delete_instance">
              <description>Implements hook_field_storage_delete_instance().</description>
              <signature>field_test_field_storage_delete_instance($instance)</signature>
              <docrelurl>field_test_field_storage_delete_instance/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_delete_revision">
              <description>Implements hook_field_storage_delete_revision().</description>
              <signature>field_test_field_storage_delete_revision($entity_type, $entity, $fields)</signature>
              <docrelurl>field_test_field_storage_delete_revision/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_details">
              <description>Implements hook_field_storage_details().</description>
              <signature>field_test_field_storage_details($field)</signature>
              <docrelurl>field_test_field_storage_details/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_details_alter">
              <description>Implements hook_field_storage_details_alter().</description>
              <signature>field_test_field_storage_details_alter(&amp;$details, $field)</signature>
              <docrelurl>field_test_field_storage_details_alter/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_info">
              <description>Implements hook_field_storage_info().</description>
              <signature>field_test_field_storage_info()</signature>
              <docrelurl>field_test_field_storage_info/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_load">
              <description>Implements hook_field_storage_load().</description>
              <signature>field_test_field_storage_load($entity_type, $entities, $age, $fields, $options)</signature>
              <docrelurl>field_test_field_storage_load/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_purge">
              <description>Implements hook_field_storage_purge().</description>
              <signature>field_test_field_storage_purge($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>field_test_field_storage_purge/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_query">
              <description>Implements hook_field_storage_query().</description>
              <signature>field_test_field_storage_query($field_id, $conditions, $count, &amp;$cursor = NULL, $age)</signature>
              <docrelurl>field_test_field_storage_query/7</docrelurl>
            </item>
            <item name= "field_test_field_storage_write">
              <description>Implements hook_field_storage_write().</description>
              <signature>field_test_field_storage_write($entity_type, $entity, $op, $fields)</signature>
              <docrelurl>field_test_field_storage_write/7</docrelurl>
            </item>
            <item name= "field_test_field_test_op">
              <description>Generic op to test _field_invoke behavior. This simulates a field operation callback to be invoked by _field_invoke().</description>
              <signature>field_test_field_test_op($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>field_test_field_test_op/7</docrelurl>
            </item>
            <item name= "field_test_field_test_op_multiple">
              <description>Generic op to test _field_invoke_multiple behavior. This simulates a multiple field operation callback to be invoked by _field_invoke_multiple().</description>
              <signature>field_test_field_test_op_multiple($entity_type, $entities, $field, $instances, $langcode, &amp;$items)</signature>
              <docrelurl>field_test_field_test_op_multiple/7</docrelurl>
            </item>
            <item name= "field_test_field_update">
              <description>Memorize calls to hook_field_update().</description>
              <signature>field_test_field_update($entity_type, $entity, $field, $instance, $items)</signature>
              <docrelurl>field_test_field_update/7</docrelurl>
            </item>
            <item name= "field_test_field_update_forbid">
              <description>Implements hook_field_update_forbid().</description>
              <signature>field_test_field_update_forbid($field, $prior_field, $has_data)</signature>
              <docrelurl>field_test_field_update_forbid/7</docrelurl>
            </item>
            <item name= "field_test_field_validate">
              <description>Implements hook_field_validate(). Possible error codes:</description>
              <signature>field_test_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>field_test_field_validate/7</docrelurl>
            </item>
            <item name= "field_test_field_widget_error">
              <description>Implements hook_field_widget_error().</description>
              <signature>field_test_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>field_test_field_widget_error/7</docrelurl>
            </item>
            <item name= "field_test_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>field_test_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>field_test_field_widget_form/7</docrelurl>
            </item>
            <item name= "field_test_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>field_test_field_widget_info()</signature>
              <docrelurl>field_test_field_widget_info/7</docrelurl>
            </item>
            <item name= "field_test_field_widget_settings_form">
              <description>Implements hook_field_widget_settings_form().</description>
              <signature>field_test_field_widget_settings_form($field, $instance)</signature>
              <docrelurl>field_test_field_widget_settings_form/7</docrelurl>
            </item>
            <item name= "field_test_install">
              <description>Implements hook_install().</description>
              <signature>field_test_install()</signature>
              <docrelurl>field_test_install/7</docrelurl>
            </item>
            <item name= "field_test_memorize">
              <description>Store and retrieve keyed data for later verification by unit tests. This function is a simple in-memory key-value store with the distinction that it stores all values for a given key instead of just the most recently set value. field_test module hooks call this function to record their arguments, keyed by hook name. The unit tests later call this function to verify that the correct hooks were called and were passed the correct arguments.</description>
              <signature>field_test_memorize($key = NULL, $value = NULL)</signature>
              <docrelurl>field_test_memorize/7</docrelurl>
            </item>
            <item name= "field_test_menu">
              <description>Implements hook_menu().</description>
              <signature>field_test_menu()</signature>
              <docrelurl>field_test_menu/7</docrelurl>
            </item>
            <item name= "field_test_permission">
              <description>Implements hook_permission().</description>
              <signature>field_test_permission()</signature>
              <docrelurl>field_test_permission/7</docrelurl>
            </item>
            <item name= "field_test_rename_bundle">
              <description>Renames a bundle for test_entity entities.</description>
              <signature>field_test_rename_bundle($bundle_old, $bundle_new)</signature>
              <docrelurl>field_test_rename_bundle/7</docrelurl>
            </item>
            <item name= "field_test_schema">
              <description>Implements hook_schema().</description>
              <signature>field_test_schema()</signature>
              <docrelurl>field_test_schema/7</docrelurl>
            </item>
            <item name= "field_test_widget_multiple_validate">
              <description>Form element validation handler for 'test_field_widget_multiple' widget.</description>
              <signature>field_test_widget_multiple_validate($element, &amp;$form_state)</signature>
              <docrelurl>field_test_widget_multiple_validate/7</docrelurl>
            </item>
            <item name= "field_theme">
              <description>Implements hook_theme().</description>
              <signature>field_theme()</signature>
              <docrelurl>field_theme/7</docrelurl>
            </item>
            <item name= "field_ui_default_value_widget">
              <description>Build default value fieldset.</description>
              <signature>field_ui_default_value_widget($field, $instance, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>field_ui_default_value_widget/7</docrelurl>
            </item>
            <item name= "field_ui_display_overview_form">
              <description>Menu callback; presents field display settings for a given view mode.</description>
              <signature>field_ui_display_overview_form($form, &amp;$form_state, $entity_type, $bundle, $view_mode)</signature>
              <docrelurl>field_ui_display_overview_form/7</docrelurl>
            </item>
            <item name= "field_ui_display_overview_form_submit">
              <description>Submit handler for the display overview form.</description>
              <signature>field_ui_display_overview_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_display_overview_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_existing_field_options">
              <description>Return an array of existing field to be added to a bundle.</description>
              <signature>field_ui_existing_field_options($entity_type, $bundle)</signature>
              <docrelurl>field_ui_existing_field_options/7</docrelurl>
            </item>
            <item name= "field_ui_fields_list">
              <description>Menu callback; lists all defined fields for quick reference.</description>
              <signature>field_ui_fields_list()</signature>
              <docrelurl>field_ui_fields_list/7</docrelurl>
            </item>
            <item name= "field_ui_field_attach_create_bundle">
              <description>Implements hook_field_attach_create_bundle().</description>
              <signature>field_ui_field_attach_create_bundle($entity_type, $bundle)</signature>
              <docrelurl>field_ui_field_attach_create_bundle/7</docrelurl>
            </item>
            <item name= "field_ui_field_delete_form">
              <description>Menu callback; present a form for removing a field from a content type.</description>
              <signature>field_ui_field_delete_form($form, &amp;$form_state, $instance)</signature>
              <docrelurl>field_ui_field_delete_form/7</docrelurl>
            </item>
            <item name= "field_ui_field_delete_form_submit">
              <description>Remove a field from a content type.</description>
              <signature>field_ui_field_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_delete_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_field_edit_form">
              <description>Menu callback; presents the field instance edit page.</description>
              <signature>field_ui_field_edit_form($form, &amp;$form_state, $instance)</signature>
              <docrelurl>field_ui_field_edit_form/7</docrelurl>
            </item>
            <item name= "field_ui_field_edit_form_submit">
              <description>Form submit handler for field instance settings form.</description>
              <signature>field_ui_field_edit_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_edit_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_field_edit_form_validate">
              <description>Form validation handler for field instance settings form.</description>
              <signature>field_ui_field_edit_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_edit_form_validate/7</docrelurl>
            </item>
            <item name= "field_ui_field_edit_instance_pre_render">
              <description>Pre-render function for field instance settings. Combines the instance, widget, and other settings into a single fieldset so that elements within each group can be shown at different weights as if they all had the same parent.</description>
              <signature>field_ui_field_edit_instance_pre_render($element)</signature>
              <docrelurl>field_ui_field_edit_instance_pre_render/7</docrelurl>
            </item>
            <item name= "field_ui_field_overview_form">
              <description>Menu callback; listing of fields for a bundle. Allows fields and pseudo-fields to be re-ordered.</description>
              <signature>field_ui_field_overview_form($form, &amp;$form_state, $entity_type, $bundle)</signature>
              <docrelurl>field_ui_field_overview_form/7</docrelurl>
            </item>
            <item name= "field_ui_field_overview_form_submit">
              <description>Submit handler for the field overview form.</description>
              <signature>field_ui_field_overview_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_overview_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_field_overview_form_validate">
              <description>Validate handler for the field overview form.</description>
              <signature>field_ui_field_overview_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_overview_form_validate/7</docrelurl>
            </item>
            <item name= "field_ui_field_settings_form">
              <description>Menu callback; presents the field settings edit page.</description>
              <signature>field_ui_field_settings_form($form, &amp;$form_state, $instance)</signature>
              <docrelurl>field_ui_field_settings_form/7</docrelurl>
            </item>
            <item name= "field_ui_field_settings_form_submit">
              <description>Save a field's settings after editing.</description>
              <signature>field_ui_field_settings_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_field_settings_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_field_type_options">
              <description>Return an array of field_type options.</description>
              <signature>field_ui_field_type_options()</signature>
              <docrelurl>field_ui_field_type_options/7</docrelurl>
            </item>
            <item name= "field_ui_formatter_options">
              <description>Return an array of formatter options for a field type. If no field type is provided, returns a nested array of all formatters, keyed by field type.</description>
              <signature>field_ui_formatter_options($field_type = NULL)</signature>
              <docrelurl>field_ui_formatter_options/7</docrelurl>
            </item>
            <item name= "field_ui_form_node_type_form_alter">
              <description>Add a button Save and add fields to Create content type form.</description>
              <signature>field_ui_form_node_type_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>field_ui_form_node_type_form_alter/7</docrelurl>
            </item>
            <item name= "field_ui_form_node_type_form_submit">
              <description>Redirect to manage fields form.</description>
              <signature>field_ui_form_node_type_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_form_node_type_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_get_destinations">
              <description>Helper functions to handle multipage redirects.</description>
              <signature>field_ui_get_destinations($destinations)</signature>
              <docrelurl>field_ui_get_destinations/7</docrelurl>
            </item>
            <item name= "field_ui_help">
              <description>Implements hook_help().</description>
              <signature>field_ui_help($path, $arg)</signature>
              <docrelurl>field_ui_help/7</docrelurl>
            </item>
            <item name= "field_ui_inactive_instances">
              <description>Helper function to identify inactive fields within a bundle.</description>
              <signature>field_ui_inactive_instances($entity_type, $bundle_name = NULL)</signature>
              <docrelurl>field_ui_inactive_instances/7</docrelurl>
            </item>
            <item name= "field_ui_inactive_message">
              <description>Helper function to display a message about inactive fields.</description>
              <signature>field_ui_inactive_message($entity_type, $bundle)</signature>
              <docrelurl>field_ui_inactive_message/7</docrelurl>
            </item>
            <item name= "field_ui_menu">
              <description>Implements hook_menu().</description>
              <signature>field_ui_menu()</signature>
              <docrelurl>field_ui_menu/7</docrelurl>
            </item>
            <item name= "field_ui_menu_load">
              <description>Menu loader; Load a field instance based on field and bundle name.</description>
              <signature>field_ui_menu_load($field_name, $entity_type, $bundle_name, $bundle_pos, $map)</signature>
              <docrelurl>field_ui_menu_load/7</docrelurl>
            </item>
            <item name= "field_ui_menu_title">
              <description>Menu title callback.</description>
              <signature>field_ui_menu_title($instance)</signature>
              <docrelurl>field_ui_menu_title/7</docrelurl>
            </item>
            <item name= "field_ui_next_destination">
              <description>Return the next redirect path in a multipage sequence.</description>
              <signature>field_ui_next_destination($entity_type, $bundle)</signature>
              <docrelurl>field_ui_next_destination/7</docrelurl>
            </item>
            <item name= "field_ui_theme">
              <description>Implements hook_theme().</description>
              <signature>field_ui_theme()</signature>
              <docrelurl>field_ui_theme/7</docrelurl>
            </item>
            <item name= "field_ui_widget_type_form">
              <description>Menu callback; select a widget for the field.</description>
              <signature>field_ui_widget_type_form($form, &amp;$form_state, $instance)</signature>
              <docrelurl>field_ui_widget_type_form/7</docrelurl>
            </item>
            <item name= "field_ui_widget_type_form_submit">
              <description>Submit the change in widget type.</description>
              <signature>field_ui_widget_type_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>field_ui_widget_type_form_submit/7</docrelurl>
            </item>
            <item name= "field_ui_widget_type_options">
              <description>Return an array of widget type options for a field type. If no field type is provided, returns a nested array of all widget types, keyed by field type human name.</description>
              <signature>field_ui_widget_type_options($field_type = NULL, $by_label = FALSE)</signature>
              <docrelurl>field_ui_widget_type_options/7</docrelurl>
            </item>
            <item name= "field_update_field">
              <description>Updates a field. Any module may forbid any update for any reason. For example, the field's storage module might forbid an update if it would change the storage schema while data for the field exists. A field type module might forbid an update if it would change existing data's semantics, or if there are external dependencies on field settings that cannot be updated.</description>
              <signature>field_update_field($field)</signature>
              <docrelurl>field_update_field/7</docrelurl>
            </item>
            <item name= "field_update_instance">
              <description>Updates an instance of a field. @throw FieldException</description>
              <signature>field_update_instance($instance)</signature>
              <docrelurl>field_update_instance/7</docrelurl>
            </item>
            <item name= "field_valid_language">
              <description>Ensures that a given language code is valid. Checks whether the given language is one of the enabled languages. Otherwise, it returns the current, global language; or the site's default language, if the additional parameter $default is TRUE.</description>
              <signature>field_valid_language($langcode, $default = TRUE)</signature>
              <docrelurl>field_valid_language/7</docrelurl>
            </item>
            <item name= "field_view_field">
              <description>Returns a renderable array for the value of a single field in an entity. The resulting output is a fully themed field with label and multiple values.</description>
              <signature>field_view_field($entity_type, $entity, $field_name, $display = array(), $langcode = NULL)</signature>
              <docrelurl>field_view_field/7</docrelurl>
            </item>
            <item name= "field_view_mode_settings">
              <description>Returns view mode settings in a given bundle.</description>
              <signature>field_view_mode_settings($entity_type, $bundle)</signature>
              <docrelurl>field_view_mode_settings/7</docrelurl>
            </item>
            <item name= "field_view_value">
              <description>Returns a renderable array for a single field value.</description>
              <signature>field_view_value($entity_type, $entity, $field_name, $item, $display = array(), $langcode = NULL)</signature>
              <docrelurl>field_view_value/7</docrelurl>
            </item>
            <item name= "file_ajax_progress">
              <description>Menu callback for upload progress.</description>
              <signature>file_ajax_progress($key)</signature>
              <docrelurl>file_ajax_progress/7</docrelurl>
            </item>
            <item name= "file_ajax_upload">
              <description>Menu callback; Shared AJAX callback for file uploads and deletions. This rebuilds the form element for a particular field item. As long as the form processing is properly encapsulated in the widget element the form should rebuild correctly using FAPI without the need for additional callbacks or processing.</description>
              <signature>file_ajax_upload()</signature>
              <docrelurl>file_ajax_upload/7</docrelurl>
            </item>
            <item name= "file_build_uri">
              <description>Given a relative path, construct a URI into Drupal's default files location.</description>
              <signature>file_build_uri($path)</signature>
              <docrelurl>file_build_uri/7</docrelurl>
            </item>
            <item name= "file_copy">
              <description>Copy a file to a new location and adds a file record to the database. This function should be used when manipulating files that have records stored in the database. This is a powerful function that in many ways performs like an advanced version of copy().</description>
              <signature>file_copy(stdClass $source, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_copy/7</docrelurl>
            </item>
            <item name= "file_create_filename">
              <description>Create a full file path from a directory and filename. If a file with the specified name already exists, an alternative will be used.</description>
              <signature>file_create_filename($basename, $directory)</signature>
              <docrelurl>file_create_filename/7</docrelurl>
            </item>
            <item name= "file_create_htaccess">
              <description>Creates an .htaccess file in the given directory.</description>
              <signature>file_create_htaccess($directory, $private = TRUE)</signature>
              <docrelurl>file_create_htaccess/7</docrelurl>
            </item>
            <item name= "file_create_url">
              <description>Creates a web-accessible URL for a stream to an external or local file. Compatibility: normal paths and stream wrappers.</description>
              <signature>file_create_url($uri)</signature>
              <docrelurl>file_create_url/7</docrelurl>
            </item>
            <item name= "file_default_mimetype_mapping">
              <description>Default MIME extension mapping.</description>
              <signature>file_default_mimetype_mapping()</signature>
              <docrelurl>file_default_mimetype_mapping/7</docrelurl>
            </item>
            <item name= "file_delete">
              <description>Delete a file and its database record. If the $force parameter is not TRUE hook_file_references() will be called to determine if the file is being used by any modules. If the file is being used is the delete will be canceled.</description>
              <signature>file_delete(stdClass $file, $force = FALSE)</signature>
              <docrelurl>file_delete/7</docrelurl>
            </item>
            <item name= "file_destination">
              <description>Determines the destination path for a file depending on how replacement of existing files should be handled.</description>
              <signature>file_destination($destination, $replace)</signature>
              <docrelurl>file_destination/7</docrelurl>
            </item>
            <item name= "file_directory_path">
              <description>Determines the local directory path of a given wrapper. This function will return the directory path of a stream wrapper. A stream is referenced as: "scheme://target". For example, a scheme of "public" might return "sites/default/files" or "temporary" might return "/tmp".</description>
              <signature>file_directory_path($scheme = NULL)</signature>
              <docrelurl>file_directory_path/7</docrelurl>
            </item>
            <item name= "file_directory_temp">
              <description>Get the path of system-appropriate temporary directory.</description>
              <signature>file_directory_temp()</signature>
              <docrelurl>file_directory_temp/7</docrelurl>
            </item>
            <item name= "file_download">
              <description>Menu handler for private file transfers. Call modules that implement hook_file_download() to find out if a file is accessible and what headers it should be transferred with. If a module returns -1 drupal_access_denied() will be returned. If one or more modules returned headers the download will start with the returned headers. If no modules respond drupal_not_found() will be returned.</description>
              <signature>file_download()</signature>
              <docrelurl>file_download/7</docrelurl>
            </item>
            <item name= "file_element_info">
              <description>Implements hook_element_info(). The managed file element may be used independently anywhere in Drupal.</description>
              <signature>file_element_info()</signature>
              <docrelurl>file_element_info/7</docrelurl>
            </item>
            <item name= "file_ensure_htaccess">
              <description>If missing, create a .htaccess file in each Drupal files directory.</description>
              <signature>file_ensure_htaccess()</signature>
              <docrelurl>file_ensure_htaccess/7</docrelurl>
            </item>
            <item name= "file_field_delete">
              <description>Implements hook_field_delete().</description>
              <signature>file_field_delete($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>file_field_delete/7</docrelurl>
            </item>
            <item name= "file_field_delete_file">
              <description>Check that File controls a file before attempting to delete it.</description>
              <signature>file_field_delete_file($item, $field)</signature>
              <docrelurl>file_field_delete_file/7</docrelurl>
            </item>
            <item name= "file_field_delete_revision">
              <description>Implements hook_field_delete_revision().</description>
              <signature>file_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>file_field_delete_revision/7</docrelurl>
            </item>
            <item name= "file_field_displayed">
              <description>Determine whether a file should be displayed when outputting field content.</description>
              <signature>file_field_displayed($item, $field)</signature>
              <docrelurl>file_field_displayed/7</docrelurl>
            </item>
            <item name= "file_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>file_field_formatter_info()</signature>
              <docrelurl>file_field_formatter_info/7</docrelurl>
            </item>
            <item name= "file_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>file_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>file_field_formatter_view/7</docrelurl>
            </item>
            <item name= "file_field_info">
              <description>Implements hook_field_info().</description>
              <signature>file_field_info()</signature>
              <docrelurl>file_field_info/7</docrelurl>
            </item>
            <item name= "file_field_instance_settings_form">
              <description>Implements hook_field_instance_settings_form().</description>
              <signature>file_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>file_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "file_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>file_field_is_empty($item, $field)</signature>
              <docrelurl>file_field_is_empty/7</docrelurl>
            </item>
            <item name= "file_field_load">
              <description>Implements hook_field_load().</description>
              <signature>file_field_load($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $age)</signature>
              <docrelurl>file_field_load/7</docrelurl>
            </item>
            <item name= "file_field_prepare_view">
              <description>Implements hook_field_prepare_view().</description>
              <signature>file_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items)</signature>
              <docrelurl>file_field_prepare_view/7</docrelurl>
            </item>
            <item name= "file_field_presave">
              <description>Implements hook_field_presave().</description>
              <signature>file_field_presave($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>file_field_presave/7</docrelurl>
            </item>
            <item name= "file_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>file_field_schema($field)</signature>
              <docrelurl>file_field_schema/7</docrelurl>
            </item>
            <item name= "file_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>file_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>file_field_settings_form/7</docrelurl>
            </item>
            <item name= "file_field_update">
              <description>Implements hook_field_update(). Check for files that have been removed from the object.</description>
              <signature>file_field_update($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>file_field_update/7</docrelurl>
            </item>
            <item name= "file_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>file_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>file_field_widget_form/7</docrelurl>
            </item>
            <item name= "file_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>file_field_widget_info()</signature>
              <docrelurl>file_field_widget_info/7</docrelurl>
            </item>
            <item name= "file_field_widget_process">
              <description>An element #process callback for the file_generic field type. Expands the file_generic type to include the description and display fields.</description>
              <signature>file_field_widget_process($element, &amp;$form_state, $form)</signature>
              <docrelurl>file_field_widget_process/7</docrelurl>
            </item>
            <item name= "file_field_widget_process_multiple">
              <description>An element #process callback for a group of file_generic fields. Adds the weight field to each row so it can be ordered and adds a new AJAX wrapper around the entire group so it can be replaced all at once.</description>
              <signature>file_field_widget_process_multiple($element, &amp;$form_state, $form)</signature>
              <docrelurl>file_field_widget_process_multiple/7</docrelurl>
            </item>
            <item name= "file_field_widget_settings_form">
              <description>Implements hook_field_widget_settings_form().</description>
              <signature>file_field_widget_settings_form($field, $instance)</signature>
              <docrelurl>file_field_widget_settings_form/7</docrelurl>
            </item>
            <item name= "file_field_widget_upload_validators">
              <description>Get the upload validators for a file field.</description>
              <signature>file_field_widget_upload_validators($field, $instance)</signature>
              <docrelurl>file_field_widget_upload_validators/7</docrelurl>
            </item>
            <item name= "file_field_widget_uri">
              <description>Determine the URI for a file field instance.</description>
              <signature>file_field_widget_uri($field, $instance, $account = NULL)</signature>
              <docrelurl>file_field_widget_uri/7</docrelurl>
            </item>
            <item name= "file_field_widget_value">
              <description>The #value_callback for the file_generic field element.</description>
              <signature>file_field_widget_value($element, $input = FALSE, $form_state)</signature>
              <docrelurl>file_field_widget_value/7</docrelurl>
            </item>
            <item name= "file_file_delete">
              <description>Implements hook_file_delete().</description>
              <signature>file_file_delete($file)</signature>
              <docrelurl>file_file_delete/7</docrelurl>
            </item>
            <item name= "file_file_download">
              <description>Implements hook_file_download(). This function takes an extra parameter $field_type so that it may be re-used by other File-like modules, such as Image.</description>
              <signature>file_file_download($uri, $field_type = 'file')</signature>
              <docrelurl>file_file_download/7</docrelurl>
            </item>
            <item name= "file_file_references">
              <description>Implements hook_file_references().</description>
              <signature>file_file_references($file)</signature>
              <docrelurl>file_file_references/7</docrelurl>
            </item>
            <item name= "file_get_file_references">
              <description>Get a list of references to a file.</description>
              <signature>file_get_file_references($file, $field = NULL, $age = FIELD_LOAD_REVISION, $field_type = 'file')</signature>
              <docrelurl>file_get_file_references/7</docrelurl>
            </item>
            <item name= "file_get_file_reference_count">
              <description>Count the number of times the file is referenced.</description>
              <signature>file_get_file_reference_count($file, $field = NULL, $field_type = NULL)</signature>
              <docrelurl>file_get_file_reference_count/7</docrelurl>
            </item>
            <item name= "file_get_mimetype">
              <description>Determine an Internet Media Type, or MIME type from a filename.</description>
              <signature>file_get_mimetype($uri, $mapping = NULL)</signature>
              <docrelurl>file_get_mimetype/7</docrelurl>
            </item>
            <item name= "file_get_stream_wrappers">
              <description>Drupal stream wrapper registry. A stream wrapper is an abstraction of a file system that allows Drupal to use the same set of methods to access both local files and remote resources.</description>
              <signature>file_get_stream_wrappers($filter = STREAM_WRAPPERS_ALL)</signature>
              <docrelurl>file_get_stream_wrappers/7</docrelurl>
            </item>
            <item name= "file_help">
              <description>Implements hook_help().</description>
              <signature>file_help($path, $arg)</signature>
              <docrelurl>file_help/7</docrelurl>
            </item>
            <item name= "file_icon_map">
              <description>Determine the generic icon MIME package based on a file's MIME type.</description>
              <signature>file_icon_map($file)</signature>
              <docrelurl>file_icon_map/7</docrelurl>
            </item>
            <item name= "file_icon_path">
              <description>Given a file object, create a path to a matching icon.</description>
              <signature>file_icon_path($file, $icon_directory = NULL)</signature>
              <docrelurl>file_icon_path/7</docrelurl>
            </item>
            <item name= "file_icon_url">
              <description>Given a file object, create a URL to a matching icon.</description>
              <signature>file_icon_url($file, $icon_directory = NULL)</signature>
              <docrelurl>file_icon_url/7</docrelurl>
            </item>
            <item name= "file_load">
              <description>Load a file object from the database.</description>
              <signature>file_load($fid)</signature>
              <docrelurl>file_load/7</docrelurl>
            </item>
            <item name= "file_load_multiple">
              <description>Load file objects from the database.</description>
              <signature>file_load_multiple($fids = array(), $conditions = array())</signature>
              <docrelurl>file_load_multiple/7</docrelurl>
            </item>
            <item name= "file_managed_file_process">
              <description>Process function to expand the managed_file element type. Expands the file type to include Upload and Remove buttons, as well as support for a default value.</description>
              <signature>file_managed_file_process($element, &amp;$form_state, $form)</signature>
              <docrelurl>file_managed_file_process/7</docrelurl>
            </item>
            <item name= "file_managed_file_save_upload">
              <description>Given a managed_file element, save any files that have been uploaded into it.</description>
              <signature>file_managed_file_save_upload($element)</signature>
              <docrelurl>file_managed_file_save_upload/7</docrelurl>
            </item>
            <item name= "file_managed_file_submit">
              <description>Submit handler for non-JavaScript uploads.</description>
              <signature>file_managed_file_submit($form, &amp;$form_state)</signature>
              <docrelurl>file_managed_file_submit/7</docrelurl>
            </item>
            <item name= "file_managed_file_validate">
              <description>An #element_validate callback for the managed_file element.</description>
              <signature>file_managed_file_validate(&amp;$element, &amp;$form_state)</signature>
              <docrelurl>file_managed_file_validate/7</docrelurl>
            </item>
            <item name= "file_managed_file_value">
              <description>The #value_callback for a managed_file type element.</description>
              <signature>file_managed_file_value(&amp;$element, $input = FALSE, $form_state = NULL)</signature>
              <docrelurl>file_managed_file_value/7</docrelurl>
            </item>
            <item name= "file_menu">
              <description>Implements hook_menu().</description>
              <signature>file_menu()</signature>
              <docrelurl>file_menu/7</docrelurl>
            </item>
            <item name= "file_mimetype_mapping">
              <description>Return an array of MIME extension mappings. Returns the mapping after modules have altered the default mapping.</description>
              <signature>file_mimetype_mapping()</signature>
              <docrelurl>file_mimetype_mapping/7</docrelurl>
            </item>
            <item name= "file_module_test_form">
              <description>Code modules/file/tests/file_module_test.module, line 25</description>
              <signature>file_module_test_form($form, $form_state)</signature>
              <docrelurl>file_module_test_form/7</docrelurl>
            </item>
            <item name= "file_module_test_menu">
              <description>Implements hook_menu().</description>
              <signature>file_module_test_menu()</signature>
              <docrelurl>file_module_test_menu/7</docrelurl>
            </item>
            <item name= "file_move">
              <description>Move a file to a new location and update the file's database entry. Moving a file is performed by copying the file to the new location and then deleting the original.</description>
              <signature>file_move(stdClass $source, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_move/7</docrelurl>
            </item>
            <item name= "file_munge_filename">
              <description>Modify a filename as needed for security purposes. Dangerous file names will be altered; for instance, the file name "exploit.php.pps" will become "exploit.php_.pps". All extensions that are between 2 and 5 characters in length, internal to the file name, and not included in $extensions will be altered by adding an underscore. If variable 'allow_insecure_uploads' evaluates to TRUE, no alterations will be made.</description>
              <signature>file_munge_filename($filename, $extensions, $alerts = TRUE)</signature>
              <docrelurl>file_munge_filename/7</docrelurl>
            </item>
            <item name= "file_prepare_directory">
              <description>Check that the directory exists and is writable. Directories need to have execute permissions to be considered a directory by FTP servers, etc.</description>
              <signature>file_prepare_directory(&amp;$directory, $options = FILE_MODIFY_PERMISSIONS)</signature>
              <docrelurl>file_prepare_directory/7</docrelurl>
            </item>
            <item name= "file_progress_implementation">
              <description>Determine the preferred upload progress implementation.</description>
              <signature>file_progress_implementation()</signature>
              <docrelurl>file_progress_implementation/7</docrelurl>
            </item>
            <item name= "file_requirements">
              <description>Implements hook_requirements(). Display information about getting upload progress bars working.</description>
              <signature>file_requirements($phase)</signature>
              <docrelurl>file_requirements/7</docrelurl>
            </item>
            <item name= "file_save">
              <description>Save a file object to the database. If the $file->fid is not set a new record will be added. Re-saving an existing file will not change its status.</description>
              <signature>file_save(stdClass $file)</signature>
              <docrelurl>file_save/7</docrelurl>
            </item>
            <item name= "file_save_data">
              <description>Save a string to the specified destination and create a database file entry.</description>
              <signature>file_save_data($data, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_save_data/7</docrelurl>
            </item>
            <item name= "file_save_upload">
              <description>Saves a file upload to a new location. The file will be added to the {file_managed} table as a temporary file. Temporary files are periodically cleaned. To make the file a permanent file, assign the status and use file_save() to save the changes.</description>
              <signature>file_save_upload($source, $validators = array(), $destination = FALSE, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_save_upload/7</docrelurl>
            </item>
            <item name= "file_scan_directory">
              <description>Finds all files that match a given mask in a given directory. Directories and files beginning with a period are excluded; this prevents hidden files and directories (such as SVN working directories) from being scanned.</description>
              <signature>file_scan_directory($dir, $mask, $options = array(), $depth = 0)</signature>
              <docrelurl>file_scan_directory/7</docrelurl>
            </item>
            <item name= "file_space_used">
              <description>Determine total disk space used by a single user or the whole filesystem.</description>
              <signature>file_space_used($uid = NULL, $status = FILE_STATUS_PERMANENT)</signature>
              <docrelurl>file_space_used/7</docrelurl>
            </item>
            <item name= "file_stream_wrapper_get_class">
              <description>Returns the stream wrapper class name for a given scheme.</description>
              <signature>file_stream_wrapper_get_class($scheme)</signature>
              <docrelurl>file_stream_wrapper_get_class/7</docrelurl>
            </item>
            <item name= "file_stream_wrapper_get_instance_by_scheme">
              <description>Returns a reference to the stream wrapper class responsible for a given scheme. This helper method returns a stream instance using a scheme. That is, the passed string does not contain a "://". For example, "public" is a scheme but "public://" is a URI (stream). This is because the later contains both a scheme and target despite target being empty.</description>
              <signature>file_stream_wrapper_get_instance_by_scheme($scheme)</signature>
              <docrelurl>file_stream_wrapper_get_instance_by_scheme/7</docrelurl>
            </item>
            <item name= "file_stream_wrapper_get_instance_by_uri">
              <description>Returns a reference to the stream wrapper class responsible for a given URI. The scheme determines the stream wrapper class that should be used by consulting the stream wrapper registry.</description>
              <signature>file_stream_wrapper_get_instance_by_uri($uri)</signature>
              <docrelurl>file_stream_wrapper_get_instance_by_uri/7</docrelurl>
            </item>
            <item name= "file_stream_wrapper_uri_normalize">
              <description>Normalizes a URI by making it syntactically correct. A stream is referenced as "scheme://target".</description>
              <signature>file_stream_wrapper_uri_normalize($uri)</signature>
              <docrelurl>file_stream_wrapper_uri_normalize/7</docrelurl>
            </item>
            <item name= "file_stream_wrapper_valid_scheme">
              <description>Check that the scheme of a stream URI is valid. Confirms that there is a registered stream handler for the provided scheme and that it is callable. This is useful if you want to confirm a valid scheme without creating a new instance of the registered handler.</description>
              <signature>file_stream_wrapper_valid_scheme($scheme)</signature>
              <docrelurl>file_stream_wrapper_valid_scheme/7</docrelurl>
            </item>
            <item name= "file_test_file_copy">
              <description>Implements hook_file_copy().</description>
              <signature>file_test_file_copy($file, $source)</signature>
              <docrelurl>file_test_file_copy/7</docrelurl>
            </item>
            <item name= "file_test_file_delete">
              <description>Implements hook_file_delete().</description>
              <signature>file_test_file_delete($file)</signature>
              <docrelurl>file_test_file_delete/7</docrelurl>
            </item>
            <item name= "file_test_file_download">
              <description>Implements hook_file_download().</description>
              <signature>file_test_file_download($uri)</signature>
              <docrelurl>file_test_file_download/7</docrelurl>
            </item>
            <item name= "file_test_file_insert">
              <description>Implements hook_file_insert().</description>
              <signature>file_test_file_insert($file)</signature>
              <docrelurl>file_test_file_insert/7</docrelurl>
            </item>
            <item name= "file_test_file_load">
              <description>Implements hook_file_load().</description>
              <signature>file_test_file_load($files)</signature>
              <docrelurl>file_test_file_load/7</docrelurl>
            </item>
            <item name= "file_test_file_mimetype_mapping_alter">
              <description>Implements hook_file_mimetype_mapping_alter().</description>
              <signature>file_test_file_mimetype_mapping_alter(&amp;$mapping)</signature>
              <docrelurl>file_test_file_mimetype_mapping_alter/7</docrelurl>
            </item>
            <item name= "file_test_file_move">
              <description>Implements hook_file_move().</description>
              <signature>file_test_file_move($file, $source)</signature>
              <docrelurl>file_test_file_move/7</docrelurl>
            </item>
            <item name= "file_test_file_references">
              <description>Implements hook_file_references().</description>
              <signature>file_test_file_references($file)</signature>
              <docrelurl>file_test_file_references/7</docrelurl>
            </item>
            <item name= "file_test_file_update">
              <description>Implements hook_file_update().</description>
              <signature>file_test_file_update($file)</signature>
              <docrelurl>file_test_file_update/7</docrelurl>
            </item>
            <item name= "file_test_file_url_alter">
              <description>Implements hook_file_url_alter().</description>
              <signature>file_test_file_url_alter(&amp;$uri)</signature>
              <docrelurl>file_test_file_url_alter/7</docrelurl>
            </item>
            <item name= "file_test_file_validate">
              <description>Implements hook_file_validate().</description>
              <signature>file_test_file_validate($file)</signature>
              <docrelurl>file_test_file_validate/7</docrelurl>
            </item>
            <item name= "file_test_get_all_calls">
              <description>Get an array with the calls for all hooks.</description>
              <signature>file_test_get_all_calls()</signature>
              <docrelurl>file_test_get_all_calls/7</docrelurl>
            </item>
            <item name= "file_test_get_calls">
              <description>Get the arguments passed to invocation of a given hook since file_test_reset() was last called.</description>
              <signature>file_test_get_calls($op)</signature>
              <docrelurl>file_test_get_calls/7</docrelurl>
            </item>
            <item name= "file_test_menu">
              <description>Implements hook_menu().</description>
              <signature>file_test_menu()</signature>
              <docrelurl>file_test_menu/7</docrelurl>
            </item>
            <item name= "file_test_reset">
              <description>Reset/initialize the history of calls to the file_* hooks.</description>
              <signature>file_test_reset()</signature>
              <docrelurl>file_test_reset/7</docrelurl>
            </item>
            <item name= "file_test_set_return">
              <description>Assign a return value for a given operation.</description>
              <signature>file_test_set_return($op, $value)</signature>
              <docrelurl>file_test_set_return/7</docrelurl>
            </item>
            <item name= "file_test_stream_wrappers">
              <description>Implements hook_stream_wrappers().</description>
              <signature>file_test_stream_wrappers()</signature>
              <docrelurl>file_test_stream_wrappers/7</docrelurl>
            </item>
            <item name= "file_theme">
              <description>Implements hook_theme().</description>
              <signature>file_theme()</signature>
              <docrelurl>file_theme/7</docrelurl>
            </item>
            <item name= "file_transfer">
              <description>Transfer file using HTTP to client. Pipes a file through Drupal to the client.</description>
              <signature>file_transfer($uri, $headers)</signature>
              <docrelurl>file_transfer/7</docrelurl>
            </item>
            <item name= "file_unmanaged_copy">
              <description>Copy a file to a new location without invoking the file API. This is a powerful function that in many ways performs like an advanced version of copy().</description>
              <signature>file_unmanaged_copy($source, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_unmanaged_copy/7</docrelurl>
            </item>
            <item name= "file_unmanaged_delete">
              <description>Delete a file without calling any hooks or making any changes to the database. This function should be used when the file to be deleted does not have an entry recorded in the files table.</description>
              <signature>file_unmanaged_delete($path)</signature>
              <docrelurl>file_unmanaged_delete/7</docrelurl>
            </item>
            <item name= "file_unmanaged_delete_recursive">
              <description>Recursively delete all files and directories in the specified filepath. If the specified path is a directory then the function will call itself recursively to process the contents. Once the contents have been removed the directory will also be removed.</description>
              <signature>file_unmanaged_delete_recursive($path)</signature>
              <docrelurl>file_unmanaged_delete_recursive/7</docrelurl>
            </item>
            <item name= "file_unmanaged_move">
              <description>Move a file to a new location without calling any hooks or making any changes to the database.</description>
              <signature>file_unmanaged_move($source, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_unmanaged_move/7</docrelurl>
            </item>
            <item name= "file_unmanaged_save_data">
              <description>Save a string to the specified destination without invoking file API. This function is identical to file_save_data() except the file will not be saved to the {file_managed} table and none of the file_* hooks will be called.</description>
              <signature>file_unmanaged_save_data($data, $destination = NULL, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>file_unmanaged_save_data/7</docrelurl>
            </item>
            <item name= "file_unmunge_filename">
              <description>Undo the effect of upload_munge_filename().</description>
              <signature>file_unmunge_filename($filename)</signature>
              <docrelurl>file_unmunge_filename/7</docrelurl>
            </item>
            <item name= "file_upload_max_size">
              <description>Determine the maximum file upload size by querying the PHP settings.</description>
              <signature>file_upload_max_size()</signature>
              <docrelurl>file_upload_max_size/7</docrelurl>
            </item>
            <item name= "file_uri_scheme">
              <description>Returns the scheme of a URI (e.g. a stream).</description>
              <signature>file_uri_scheme($uri)</signature>
              <docrelurl>file_uri_scheme/7</docrelurl>
            </item>
            <item name= "file_uri_target">
              <description>Returns the target of a URI (e.g. a stream).</description>
              <signature>file_uri_target($uri)</signature>
              <docrelurl>file_uri_target/7</docrelurl>
            </item>
            <item name= "file_validate">
              <description>Check that a file meets the criteria specified by the validators. After executing the validator callbacks specified hook_file_validate() will also be called to allow other modules to report errors about the file.</description>
              <signature>file_validate(stdClass &amp;$file, $validators = array())</signature>
              <docrelurl>file_validate/7</docrelurl>
            </item>
            <item name= "file_validate_extensions">
              <description>Check that the filename ends with an allowed extension.</description>
              <signature>file_validate_extensions(stdClass $file, $extensions)</signature>
              <docrelurl>file_validate_extensions/7</docrelurl>
            </item>
            <item name= "file_validate_image_resolution">
              <description>Verify that image dimensions are within the specified maximum and minimum. Non-image files will be ignored. If a image toolkit is available the image will be scaled to fit within the desired maximum dimensions.</description>
              <signature>file_validate_image_resolution(stdClass $file, $maximum_dimensions = 0, $minimum_dimensions = 0)</signature>
              <docrelurl>file_validate_image_resolution/7</docrelurl>
            </item>
            <item name= "file_validate_is_image">
              <description>Check that the file is recognized by image_get_info() as an image.</description>
              <signature>file_validate_is_image(stdClass $file)</signature>
              <docrelurl>file_validate_is_image/7</docrelurl>
            </item>
            <item name= "file_validate_name_length">
              <description>Check for files with names longer than we can store in the database.</description>
              <signature>file_validate_name_length(stdClass $file)</signature>
              <docrelurl>file_validate_name_length/7</docrelurl>
            </item>
            <item name= "file_validate_size">
              <description>Check that the file's size is below certain limits. This check is not enforced for the user #1.</description>
              <signature>file_validate_size(stdClass $file, $file_limit = 0, $user_limit = 0)</signature>
              <docrelurl>file_validate_size/7</docrelurl>
            </item>
            <item name= "filter_access">
              <description>Checks if a user has access to a particular text format.</description>
              <signature>filter_access($format, $account = NULL)</signature>
              <docrelurl>filter_access/7</docrelurl>
            </item>
            <item name= "filter_admin_delete">
              <description>Menu callback; confirm deletion of a format.</description>
              <signature>filter_admin_delete($form, &amp;$form_state, $format)</signature>
              <docrelurl>filter_admin_delete/7</docrelurl>
            </item>
            <item name= "filter_admin_delete_submit">
              <description>Process filter delete form submission.</description>
              <signature>filter_admin_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>filter_admin_delete_submit/7</docrelurl>
            </item>
            <item name= "filter_admin_format_form">
              <description>Generate a text format form.</description>
              <signature>filter_admin_format_form($form, &amp;$form_state, $format)</signature>
              <docrelurl>filter_admin_format_form/7</docrelurl>
            </item>
            <item name= "filter_admin_format_form_submit">
              <description>Process text format form submissions.</description>
              <signature>filter_admin_format_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>filter_admin_format_form_submit/7</docrelurl>
            </item>
            <item name= "filter_admin_format_form_validate">
              <description>Validate text format form submissions.</description>
              <signature>filter_admin_format_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>filter_admin_format_form_validate/7</docrelurl>
            </item>
            <item name= "filter_admin_format_page">
              <description>Menu callback; Display a text format form.</description>
              <signature>filter_admin_format_page($format = NULL)</signature>
              <docrelurl>filter_admin_format_page/7</docrelurl>
            </item>
            <item name= "filter_admin_format_title">
              <description>Display a text format form title.</description>
              <signature>filter_admin_format_title($format)</signature>
              <docrelurl>filter_admin_format_title/7</docrelurl>
            </item>
            <item name= "filter_admin_overview">
              <description>Menu callback; Displays a list of all text formats and allows them to be rearranged.</description>
              <signature>filter_admin_overview($form)</signature>
              <docrelurl>filter_admin_overview/7</docrelurl>
            </item>
            <item name= "filter_admin_overview_submit">
              <description>Code modules/filter/filter.admin.inc, line 44</description>
              <signature>filter_admin_overview_submit($form, &amp;$form_state)</signature>
              <docrelurl>filter_admin_overview_submit/7</docrelurl>
            </item>
            <item name= "filter_cron">
              <description>Implements hook_cron(). Expire outdated filter cache entries</description>
              <signature>filter_cron()</signature>
              <docrelurl>filter_cron/7</docrelurl>
            </item>
            <item name= "filter_default_format">
              <description>Returns the ID of the default text format for a particular user. The default text format is the first available format that the user is allowed to access, when the formats are ordered by weight. It should generally be used as a default choice when presenting the user with a list of possible text formats (for example, in a node creation form).</description>
              <signature>filter_default_format($account = NULL)</signature>
              <docrelurl>filter_default_format/7</docrelurl>
            </item>
            <item name= "filter_dom_load">
              <description>Parses an HTML snippet and returns it as a DOM object. This function loads the body part of a partial (X)HTML document and returns a full DOMDocument object that represents this document. You can use filter_dom_serialize() to serialize this DOMDocument back to a XHTML snippet.</description>
              <signature>filter_dom_load($text)</signature>
              <docrelurl>filter_dom_load/7</docrelurl>
            </item>
            <item name= "filter_dom_serialize">
              <description>Converts a DOM object back to an HTML snippet. The function serializes the body part of a DOMDocument back to an XHTML snippet.</description>
              <signature>filter_dom_serialize($dom_document)</signature>
              <docrelurl>filter_dom_serialize/7</docrelurl>
            </item>
            <item name= "filter_dom_serialize_escape_cdata_element">
              <description>Adds comments around the CDATA section in a dom element. DOMDocument::loadHTML in filter_dom_load() makes CDATA sections from the contents of inline script and style tags. This can cause HTML 4 browsers to throw exceptions.</description>
              <signature>filter_dom_serialize_escape_cdata_element($dom_document, $dom_element, $comment_start = '//', $comment_end = '')</signature>
              <docrelurl>filter_dom_serialize_escape_cdata_element/7</docrelurl>
            </item>
            <item name= "filter_element_info">
              <description>Implements hook_element_info().</description>
              <signature>filter_element_info()</signature>
              <docrelurl>filter_element_info/7</docrelurl>
            </item>
            <item name= "filter_fallback_format">
              <description>Returns the ID of the fallback text format that all users have access to. The fallback text format is a regular text format in every respect, except it does not participate in the filter permission system and cannot be deleted. It needs to exist because any user who has permission to create formatted content must always have at least one text format they can use.</description>
              <signature>filter_fallback_format()</signature>
              <docrelurl>filter_fallback_format/7</docrelurl>
            </item>
            <item name= "filter_fallback_format_title">
              <description>Returns the title of the fallback text format.</description>
              <signature>filter_fallback_format_title()</signature>
              <docrelurl>filter_fallback_format_title/7</docrelurl>
            </item>
            <item name= "filter_filter_info">
              <description>Implements hook_filter_info().</description>
              <signature>filter_filter_info()</signature>
              <docrelurl>filter_filter_info/7</docrelurl>
            </item>
            <item name= "filter_formats">
              <description>Retrieve a list of text formats, ordered by weight.</description>
              <signature>filter_formats($account = NULL)</signature>
              <docrelurl>filter_formats/7</docrelurl>
            </item>
            <item name= "filter_formats_reset">
              <description>Resets the static cache of all text formats.</description>
              <signature>filter_formats_reset()</signature>
              <docrelurl>filter_formats_reset/7</docrelurl>
            </item>
            <item name= "filter_format_allowcache">
              <description>Check if text in a certain text format is allowed to be cached. This function can be used to check whether the result of the filtering process can be cached. A text format may allow caching depending on the filters enabled.</description>
              <signature>filter_format_allowcache($format_id)</signature>
              <docrelurl>filter_format_allowcache/7</docrelurl>
            </item>
            <item name= "filter_format_delete">
              <description>Delete a text format.</description>
              <signature>filter_format_delete($format)</signature>
              <docrelurl>filter_format_delete/7</docrelurl>
            </item>
            <item name= "filter_format_load">
              <description>Load a text format object from the database.</description>
              <signature>filter_format_load($format_id)</signature>
              <docrelurl>filter_format_load/7</docrelurl>
            </item>
            <item name= "filter_format_save">
              <description>Save a text format object to the database.</description>
              <signature>filter_format_save(&amp;$format)</signature>
              <docrelurl>filter_format_save/7</docrelurl>
            </item>
            <item name= "filter_form_access_denied">
              <description>#pre_render callback for #type 'text_format' to hide field value from prying eyes. To not break form processing and previews if a user does not have access to a stored text format, the expanded form elements in filter_process_format() are forced to take over the stored #default_values for 'value' and 'format'. However, to prevent the unfiltered, original #value from being displayed to the user, we replace it with a friendly notice here.</description>
              <signature>filter_form_access_denied($element)</signature>
              <docrelurl>filter_form_access_denied/7</docrelurl>
            </item>
            <item name= "filter_get_filters">
              <description>Return a list of all filters provided by modules.</description>
              <signature>filter_get_filters()</signature>
              <docrelurl>filter_get_filters/7</docrelurl>
            </item>
            <item name= "filter_get_formats_by_role">
              <description>Retrieves a list of text formats that are allowed for a given role.</description>
              <signature>filter_get_formats_by_role($rid)</signature>
              <docrelurl>filter_get_formats_by_role/7</docrelurl>
            </item>
            <item name= "filter_get_roles_by_format">
              <description>Retrieves a list of roles that are allowed to use a given text format.</description>
              <signature>filter_get_roles_by_format($format)</signature>
              <docrelurl>filter_get_roles_by_format/7</docrelurl>
            </item>
            <item name= "filter_help">
              <description>Implements hook_help().</description>
              <signature>filter_help($path, $arg)</signature>
              <docrelurl>filter_help/7</docrelurl>
            </item>
            <item name= "filter_install">
              <description>Implements hook_install().</description>
              <signature>filter_install()</signature>
              <docrelurl>filter_install/7</docrelurl>
            </item>
            <item name= "filter_list_format">
              <description>Retrieve a list of filters for a given text format. Note that this function returns all associated filters regardless of whether they are enabled or disabled. All functions working with the filter information outside of filter administration should test for $filter->status before performing actions with the filter.</description>
              <signature>filter_list_format($format_id)</signature>
              <docrelurl>filter_list_format/7</docrelurl>
            </item>
            <item name= "filter_menu">
              <description>Implements hook_menu().</description>
              <signature>filter_menu()</signature>
              <docrelurl>filter_menu/7</docrelurl>
            </item>
            <item name= "filter_modules_disabled">
              <description>Implements hook_modules_disabled().</description>
              <signature>filter_modules_disabled($modules)</signature>
              <docrelurl>filter_modules_disabled/7</docrelurl>
            </item>
            <item name= "filter_modules_enabled">
              <description>Implements hook_modules_enabled().</description>
              <signature>filter_modules_enabled($modules)</signature>
              <docrelurl>filter_modules_enabled/7</docrelurl>
            </item>
            <item name= "filter_permission">
              <description>Implements hook_permission().</description>
              <signature>filter_permission()</signature>
              <docrelurl>filter_permission/7</docrelurl>
            </item>
            <item name= "filter_permission_name">
              <description>Returns the machine-readable permission name for a provided text format.</description>
              <signature>filter_permission_name($format)</signature>
              <docrelurl>filter_permission_name/7</docrelurl>
            </item>
            <item name= "filter_process_format">
              <description>Expands an element into a base element with text format selector attached. The form element will be expanded into two separate form elements, one holding the original element, and the other holding the text format selector:</description>
              <signature>filter_process_format($element)</signature>
              <docrelurl>filter_process_format/7</docrelurl>
            </item>
            <item name= "filter_schema">
              <description>Implements hook_schema().</description>
              <signature>filter_schema()</signature>
              <docrelurl>filter_schema/7</docrelurl>
            </item>
            <item name= "filter_test_filter_format_delete">
              <description>Implements hook_filter_format_delete().</description>
              <signature>filter_test_filter_format_delete($format, $default)</signature>
              <docrelurl>filter_test_filter_format_delete/7</docrelurl>
            </item>
            <item name= "filter_test_filter_format_insert">
              <description>Implements hook_filter_format_insert().</description>
              <signature>filter_test_filter_format_insert($format)</signature>
              <docrelurl>filter_test_filter_format_insert/7</docrelurl>
            </item>
            <item name= "filter_test_filter_format_update">
              <description>Implements hook_filter_format_update().</description>
              <signature>filter_test_filter_format_update($format)</signature>
              <docrelurl>filter_test_filter_format_update/7</docrelurl>
            </item>
            <item name= "filter_test_filter_info">
              <description>Implements hook_filter_info().</description>
              <signature>filter_test_filter_info()</signature>
              <docrelurl>filter_test_filter_info/7</docrelurl>
            </item>
            <item name= "filter_theme">
              <description>Implements hook_theme().</description>
              <signature>filter_theme()</signature>
              <docrelurl>filter_theme/7</docrelurl>
            </item>
            <item name= "filter_tips_long">
              <description>Menu callback; show a page with long filter tips.</description>
              <signature>filter_tips_long()</signature>
              <docrelurl>filter_tips_long/7</docrelurl>
            </item>
            <item name= "filter_update_7000">
              <description>Increase the size of {filters}.weight and add {filter_formats}.weight.</description>
              <signature>filter_update_7000()</signature>
              <docrelurl>filter_update_7000/7</docrelurl>
            </item>
            <item name= "filter_update_7001">
              <description>Break out "escape HTML filter" option to its own filter.</description>
              <signature>filter_update_7001()</signature>
              <docrelurl>filter_update_7001/7</docrelurl>
            </item>
            <item name= "filter_update_7002">
              <description>Rename {filters} table to {filter} and {filter_formats} table to {filter_format}.</description>
              <signature>filter_update_7002()</signature>
              <docrelurl>filter_update_7002/7</docrelurl>
            </item>
            <item name= "filter_update_7003">
              <description>Remove hardcoded numeric deltas from all filters in core.</description>
              <signature>filter_update_7003()</signature>
              <docrelurl>filter_update_7003/7</docrelurl>
            </item>
            <item name= "filter_update_7004">
              <description>Move filter settings storage into {filter} table.</description>
              <signature>filter_update_7004()</signature>
              <docrelurl>filter_update_7004/7</docrelurl>
            </item>
            <item name= "filter_update_7005">
              <description>Integrate text formats with the user permissions system. This function converts text format role assignments to use the new text format permissions introduced in Drupal 7, creates a fallback (plain text) format that is available to all users, and explicitly sets the text format in cases that used to rely on a single site-wide default.</description>
              <signature>filter_update_7005()</signature>
              <docrelurl>filter_update_7005/7</docrelurl>
            </item>
            <item name= "filter_update_7008">
              <description>Grant usage of all text formats to user roles having the 'administer filters' permission.</description>
              <signature>filter_update_7008()</signature>
              <docrelurl>filter_update_7008/7</docrelurl>
            </item>
            <item name= "filter_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>filter_update_dependencies()</signature>
              <docrelurl>filter_update_dependencies/7</docrelurl>
            </item>
            <item name= "filter_xss">
              <description>Filter XSS. Based on kses by Ulf Harnhammar, see http://sourceforge.net/projects/kses</description>
              <signature>filter_xss($string, $allowed_tags = array('a', 'em', 'strong', 'cite', 'blockquote', 'code', 'ul', 'ol', 'li', 'dl', 'dt', 'dd'))</signature>
              <docrelurl>filter_xss/7</docrelurl>
            </item>
            <item name= "filter_xss_admin">
              <description>Very permissive XSS/HTML filter for admin-only use. Use only for fields where it is impractical to use the whole filter system, but where some (mainly inline) mark-up is desired (so check_plain() is not acceptable).</description>
              <signature>filter_xss_admin($string)</signature>
              <docrelurl>filter_xss_admin/7</docrelurl>
            </item>
            <item name= "filter_xss_bad_protocol">
              <description>Processes an HTML attribute value and ensures it does not contain an URL with a disallowed protocol (e.g. javascript:).</description>
              <signature>filter_xss_bad_protocol($string, $decode = TRUE)</signature>
              <docrelurl>filter_xss_bad_protocol/7</docrelurl>
            </item>
            <item name= "fix_gpc_magic">
              <description>Fix double-escaping problems caused by "magic quotes" in some PHP installations.</description>
              <signature>fix_gpc_magic()</signature>
              <docrelurl>fix_gpc_magic/7</docrelurl>
            </item>
            <item name= "flood_clear_event">
              <description>Make the flood control mechanism forget about an event for the current visitor.</description>
              <signature>flood_clear_event($name, $identifier = NULL)</signature>
              <docrelurl>flood_clear_event/7</docrelurl>
            </item>
            <item name= "flood_is_allowed">
              <description>Checks whether user is allowed to proceed with the specified event. Events can have thresholds saying that each user can only do that event a certain number of times in a time window. This function verifies that the current user has not exceeded this threshold.</description>
              <signature>flood_is_allowed($name, $threshold, $window = 3600, $identifier = NULL)</signature>
              <docrelurl>flood_is_allowed/7</docrelurl>
            </item>
            <item name= "flood_register_event">
              <description>Register an event for the current visitor to the flood control mechanism.</description>
              <signature>flood_register_event($name, $window = 3600, $identifier = NULL)</signature>
              <docrelurl>flood_register_event/7</docrelurl>
            </item>
            <item name= "format_date">
              <description>Format a date with the given configured format or a custom format string. Drupal allows administrators to select formatting strings for 'short', 'medium' and 'long' date formats. This function can handle these formats, as well as any custom format.</description>
              <signature>format_date($timestamp, $type = 'medium', $format = '', $timezone = NULL, $langcode = NULL)</signature>
              <docrelurl>format_date/7</docrelurl>
            </item>
            <item name= "format_interval">
              <description>Format a time interval with the requested granularity.</description>
              <signature>format_interval($timestamp, $granularity = 2, $langcode = NULL)</signature>
              <docrelurl>format_interval/7</docrelurl>
            </item>
            <item name= "format_plural">
              <description>Format a string containing a count of items. This function ensures that the string is pluralized correctly. Since t() is called by this function, make sure not to pass already-localized strings to it.</description>
              <signature>format_plural($count, $singular, $plural, array $args = array(), array $options = array())</signature>
              <docrelurl>format_plural/7</docrelurl>
            </item>
            <item name= "format_rss_channel">
              <description>Formats an RSS channel. Arbitrary elements may be added using the $args associative array.</description>
              <signature>format_rss_channel($title, $link, $description, $items, $langcode = NULL, $args = array())</signature>
              <docrelurl>format_rss_channel/7</docrelurl>
            </item>
            <item name= "format_rss_item">
              <description>Format a single RSS item. Arbitrary elements may be added using the $args associative array.</description>
              <signature>format_rss_item($title, $link, $description, $args = array())</signature>
              <docrelurl>format_rss_item/7</docrelurl>
            </item>
            <item name= "format_size">
              <description>Generate a string representation for the given byte count.</description>
              <signature>format_size($size, $langcode = NULL)</signature>
              <docrelurl>format_size/7</docrelurl>
            </item>
            <item name= "format_username">
              <description>Format a username. By default, the passed in object's 'name' property is used if it exists, or else, the site-defined value for the 'anonymous' variable. However, a module may override this by implementing hook_username_alter(&amp;$name, $account).</description>
              <signature>format_username($account)</signature>
              <docrelurl>format_username/7</docrelurl>
            </item>
            <item name= "format_xml_elements">
              <description>Format XML elements.</description>
              <signature>format_xml_elements($array)</signature>
              <docrelurl>format_xml_elements/7</docrelurl>
            </item>
            <item name= "form_builder">
              <description>Walk through the structured form array, adding any required properties to each element and mapping the incoming input data to the proper elements. Also, execute any #process handlers attached to a specific element.</description>
              <signature>form_builder($form_id, $element, &amp;$form_state)</signature>
              <docrelurl>form_builder/7</docrelurl>
            </item>
            <item name= "form_clear_error">
              <description>Clear all errors against all form elements made by form_set_error().</description>
              <signature>form_clear_error()</signature>
              <docrelurl>form_clear_error/7</docrelurl>
            </item>
            <item name= "form_error">
              <description>Flag an element as having an error.</description>
              <signature>form_error(&amp;$element, $message = '')</signature>
              <docrelurl>form_error/7</docrelurl>
            </item>
            <item name= "form_execute_handlers">
              <description>A helper function used to execute custom validation and submission handlers for a given form. Button-specific handlers are checked first. If none exist, the function falls back to form-level handlers.</description>
              <signature>form_execute_handlers($type, &amp;$form, &amp;$form_state)</signature>
              <docrelurl>form_execute_handlers/7</docrelurl>
            </item>
            <item name= "form_get_cache">
              <description>Fetch a form from cache.</description>
              <signature>form_get_cache($form_build_id, &amp;$form_state)</signature>
              <docrelurl>form_get_cache/7</docrelurl>
            </item>
            <item name= "form_get_error">
              <description>Return the error message filed against the form with the specified name.</description>
              <signature>form_get_error($element)</signature>
              <docrelurl>form_get_error/7</docrelurl>
            </item>
            <item name= "form_get_errors">
              <description>Return an associative array of all errors.</description>
              <signature>form_get_errors()</signature>
              <docrelurl>form_get_errors/7</docrelurl>
            </item>
            <item name= "form_get_options">
              <description>Traverses a select element's #option array looking for any values that hold the given key. Returns an array of indexes that match. This function is useful if you need to modify the options that are already in a form element; for example, to remove choices which are not valid because of additional filters imposed by another module. One example might be altering the choices in a taxonomy selector. To correctly handle the case of a multiple hierarchy taxonomy, #options arrays can now hold an array of objects, instead of a direct mapping of keys to labels, so that multiple choices in the selector can have the same key (and label). This makes it difficult to manipulate directly, which is why this helper function exists.</description>
              <signature>form_get_options($element, $key)</signature>
              <docrelurl>form_get_options/7</docrelurl>
            </item>
            <item name= "form_label_test_form">
              <description>A form for testing form labels and required marks.</description>
              <signature>form_label_test_form()</signature>
              <docrelurl>form_label_test_form/7</docrelurl>
            </item>
            <item name= "form_options_flatten">
              <description>Related topics</description>
              <signature>form_options_flatten($array)</signature>
              <docrelurl>form_options_flatten/7</docrelurl>
            </item>
            <item name= "form_pre_render_conditional_form_element">
              <description>Add form_element theming to an element if title or description is set. This is used as a pre render function for checkboxes and radios.</description>
              <signature>form_pre_render_conditional_form_element($element)</signature>
              <docrelurl>form_pre_render_conditional_form_element/7</docrelurl>
            </item>
            <item name= "form_pre_render_fieldset">
              <description>Adds members of this group as actual elements for rendering.</description>
              <signature>form_pre_render_fieldset($element)</signature>
              <docrelurl>form_pre_render_fieldset/7</docrelurl>
            </item>
            <item name= "form_process_actions">
              <description>Processes a form actions container element.</description>
              <signature>form_process_actions($element, &amp;$form_state)</signature>
              <docrelurl>form_process_actions/7</docrelurl>
            </item>
            <item name= "form_process_checkboxes">
              <description>Related topics</description>
              <signature>form_process_checkboxes($element)</signature>
              <docrelurl>form_process_checkboxes/7</docrelurl>
            </item>
            <item name= "form_process_container">
              <description>Processes a container element.</description>
              <signature>form_process_container($element, &amp;$form_state)</signature>
              <docrelurl>form_process_container/7</docrelurl>
            </item>
            <item name= "form_process_date">
              <description>Roll out a single date element.</description>
              <signature>form_process_date($element)</signature>
              <docrelurl>form_process_date/7</docrelurl>
            </item>
            <item name= "form_process_fieldset">
              <description>Adds fieldsets to the specified group or adds group members to this fieldset.</description>
              <signature>form_process_fieldset(&amp;$element, &amp;$form_state)</signature>
              <docrelurl>form_process_fieldset/7</docrelurl>
            </item>
            <item name= "form_process_password_confirm">
              <description>Expand a password_confirm field into two text boxes.</description>
              <signature>form_process_password_confirm($element)</signature>
              <docrelurl>form_process_password_confirm/7</docrelurl>
            </item>
            <item name= "form_process_radios">
              <description>Roll out a single radios element to a list of radios, using the options array as index.</description>
              <signature>form_process_radios($element)</signature>
              <docrelurl>form_process_radios/7</docrelurl>
            </item>
            <item name= "form_process_tableselect">
              <description>Create the correct amount of checkbox or radio elements to populate the table.</description>
              <signature>form_process_tableselect($element)</signature>
              <docrelurl>form_process_tableselect/7</docrelurl>
            </item>
            <item name= "form_process_vertical_tabs">
              <description>Creates a group formatted as vertical tabs.</description>
              <signature>form_process_vertical_tabs($element, &amp;$form_state)</signature>
              <docrelurl>form_process_vertical_tabs/7</docrelurl>
            </item>
            <item name= "form_process_weight">
              <description>Expand weight elements into selects.</description>
              <signature>form_process_weight($element)</signature>
              <docrelurl>form_process_weight/7</docrelurl>
            </item>
            <item name= "form_select_options">
              <description>Convert a select form element's options array into an HTML.</description>
              <signature>form_select_options($element, $choices = NULL)</signature>
              <docrelurl>form_select_options/7</docrelurl>
            </item>
            <item name= "form_set_cache">
              <description>Store a form in the cache.</description>
              <signature>form_set_cache($form_build_id, $form, $form_state)</signature>
              <docrelurl>form_set_cache/7</docrelurl>
            </item>
            <item name= "form_set_error">
              <description>Files an error against a form element. When a validation error is detected, the validator calls form_set_error() to indicate which element needs to be changed and provide an error message. This causes the Form API to not execute the form submit handlers, and instead to re-display the form to the user with the corresponding elements rendered with an 'error' CSS class (shown as red by default).</description>
              <signature>form_set_error($name = NULL, $message = '', $limit_validation_errors = NULL)</signature>
              <docrelurl>form_set_error/7</docrelurl>
            </item>
            <item name= "form_set_value">
              <description>Change submitted form values during form validation. Use this function to change the submitted value of a form element in a form validation function, so that the changed value persists in $form_state through to the submission handlers.</description>
              <signature>form_set_value($element, $value, &amp;$form_state)</signature>
              <docrelurl>form_set_value/7</docrelurl>
            </item>
            <item name= "form_state_defaults">
              <description>Retrieve default values for the $form_state array.</description>
              <signature>form_state_defaults()</signature>
              <docrelurl>form_state_defaults/7</docrelurl>
            </item>
            <item name= "form_state_keys_no_cache">
              <description>Returns an array of $form_state keys that shouldn't be cached.</description>
              <signature>form_state_keys_no_cache()</signature>
              <docrelurl>form_state_keys_no_cache/7</docrelurl>
            </item>
            <item name= "form_state_values_clean">
              <description>Removes internal Form API elements and buttons from submitted form values. This function can be used when a module wants to store all submitted form values, for example, by serializing them into a single database column. In such cases, all internal Form API values and all form button elements should not be contained, and this function allows to remove them before the module proceeds to storage. Next to button elements, the following internal values are removed:</description>
              <signature>form_state_values_clean(&amp;$form_state)</signature>
              <docrelurl>form_state_values_clean/7</docrelurl>
            </item>
            <item name= "form_storage_test_form_continue_submit">
              <description>Form submit handler to continue multi-step form.</description>
              <signature>form_storage_test_form_continue_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_storage_test_form_continue_submit/7</docrelurl>
            </item>
            <item name= "form_storage_test_form_continue_validate">
              <description>Form validation handler, which doesn't preserve the values but rebuilds the form. We cannot use a submit handler here, as buttons of type button don't submit the form.</description>
              <signature>form_storage_test_form_continue_validate($form, &amp;$form_state)</signature>
              <docrelurl>form_storage_test_form_continue_validate/7</docrelurl>
            </item>
            <item name= "form_test_alter_form">
              <description>Form builder for testing hook_form_alter() and hook_form_FORM_ID_alter().</description>
              <signature>form_test_alter_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_alter_form/7</docrelurl>
            </item>
            <item name= "form_test_clicked_button">
              <description>Form builder to test button click detection.</description>
              <signature>form_test_clicked_button($form, &amp;$form_state)</signature>
              <docrelurl>form_test_clicked_button/7</docrelurl>
            </item>
            <item name= "form_test_clicked_button_submit">
              <description>Form submit handler for the form_test_clicked_button() form.</description>
              <signature>form_test_clicked_button_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_clicked_button_submit/7</docrelurl>
            </item>
            <item name= "form_test_clicked_button_validate">
              <description>Form validation handler for the form_test_clicked_button() form.</description>
              <signature>form_test_clicked_button_validate($form, &amp;$form_state)</signature>
              <docrelurl>form_test_clicked_button_validate/7</docrelurl>
            </item>
            <item name= "form_test_element_validate_name">
              <description>Form element validation handler for 'name' in form_test_validate_form().</description>
              <signature>form_test_element_validate_name(&amp;$element, &amp;$form_state)</signature>
              <docrelurl>form_test_element_validate_name/7</docrelurl>
            </item>
            <item name= "form_test_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>form_test_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>form_test_form_alter/7</docrelurl>
            </item>
            <item name= "form_test_form_form_test_alter_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>form_test_form_form_test_alter_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_form_test_alter_form_alter/7</docrelurl>
            </item>
            <item name= "form_test_form_form_test_state_persist_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>form_test_form_form_test_state_persist_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_form_test_state_persist_alter/7</docrelurl>
            </item>
            <item name= "form_test_form_rebuild_preserve_values_form">
              <description>Form builder for testing preservation of values during a rebuild.</description>
              <signature>form_test_form_rebuild_preserve_values_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_rebuild_preserve_values_form/7</docrelurl>
            </item>
            <item name= "form_test_form_rebuild_preserve_values_form_add_more">
              <description>Button submit handler for form_test_form_rebuild_preserve_values_form().</description>
              <signature>form_test_form_rebuild_preserve_values_form_add_more($form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_rebuild_preserve_values_form_add_more/7</docrelurl>
            </item>
            <item name= "form_test_form_rebuild_preserve_values_form_submit">
              <description>Form submit handler for form_test_form_rebuild_preserve_values_form().</description>
              <signature>form_test_form_rebuild_preserve_values_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_rebuild_preserve_values_form_submit/7</docrelurl>
            </item>
            <item name= "form_test_form_state_values_clean_form">
              <description>Form builder for form_state_values_clean() test.</description>
              <signature>form_test_form_state_values_clean_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_state_values_clean_form/7</docrelurl>
            </item>
            <item name= "form_test_form_state_values_clean_form_submit">
              <description>Form submit handler for form_state_values_clean() test form.</description>
              <signature>form_test_form_state_values_clean_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_state_values_clean_form_submit/7</docrelurl>
            </item>
            <item name= "form_test_form_user_register_form_alter">
              <description>Implements hook_form_FORM_ID_alter() for the registration form.</description>
              <signature>form_test_form_user_register_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>form_test_form_user_register_form_alter/7</docrelurl>
            </item>
            <item name= "form_test_limit_validation_errors_element_validate_test">
              <description>Form element validation handler for the 'test' element.</description>
              <signature>form_test_limit_validation_errors_element_validate_test(&amp;$element, &amp;$form_state)</signature>
              <docrelurl>form_test_limit_validation_errors_element_validate_test/7</docrelurl>
            </item>
            <item name= "form_test_limit_validation_errors_form">
              <description>Builds a simple form with a button triggering partial validation.</description>
              <signature>form_test_limit_validation_errors_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_limit_validation_errors_form/7</docrelurl>
            </item>
            <item name= "form_test_menu">
              <description>Implements hook_menu().</description>
              <signature>form_test_menu()</signature>
              <docrelurl>form_test_menu/7</docrelurl>
            </item>
            <item name= "form_test_programmatic_form">
              <description>Form builder to test programmatic form submissions.</description>
              <signature>form_test_programmatic_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_programmatic_form/7</docrelurl>
            </item>
            <item name= "form_test_programmatic_form_submit">
              <description>Form submit handler for programmatic form submissions. To test that the submission handler is correctly executed, we store the submitted value in a place we can access from the caller context.</description>
              <signature>form_test_programmatic_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_programmatic_form_submit/7</docrelurl>
            </item>
            <item name= "form_test_programmatic_form_validate">
              <description>Form validation handler for programmatic form submissions. To test that the validation handler is correctly executed, the field value is explicitly required here.</description>
              <signature>form_test_programmatic_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>form_test_programmatic_form_validate/7</docrelurl>
            </item>
            <item name= "form_test_state_persist">
              <description>Form constructor for testing form state persistence.</description>
              <signature>form_test_state_persist($form, &amp;$form_state)</signature>
              <docrelurl>form_test_state_persist/7</docrelurl>
            </item>
            <item name= "form_test_state_persist_submit">
              <description>Submit handler.</description>
              <signature>form_test_state_persist_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_state_persist_submit/7</docrelurl>
            </item>
            <item name= "form_test_storage_element_validate_value_cached">
              <description>Form element validation handler for 'value' element in form_test_storage_form(). Tests updating of cached form storage during validation.</description>
              <signature>form_test_storage_element_validate_value_cached($element, &amp;$form_state)</signature>
              <docrelurl>form_test_storage_element_validate_value_cached/7</docrelurl>
            </item>
            <item name= "form_test_storage_form">
              <description>A multistep form for testing the form storage. It uses two steps for editing a virtual "thing". Any changes to it are saved in the form storage and have to be present during any step. By setting the request parameter "cache" the form can be tested with caching enabled, as it would be the case, if the form would contain some #ajax callbacks.</description>
              <signature>form_test_storage_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_storage_form/7</docrelurl>
            </item>
            <item name= "form_test_storage_form_submit">
              <description>Form submit handler to finish multi-step form.</description>
              <signature>form_test_storage_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>form_test_storage_form_submit/7</docrelurl>
            </item>
            <item name= "form_test_two_instances">
              <description>Menu callback that returns two instances of the node form.</description>
              <signature>form_test_two_instances()</signature>
              <docrelurl>form_test_two_instances/7</docrelurl>
            </item>
            <item name= "form_test_user_register_form_rebuild">
              <description>Submit callback that just lets the form rebuild.</description>
              <signature>form_test_user_register_form_rebuild($form, &amp;$form_state)</signature>
              <docrelurl>form_test_user_register_form_rebuild/7</docrelurl>
            </item>
            <item name= "form_test_validate_form">
              <description>Form builder for testing drupal_validate_form(). Serves for testing form processing and alterations by form validation handlers, especially for the case of a validation error:</description>
              <signature>form_test_validate_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_validate_form/7</docrelurl>
            </item>
            <item name= "form_test_validate_form_validate">
              <description>Form validation handler for form_test_validate_form().</description>
              <signature>form_test_validate_form_validate(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>form_test_validate_form_validate/7</docrelurl>
            </item>
            <item name= "form_test_wrapper_callback">
              <description>Menu callback; Invokes a form builder function with a wrapper callback.</description>
              <signature>form_test_wrapper_callback($form_id)</signature>
              <docrelurl>form_test_wrapper_callback/7</docrelurl>
            </item>
            <item name= "form_test_wrapper_callback_form">
              <description>Form builder for form wrapper callback test.</description>
              <signature>form_test_wrapper_callback_form($form, &amp;$form_state)</signature>
              <docrelurl>form_test_wrapper_callback_form/7</docrelurl>
            </item>
            <item name= "form_test_wrapper_callback_wrapper">
              <description>Form wrapper for form_test_wrapper_callback_form().</description>
              <signature>form_test_wrapper_callback_wrapper($form, &amp;$form_state)</signature>
              <docrelurl>form_test_wrapper_callback_wrapper/7</docrelurl>
            </item>
            <item name= "form_type_checkboxes_value">
              <description>Helper function to determine the value for a checkboxes form element.</description>
              <signature>form_type_checkboxes_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_checkboxes_value/7</docrelurl>
            </item>
            <item name= "form_type_checkbox_value">
              <description>Helper function to determine the value for a checkbox form element.</description>
              <signature>form_type_checkbox_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_checkbox_value/7</docrelurl>
            </item>
            <item name= "form_type_image_button_value">
              <description>Helper function to determine the value for an image button form element.</description>
              <signature>form_type_image_button_value($form, $input, $form_state)</signature>
              <docrelurl>form_type_image_button_value/7</docrelurl>
            </item>
            <item name= "form_type_password_confirm_value">
              <description>Helper function to determine the value for a password_confirm form element.</description>
              <signature>form_type_password_confirm_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_password_confirm_value/7</docrelurl>
            </item>
            <item name= "form_type_select_value">
              <description>Helper function to determine the value for a select form element.</description>
              <signature>form_type_select_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_select_value/7</docrelurl>
            </item>
            <item name= "form_type_textfield_value">
              <description>Helper function to determine the value for a textfield form element.</description>
              <signature>form_type_textfield_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_textfield_value/7</docrelurl>
            </item>
            <item name= "form_type_token_value">
              <description>Helper function to determine the value for form's token value.</description>
              <signature>form_type_token_value($element, $input = FALSE)</signature>
              <docrelurl>form_type_token_value/7</docrelurl>
            </item>
            <item name= "forum_admin_settings">
              <description>Form builder for the forum settings page.</description>
              <signature>forum_admin_settings($form)</signature>
              <docrelurl>forum_admin_settings/7</docrelurl>
            </item>
            <item name= "forum_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>forum_block_configure($delta = '')</signature>
              <docrelurl>forum_block_configure/7</docrelurl>
            </item>
            <item name= "forum_block_info">
              <description>Implements hook_block_info().</description>
              <signature>forum_block_info()</signature>
              <docrelurl>forum_block_info/7</docrelurl>
            </item>
            <item name= "forum_block_save">
              <description>Implements hook_block_save().</description>
              <signature>forum_block_save($delta = '', $edit = array())</signature>
              <docrelurl>forum_block_save/7</docrelurl>
            </item>
            <item name= "forum_block_view">
              <description>Implements hook_block_view(). Generates a block containing the currently active forum topics and the most recently added forum topics.</description>
              <signature>forum_block_view($delta = '')</signature>
              <docrelurl>forum_block_view/7</docrelurl>
            </item>
            <item name= "forum_block_view_pre_render">
              <description>A #pre_render callback. Lists nodes based on the element's #query property.  *</description>
              <signature>forum_block_view_pre_render($elements)</signature>
              <docrelurl>forum_block_view_pre_render/7</docrelurl>
            </item>
            <item name= "forum_comment_delete">
              <description>Implements hook_comment_delete().</description>
              <signature>forum_comment_delete($comment)</signature>
              <docrelurl>forum_comment_delete/7</docrelurl>
            </item>
            <item name= "forum_comment_publish">
              <description>Implements hook_comment_publish(). This actually handles the insert and update of published nodes since comment_save() calls hook_comment_publish() for all published comments.</description>
              <signature>forum_comment_publish($comment)</signature>
              <docrelurl>forum_comment_publish/7</docrelurl>
            </item>
            <item name= "forum_comment_unpublish">
              <description>Implements hook_comment_unpublish().</description>
              <signature>forum_comment_unpublish($comment)</signature>
              <docrelurl>forum_comment_unpublish/7</docrelurl>
            </item>
            <item name= "forum_comment_update">
              <description>Implements hook_comment_update(). Comment module doesn't call hook_comment_unpublish() when saving individual comments so we need to check for those here.</description>
              <signature>forum_comment_update($comment)</signature>
              <docrelurl>forum_comment_update/7</docrelurl>
            </item>
            <item name= "forum_confirm_delete">
              <description>Returns a confirmation page for deleting a forum taxonomy term.</description>
              <signature>forum_confirm_delete($form, &amp;$form_state, $tid)</signature>
              <docrelurl>forum_confirm_delete/7</docrelurl>
            </item>
            <item name= "forum_confirm_delete_submit">
              <description>Implement forms api _submit call. Deletes a forum after confirmation.</description>
              <signature>forum_confirm_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>forum_confirm_delete_submit/7</docrelurl>
            </item>
            <item name= "forum_enable">
              <description>Implements hook_enable().</description>
              <signature>forum_enable()</signature>
              <docrelurl>forum_enable/7</docrelurl>
            </item>
            <item name= "forum_entity_info_alter">
              <description>Implements hook_entity_info_alter().</description>
              <signature>forum_entity_info_alter(&amp;$info)</signature>
              <docrelurl>forum_entity_info_alter/7</docrelurl>
            </item>
            <item name= "forum_field_storage_pre_insert">
              <description>Implements hook_field_storage_pre_insert().</description>
              <signature>forum_field_storage_pre_insert($entity_type, $entity, &amp;$skip_fields)</signature>
              <docrelurl>forum_field_storage_pre_insert/7</docrelurl>
            </item>
            <item name= "forum_field_storage_pre_update">
              <description>Implements hook_field_storage_pre_update().</description>
              <signature>forum_field_storage_pre_update($entity_type, $entity, &amp;$skip_fields)</signature>
              <docrelurl>forum_field_storage_pre_update/7</docrelurl>
            </item>
            <item name= "forum_form">
              <description>Implements hook_form().</description>
              <signature>forum_form($node, $form_state)</signature>
              <docrelurl>forum_form/7</docrelurl>
            </item>
            <item name= "forum_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>forum_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>forum_form_alter/7</docrelurl>
            </item>
            <item name= "forum_form_container">
              <description>Returns a form for adding a container to the forum vocabulary</description>
              <signature>forum_form_container($form, &amp;$form_state, $edit = array())</signature>
              <docrelurl>forum_form_container/7</docrelurl>
            </item>
            <item name= "forum_form_forum">
              <description>Returns a form for adding a forum to the forum vocabulary</description>
              <signature>forum_form_forum($form, &amp;$form_state, $edit = array())</signature>
              <docrelurl>forum_form_forum/7</docrelurl>
            </item>
            <item name= "forum_form_main">
              <description>@file Administrative page callbacks for the forum module.</description>
              <signature>forum_form_main($type, $edit = array())</signature>
              <docrelurl>forum_form_main/7</docrelurl>
            </item>
            <item name= "forum_form_submit">
              <description>Process forum form and container form submissions.</description>
              <signature>forum_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>forum_form_submit/7</docrelurl>
            </item>
            <item name= "forum_forum_load">
              <description>Returns a tree of all forums for a given taxonomy term ID.</description>
              <signature>forum_forum_load($tid = NULL)</signature>
              <docrelurl>forum_forum_load/7</docrelurl>
            </item>
            <item name= "forum_get_topics">
              <description>
                ▸ 1 function calls forum_get_topics()
                ▾ 1 function calls forum_get_topics()
                forum_page in modules/forum/forum.pages.inc
                Menu callback; prints a forum listing.
              </description>
              <signature>forum_get_topics($tid, $sortby, $forum_per_page)</signature>
              <docrelurl>forum_get_topics/7</docrelurl>
            </item>
            <item name= "forum_help">
              <description>Implements hook_help().</description>
              <signature>forum_help($path, $arg)</signature>
              <docrelurl>forum_help/7</docrelurl>
            </item>
            <item name= "forum_init">
              <description>Implements hook_init().</description>
              <signature>forum_init()</signature>
              <docrelurl>forum_init/7</docrelurl>
            </item>
            <item name= "forum_install">
              <description>Implements hook_install().</description>
              <signature>forum_install()</signature>
              <docrelurl>forum_install/7</docrelurl>
            </item>
            <item name= "forum_menu">
              <description>Implements hook_menu().</description>
              <signature>forum_menu()</signature>
              <docrelurl>forum_menu/7</docrelurl>
            </item>
            <item name= "forum_menu_local_tasks_alter">
              <description>Implements hook_menu_local_tasks_alter().</description>
              <signature>forum_menu_local_tasks_alter(&amp;$data, $router_item, $root_path)</signature>
              <docrelurl>forum_menu_local_tasks_alter/7</docrelurl>
            </item>
            <item name= "forum_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>forum_node_delete($node)</signature>
              <docrelurl>forum_node_delete/7</docrelurl>
            </item>
            <item name= "forum_node_info">
              <description>Implements hook_node_info().</description>
              <signature>forum_node_info()</signature>
              <docrelurl>forum_node_info/7</docrelurl>
            </item>
            <item name= "forum_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>forum_node_insert($node)</signature>
              <docrelurl>forum_node_insert/7</docrelurl>
            </item>
            <item name= "forum_node_load">
              <description>Implements hook_node_load().</description>
              <signature>forum_node_load($nodes)</signature>
              <docrelurl>forum_node_load/7</docrelurl>
            </item>
            <item name= "forum_node_presave">
              <description>Implements hook_node_presave(). Assign forum taxonomy when adding a topic from within a forum.</description>
              <signature>forum_node_presave($node)</signature>
              <docrelurl>forum_node_presave/7</docrelurl>
            </item>
            <item name= "forum_node_update">
              <description>Implements hook_node_update().</description>
              <signature>forum_node_update($node)</signature>
              <docrelurl>forum_node_update/7</docrelurl>
            </item>
            <item name= "forum_node_validate">
              <description>Implements hook_node_validate(). Check in particular that only a "leaf" term in the associated taxonomy.</description>
              <signature>forum_node_validate($node, $form)</signature>
              <docrelurl>forum_node_validate/7</docrelurl>
            </item>
            <item name= "forum_node_view">
              <description>Implements hook_node_view().</description>
              <signature>forum_node_view($node, $view_mode)</signature>
              <docrelurl>forum_node_view/7</docrelurl>
            </item>
            <item name= "forum_overview">
              <description>Returns an overview list of existing forums and containers</description>
              <signature>forum_overview($form, &amp;$form_state)</signature>
              <docrelurl>forum_overview/7</docrelurl>
            </item>
            <item name= "forum_page">
              <description>Menu callback; prints a forum listing.</description>
              <signature>forum_page($forum_term = NULL)</signature>
              <docrelurl>forum_page/7</docrelurl>
            </item>
            <item name= "forum_permission">
              <description>Implements hook_permission().</description>
              <signature>forum_permission()</signature>
              <docrelurl>forum_permission/7</docrelurl>
            </item>
            <item name= "forum_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>forum_rdf_mapping()</signature>
              <docrelurl>forum_rdf_mapping/7</docrelurl>
            </item>
            <item name= "forum_schema">
              <description>Implements hook_schema().</description>
              <signature>forum_schema()</signature>
              <docrelurl>forum_schema/7</docrelurl>
            </item>
            <item name= "forum_taxonomy_term_delete">
              <description>Implements hook_taxonomy_term_delete().</description>
              <signature>forum_taxonomy_term_delete($tid)</signature>
              <docrelurl>forum_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "forum_theme">
              <description>Implements hook_theme().</description>
              <signature>forum_theme()</signature>
              <docrelurl>forum_theme/7</docrelurl>
            </item>
            <item name= "forum_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>forum_uninstall()</signature>
              <docrelurl>forum_uninstall/7</docrelurl>
            </item>
            <item name= "forum_update_7000">
              <description>Add new index to forum table.</description>
              <signature>forum_update_7000()</signature>
              <docrelurl>forum_update_7000/7</docrelurl>
            </item>
            <item name= "forum_update_7001">
              <description>Create new {forum_index} table.</description>
              <signature>forum_update_7001()</signature>
              <docrelurl>forum_update_7001/7</docrelurl>
            </item>
            <item name= "forum_uri">
              <description>Entity URI callback.</description>
              <signature>forum_uri($forum)</signature>
              <docrelurl>forum_uri/7</docrelurl>
            </item>
            <item name= "garland_breadcrumb">
              <description>Return a themed breadcrumb trail.</description>
              <signature>garland_breadcrumb($variables)</signature>
              <docrelurl>garland_breadcrumb/7</docrelurl>
            </item>
            <item name= "garland_drupal_alter_alter">
              <description>Implements hook_TYPE_alter() on behalf of Garland theme. Same as common_test_drupal_alter_alter(), but here, we verify that themes can also alter and come last.</description>
              <signature>garland_drupal_alter_alter(&amp;$data, &amp;$arg2 = NULL, &amp;$arg3 = NULL)</signature>
              <docrelurl>garland_drupal_alter_alter/7</docrelurl>
            </item>
            <item name= "garland_form_system_theme_settings_alter">
              <description>Implements hook_form_system_theme_settings_alter().</description>
              <signature>garland_form_system_theme_settings_alter(&amp;$form, $form_state)</signature>
              <docrelurl>garland_form_system_theme_settings_alter/7</docrelurl>
            </item>
            <item name= "garland_menu_local_tasks">
              <description>Returns the rendered local tasks. The default implementation renders them as tabs. Overridden to split the secondary tasks.</description>
              <signature>garland_menu_local_tasks()</signature>
              <docrelurl>garland_menu_local_tasks/7</docrelurl>
            </item>
            <item name= "garland_preprocess_html">
              <description>Override or insert variables into the html template.</description>
              <signature>garland_preprocess_html(&amp;$vars)</signature>
              <docrelurl>garland_preprocess_html/7</docrelurl>
            </item>
            <item name= "garland_preprocess_maintenance_page">
              <description>Override or insert variables into the maintenance page template.</description>
              <signature>garland_preprocess_maintenance_page(&amp;$vars)</signature>
              <docrelurl>garland_preprocess_maintenance_page/7</docrelurl>
            </item>
            <item name= "garland_preprocess_page">
              <description>Override or insert variables into the page template.</description>
              <signature>garland_preprocess_page(&amp;$vars)</signature>
              <docrelurl>garland_preprocess_page/7</docrelurl>
            </item>
            <item name= "garland_preprocess_region">
              <description>Override or insert variables into the region template.</description>
              <signature>garland_preprocess_region(&amp;$vars)</signature>
              <docrelurl>garland_preprocess_region/7</docrelurl>
            </item>
            <item name= "garland_process_html">
              <description>Override or insert variables into the html template.</description>
              <signature>garland_process_html(&amp;$vars)</signature>
              <docrelurl>garland_process_html/7</docrelurl>
            </item>
            <item name= "garland_process_page">
              <description>Override or insert variables into the page template.</description>
              <signature>garland_process_page(&amp;$vars)</signature>
              <docrelurl>garland_process_page/7</docrelurl>
            </item>
            <item name= "get_t">
              <description>Return the name of the localization function. Use in code that needs to run both during installation and normal operation.</description>
              <signature>get_t()</signature>
              <docrelurl>get_t/7</docrelurl>
            </item>
            <item name= "help_help">
              <description>Implements hook_help().</description>
              <signature>help_help($path, $arg)</signature>
              <docrelurl>help_help/7</docrelurl>
            </item>
            <item name= "help_links_as_list">
              <description>
                ▸ 1 function calls help_links_as_list()
                ▾ 1 function calls help_links_as_list()
                help_main in modules/help/help.admin.inc
                Menu callback; prints a page listing a glossary of Drupal terminology.
              </description>
              <signature>help_links_as_list()</signature>
              <docrelurl>help_links_as_list/7</docrelurl>
            </item>
            <item name= "help_main">
              <description>Menu callback; prints a page listing a glossary of Drupal terminology.</description>
              <signature>help_main()</signature>
              <docrelurl>help_main/7</docrelurl>
            </item>
            <item name= "help_menu">
              <description>Implements hook_menu().</description>
              <signature>help_menu()</signature>
              <docrelurl>help_menu/7</docrelurl>
            </item>
            <item name= "help_page">
              <description>Menu callback; prints a page listing general help for a module.</description>
              <signature>help_page($name)</signature>
              <docrelurl>help_page/7</docrelurl>
            </item>
            <item name= "hide">
              <description>Hide an element from later rendering.</description>
              <signature>hide(&amp;$element)</signature>
              <docrelurl>hide/7</docrelurl>
            </item>
            <item name= "hook_actions_delete">
              <description>Executes code after an action is deleted.</description>
              <signature>hook_actions_delete($aid)</signature>
              <docrelurl>hook_actions_delete/7</docrelurl>
            </item>
            <item name= "hook_action_info">
              <description>Declares information about actions. Any module can define actions, and then call actions_do() to make those actions happen in response to events. The trigger module provides a user interface for associating actions with module-defined triggers, and it makes sure the core triggers fire off actions when their events happen.</description>
              <signature>hook_action_info()</signature>
              <docrelurl>hook_action_info/7</docrelurl>
            </item>
            <item name= "hook_action_info_alter">
              <description>Alters the actions declared by another module. Called by actions_list() to allow modules to alter the return values from implementations of hook_action_info().</description>
              <signature>hook_action_info_alter(&amp;$actions)</signature>
              <docrelurl>hook_action_info_alter/7</docrelurl>
            </item>
            <item name= "hook_admin_paths">
              <description>Define administrative paths. Modules may specify whether or not the paths they define in hook_menu() are to be considered administrative. Other modules may use this information to display those pages differently (e.g. in a modal overlay, or in a different theme).</description>
              <signature>hook_admin_paths()</signature>
              <docrelurl>hook_admin_paths/7</docrelurl>
            </item>
            <item name= "hook_admin_paths_alter">
              <description>Redefine administrative paths defined by other modules.</description>
              <signature>hook_admin_paths_alter(&amp;$paths)</signature>
              <docrelurl>hook_admin_paths_alter/7</docrelurl>
            </item>
            <item name= "hook_aggregator_fetch">
              <description>Implement this hook to create an alternative fetcher for aggregator module. A fetcher downloads feed data to a Drupal site. The fetcher is called at the first of the three aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</description>
              <signature>hook_aggregator_fetch($feed)</signature>
              <docrelurl>hook_aggregator_fetch/7</docrelurl>
            </item>
            <item name= "hook_aggregator_fetch_info">
              <description>Implement this hook to expose the title and a short description of your fetcher. The title and the description provided are shown on admin/config/services/aggregator among other places. Use as title the human readable name of the fetcher and as description a brief (40 to 80 characters) explanation of the fetcher's functionality.</description>
              <signature>hook_aggregator_fetch_info()</signature>
              <docrelurl>hook_aggregator_fetch_info/7</docrelurl>
            </item>
            <item name= "hook_aggregator_parse">
              <description>Implement this hook to create an alternative parser for aggregator module. A parser converts feed item data to a common format. The parser is called at the second of the three aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</description>
              <signature>hook_aggregator_parse($feed)</signature>
              <docrelurl>hook_aggregator_parse/7</docrelurl>
            </item>
            <item name= "hook_aggregator_parse_info">
              <description>Implement this hook to expose the title and a short description of your parser. The title and the description provided are shown on admin/config/services/aggregator among other places. Use as title the human readable name of the parser and as description a brief (40 to 80 characters) explanation of the parser's functionality.</description>
              <signature>hook_aggregator_parse_info()</signature>
              <docrelurl>hook_aggregator_parse_info/7</docrelurl>
            </item>
            <item name= "hook_aggregator_process">
              <description>Implement this hook to create a processor for aggregator module. A processor acts on parsed feed data. Active processors are called at the third and last of the aggregation stages: data is downloaded by the active fetcher, it is converted to a common format by the active parser and finally, it is passed to all active processors which manipulate or store the data.</description>
              <signature>hook_aggregator_process($feed)</signature>
              <docrelurl>hook_aggregator_process/7</docrelurl>
            </item>
            <item name= "hook_aggregator_process_info">
              <description>Implement this hook to expose the title and a short description of your processor. The title and the description provided are shown most importantly on admin/config/services/aggregator. Use as title the natural name of the processor and as description a brief (40 to 80 characters) explanation of the functionality.</description>
              <signature>hook_aggregator_process_info($feed)</signature>
              <docrelurl>hook_aggregator_process_info/7</docrelurl>
            </item>
            <item name= "hook_aggregator_remove">
              <description>Implement this hook to remove stored data if a feed is being deleted or a feed's items are being removed. Aggregator calls this hook if either a feed is deleted or a user clicks on "remove items".</description>
              <signature>hook_aggregator_remove($feed)</signature>
              <docrelurl>hook_aggregator_remove/7</docrelurl>
            </item>
            <item name= "hook_ajax_render_alter">
              <description>Alter the commands that are sent to the user through the AJAX framework.</description>
              <signature>hook_ajax_render_alter($commands)</signature>
              <docrelurl>hook_ajax_render_alter/7</docrelurl>
            </item>
            <item name= "hook_archiver_info">
              <description>Declare archivers to the system. An archiver is a class that is able to package and unpackage one or more files into a single possibly compressed file. Common examples of such files are zip files and tar.gz files. All archiver classes must implement ArchiverInterface.</description>
              <signature>hook_archiver_info()</signature>
              <docrelurl>hook_archiver_info/7</docrelurl>
            </item>
            <item name= "hook_archiver_info_alter">
              <description>Alter archiver information declared by other modules. See hook_archiver_info() for a description of archivers and the archiver information structure.</description>
              <signature>hook_archiver_info_alter(&amp;$info)</signature>
              <docrelurl>hook_archiver_info_alter/7</docrelurl>
            </item>
            <item name= "hook_batch_alter">
              <description>Alter batch information before a batch is processed. Called by batch_process() to allow modules to alter a batch before it is processed.</description>
              <signature>hook_batch_alter(&amp;$batch)</signature>
              <docrelurl>hook_batch_alter/7</docrelurl>
            </item>
            <item name= "hook_block_configure">
              <description>Configuration form for the block.</description>
              <signature>hook_block_configure($delta = '')</signature>
              <docrelurl>hook_block_configure/7</docrelurl>
            </item>
            <item name= "hook_block_info">
              <description>Define all blocks provided by the module. Any module can export a block (or blocks) to be displayed by defining the _block hook. This hook is called by theme.inc to display a block, and also by block.module to procure the list of available blocks.</description>
              <signature>hook_block_info()</signature>
              <docrelurl>hook_block_info/7</docrelurl>
            </item>
            <item name= "hook_block_info_alter">
              <description>Change block definition before saving to the database.</description>
              <signature>hook_block_info_alter(&amp;$blocks, $theme, $code_blocks)</signature>
              <docrelurl>hook_block_info_alter/7</docrelurl>
            </item>
            <item name= "hook_block_list_alter">
              <description>Act on blocks prior to rendering. This hook allows you to add, remove or modify blocks in the block list. The block list contains the block definitions not the rendered blocks. The blocks are rendered after the modules have had a chance to manipulate the block list. Alternatively you can set $block->content here, which will override the content of the block and prevent hook_block_view() from running.</description>
              <signature>hook_block_list_alter(&amp;$blocks)</signature>
              <docrelurl>hook_block_list_alter/7</docrelurl>
            </item>
            <item name= "hook_block_save">
              <description>Save the configuration options.</description>
              <signature>hook_block_save($delta = '', $edit = array())</signature>
              <docrelurl>hook_block_save/7</docrelurl>
            </item>
            <item name= "hook_block_view">
              <description>Process the block when enabled in a region in order to view its contents.</description>
              <signature>hook_block_view($delta = '')</signature>
              <docrelurl>hook_block_view/7</docrelurl>
            </item>
            <item name= "hook_block_view_alter">
              <description>Perform alterations to the content of a block. This hook allows you to modify any data returned by hook_block_view().</description>
              <signature>hook_block_view_alter(&amp;$data, $block)</signature>
              <docrelurl>hook_block_view_alter/7</docrelurl>
            </item>
            <item name= "hook_block_view_MODULE_DELTA_alter">
              <description>Perform alterations to a specific block. Modules can implement hook_block_view_MODULE_DELTA_alter() to modify a specific block, rather than implementing hook_block_view_alter().</description>
              <signature>hook_block_view_MODULE_DELTA_alter(&amp;$data, $block)</signature>
              <docrelurl>hook_block_view_MODULE_DELTA_alter/7</docrelurl>
            </item>
            <item name= "hook_boot">
              <description>Perform setup tasks. See also, hook_init. This hook is run at the beginning of the page request. It is typically used to set up global parameters which are needed later in the request.</description>
              <signature>hook_boot()</signature>
              <docrelurl>hook_boot/7</docrelurl>
            </item>
            <item name= "hook_comment_delete">
              <description>The comment is being deleted by the moderator.</description>
              <signature>hook_comment_delete($comment)</signature>
              <docrelurl>hook_comment_delete/7</docrelurl>
            </item>
            <item name= "hook_comment_insert">
              <description>The comment is being inserted.</description>
              <signature>hook_comment_insert($comment)</signature>
              <docrelurl>hook_comment_insert/7</docrelurl>
            </item>
            <item name= "hook_comment_load">
              <description>Comments are being loaded from the database.</description>
              <signature>hook_comment_load($comments)</signature>
              <docrelurl>hook_comment_load/7</docrelurl>
            </item>
            <item name= "hook_comment_presave">
              <description>The comment passed validation and is about to be saved. Modules may make changes to the comment before it is saved to the database.</description>
              <signature>hook_comment_presave($comment)</signature>
              <docrelurl>hook_comment_presave/7</docrelurl>
            </item>
            <item name= "hook_comment_publish">
              <description>The comment is being published by the moderator.</description>
              <signature>hook_comment_publish($comment)</signature>
              <docrelurl>hook_comment_publish/7</docrelurl>
            </item>
            <item name= "hook_comment_unpublish">
              <description>The comment is being unpublished by the moderator.</description>
              <signature>hook_comment_unpublish($comment)</signature>
              <docrelurl>hook_comment_unpublish/7</docrelurl>
            </item>
            <item name= "hook_comment_update">
              <description>The comment is being updated.</description>
              <signature>hook_comment_update($comment)</signature>
              <docrelurl>hook_comment_update/7</docrelurl>
            </item>
            <item name= "hook_comment_view">
              <description>The comment is being viewed. This hook can be used to add additional data to the comment before theming.</description>
              <signature>hook_comment_view($comment)</signature>
              <docrelurl>hook_comment_view/7</docrelurl>
            </item>
            <item name= "hook_comment_view_alter">
              <description>The comment was built; the module may modify the structured content. This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete comment content structure has been built.</description>
              <signature>hook_comment_view_alter(&amp;$build)</signature>
              <docrelurl>hook_comment_view_alter/7</docrelurl>
            </item>
            <item name= "hook_countries_alter">
              <description>Alter the default country list.</description>
              <signature>hook_countries_alter(&amp;$countries)</signature>
              <docrelurl>hook_countries_alter/7</docrelurl>
            </item>
            <item name= "hook_cron">
              <description>Perform periodic actions. This hook will only be called if cron.php is run (e.g. by crontab).</description>
              <signature>hook_cron()</signature>
              <docrelurl>hook_cron/7</docrelurl>
            </item>
            <item name= "hook_cron_queue_info">
              <description>Declare queues holding items that need to be run periodically. While there can be only one hook_cron() process running at the same time, there can be any number of processes defined here running. Because of this, long running tasks are much better suited for this API. Items queued in hook_cron() might be processed in the same cron run if there are not many items in the queue, otherwise it might take several requests, which can be run in parallel.</description>
              <signature>hook_cron_queue_info()</signature>
              <docrelurl>hook_cron_queue_info/7</docrelurl>
            </item>
            <item name= "hook_cron_queue_info_alter">
              <description>Alter cron queue information before cron runs. Called by drupal_cron_run() to allow modules to alter cron queue settings before any jobs are processesed.</description>
              <signature>hook_cron_queue_info_alter(&amp;$queues)</signature>
              <docrelurl>hook_cron_queue_info_alter/7</docrelurl>
            </item>
            <item name= "hook_css_alter">
              <description>Alter CSS files before they are output on the page.</description>
              <signature>hook_css_alter(&amp;$css)</signature>
              <docrelurl>hook_css_alter/7</docrelurl>
            </item>
            <item name= "hook_custom_theme">
              <description>Return the machine-readable name of the theme to use for the current page. This hook can be used to dynamically set the theme for the current page request. It overrides the default theme as well as any per-page or per-section theme set by the theme callback function in hook_menu(). This should be used by modules which need to override the theme based on dynamic conditions.</description>
              <signature>hook_custom_theme()</signature>
              <docrelurl>hook_custom_theme/7</docrelurl>
            </item>
            <item name= "hook_dashboard_regions">
              <description>Adds regions to the dashboard.</description>
              <signature>hook_dashboard_regions()</signature>
              <docrelurl>hook_dashboard_regions/7</docrelurl>
            </item>
            <item name= "hook_dashboard_regions_alter">
              <description>Alter dashboard regions provided by modules.</description>
              <signature>hook_dashboard_regions_alter($regions)</signature>
              <docrelurl>hook_dashboard_regions_alter/7</docrelurl>
            </item>
            <item name= "hook_date_formats">
              <description>Defines additional date formats. Next to the 'long', 'medium' and 'short' date types defined in core, any module can define additional types that can be used when displaying dates. A date type is a key which can be passed to format_date() to return a date in the configured displayed format. A date format is a string defining the date and time elements to use. For example, a date type could be 'mymodule_extra_long', while a date format is like 'Y-m-d'.</description>
              <signature>hook_date_formats()</signature>
              <docrelurl>hook_date_formats/7</docrelurl>
            </item>
            <item name= "hook_date_formats_alter">
              <description>Alters date types and formats declared by another module. Called by _system_date_format_types_build() to allow modules to alter the return values from implementations of hook_date_formats().</description>
              <signature>hook_date_formats_alter(&amp;$formats)</signature>
              <docrelurl>hook_date_formats_alter/7</docrelurl>
            </item>
            <item name= "hook_date_format_types">
              <description>Defines additional date types. Next to the 'long', 'medium' and 'short' date types defined in core, any module can define additional types that can be used when displaying dates. A date type is a key which can be passed to format_date() to return a date in the configured display format.</description>
              <signature>hook_date_format_types()</signature>
              <docrelurl>hook_date_format_types/7</docrelurl>
            </item>
            <item name= "hook_date_format_types_alter">
              <description>Modify existing date format types. Allows other modules to modify existing date types like 'long'. Called by _system_date_format_types_build(). For instance, A module may use this hook to apply settings across all date format types, such as locking all date format types so they appear to be provided by the system.</description>
              <signature>hook_date_format_types_alter(&amp;$types)</signature>
              <docrelurl>hook_date_format_types_alter/7</docrelurl>
            </item>
            <item name= "hook_delete">
              <description>Respond to node deletion. This hook is invoked only on the module that defines the node's content type (use hook_node_delete() to respond to all node deletions).</description>
              <signature>hook_delete($node)</signature>
              <docrelurl>hook_delete/7</docrelurl>
            </item>
            <item name= "hook_disable">
              <description>Perform necessary actions before module is disabled. The hook is called everytime module is disabled.</description>
              <signature>hook_disable()</signature>
              <docrelurl>hook_disable/7</docrelurl>
            </item>
            <item name= "hook_drupal_goto_alter">
              <description>Change the page the user is sent to by drupal_goto().</description>
              <signature>hook_drupal_goto_alter(&amp;$path, &amp;$options, &amp;$http_response_code)</signature>
              <docrelurl>hook_drupal_goto_alter/7</docrelurl>
            </item>
            <item name= "hook_element_info">
              <description>Allows modules to declare their own Forms API element types and specify their default values. This hook allows modules to declare their own form element types and to specify their default values. The values returned by this hook will be merged with the elements returned by hook_form() implementations and so can return defaults for any Form APIs keys in addition to those explicitly mentioned below.</description>
              <signature>hook_element_info()</signature>
              <docrelurl>hook_element_info/7</docrelurl>
            </item>
            <item name= "hook_element_info_alter">
              <description>Alter the element type information returned from modules. A module may implement this hook in order to alter the element type defaults defined by a module.</description>
              <signature>hook_element_info_alter(&amp;$type)</signature>
              <docrelurl>hook_element_info_alter/7</docrelurl>
            </item>
            <item name= "hook_enable">
              <description>Perform necessary actions after module is enabled. The hook is called everytime module is enabled.</description>
              <signature>hook_enable()</signature>
              <docrelurl>hook_enable/7</docrelurl>
            </item>
            <item name= "hook_entity_info">
              <description>Inform the base system and the Field API about one or more entity types. Inform the system about one or more entity types (i.e., object types that can be loaded via entity_load() and, optionally, to which fields can be attached).</description>
              <signature>hook_entity_info()</signature>
              <docrelurl>hook_entity_info/7</docrelurl>
            </item>
            <item name= "hook_entity_info_alter">
              <description>Alter the entity info. Modules may implement this hook to alter the information that defines an entity. All properties that are available in hook_entity_info() can be altered here.</description>
              <signature>hook_entity_info_alter(&amp;$entity_info)</signature>
              <docrelurl>hook_entity_info_alter/7</docrelurl>
            </item>
            <item name= "hook_entity_insert">
              <description>Act on entities when inserted. Generic insert hook called for all entity types via entity_invoke().</description>
              <signature>hook_entity_insert($entity, $type)</signature>
              <docrelurl>hook_entity_insert/7</docrelurl>
            </item>
            <item name= "hook_entity_load">
              <description>Act on entities when loaded. This is a generic load hook called for all entity types loaded via the entity API.</description>
              <signature>hook_entity_load($entities, $type)</signature>
              <docrelurl>hook_entity_load/7</docrelurl>
            </item>
            <item name= "hook_entity_prepare_view">
              <description>Act on entities as they are being prepared for view. Allows you to operate on multiple entities as they are being prepared for view. Only use this if attaching the data during the entity_load() phase is not appropriate, for example when attaching other 'entity' style objects.</description>
              <signature>hook_entity_prepare_view($entities, $type)</signature>
              <docrelurl>hook_entity_prepare_view/7</docrelurl>
            </item>
            <item name= "hook_entity_query_alter">
              <description>Alter or execute an EntityFieldQuery.</description>
              <signature>hook_entity_query_alter($query)</signature>
              <docrelurl>hook_entity_query_alter/7</docrelurl>
            </item>
            <item name= "hook_entity_update">
              <description>Act on entities when updated. Generic update hook called for all entity types via entity_invoke().</description>
              <signature>hook_entity_update($entity, $type)</signature>
              <docrelurl>hook_entity_update/7</docrelurl>
            </item>
            <item name= "hook_exit">
              <description>Perform cleanup tasks. This hook is run at the end of each page request. It is often used for page logging and specialized cleanup. This hook MUST NOT print anything.</description>
              <signature>hook_exit($destination = NULL)</signature>
              <docrelurl>hook_exit/7</docrelurl>
            </item>
            <item name= "hook_field_access">
              <description>Determine whether the user has access to a given field. This hook is invoked from field_access() to let modules block access to operations on fields. If no module returns FALSE, the operation is allowed.</description>
              <signature>hook_field_access($op, $field, $entity_type, $entity, $account)</signature>
              <docrelurl>hook_field_access/7</docrelurl>
            </item>
            <item name= "hook_field_attach_create_bundle">
              <description>Act on field_attach_create_bundle(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_create_bundle($entity_type, $bundle)</signature>
              <docrelurl>hook_field_attach_create_bundle/7</docrelurl>
            </item>
            <item name= "hook_field_attach_delete">
              <description>Act on field_attach_delete(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_delete($entity_type, $entity)</signature>
              <docrelurl>hook_field_attach_delete/7</docrelurl>
            </item>
            <item name= "hook_field_attach_delete_bundle">
              <description>Act on field_attach_delete_bundle. This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_delete_bundle($entity_type, $bundle, $instances)</signature>
              <docrelurl>hook_field_attach_delete_bundle/7</docrelurl>
            </item>
            <item name= "hook_field_attach_delete_revision">
              <description>Act on field_attach_delete_revision(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_delete_revision($entity_type, $entity)</signature>
              <docrelurl>hook_field_attach_delete_revision/7</docrelurl>
            </item>
            <item name= "hook_field_attach_form">
              <description>Act on field_attach_form. This hook is invoked after the field module has performed the operation. Implementing modules should alter the $form or $form_state parameters.</description>
              <signature>hook_field_attach_form($entity_type, $entity, &amp;$form, &amp;$form_state, $langcode)</signature>
              <docrelurl>hook_field_attach_form/7</docrelurl>
            </item>
            <item name= "hook_field_attach_insert">
              <description>Act on field_attach_insert(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_insert($entity_type, $entity)</signature>
              <docrelurl>hook_field_attach_insert/7</docrelurl>
            </item>
            <item name= "hook_field_attach_load">
              <description>Act on field_attach_load(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_load($entity_type, &amp;$entities, $age, $options)</signature>
              <docrelurl>hook_field_attach_load/7</docrelurl>
            </item>
            <item name= "hook_field_attach_prepare_translation_alter">
              <description>Perform alterations on field_attach_prepare_translation(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_prepare_translation_alter(&amp;$entity, $context)</signature>
              <docrelurl>hook_field_attach_prepare_translation_alter/7</docrelurl>
            </item>
            <item name= "hook_field_attach_preprocess_alter">
              <description>Alter field_attach_preprocess() variables. This hook is invoked while preprocessing the field.tpl.php template file in field_attach_preprocess().</description>
              <signature>hook_field_attach_preprocess_alter(&amp;$variables, $context)</signature>
              <docrelurl>hook_field_attach_preprocess_alter/7</docrelurl>
            </item>
            <item name= "hook_field_attach_presave">
              <description>Act on field_attach_presave(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_presave($entity_type, $entity)</signature>
              <docrelurl>hook_field_attach_presave/7</docrelurl>
            </item>
            <item name= "hook_field_attach_purge">
              <description>Act on field_purge_data(). This hook is invoked in field_purge_data() and allows modules to act on purging data from a single field pseudo-entity. For example, if a module relates data in the field with its own data, it may purge its own data during this process as well.</description>
              <signature>hook_field_attach_purge($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>hook_field_attach_purge/7</docrelurl>
            </item>
            <item name= "hook_field_attach_rename_bundle">
              <description>Act on field_attach_rename_bundle(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new)</signature>
              <docrelurl>hook_field_attach_rename_bundle/7</docrelurl>
            </item>
            <item name= "hook_field_attach_submit">
              <description>Act on field_attach_submit(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_submit($entity_type, $entity, $form, &amp;$form_state)</signature>
              <docrelurl>hook_field_attach_submit/7</docrelurl>
            </item>
            <item name= "hook_field_attach_update">
              <description>Act on field_attach_update(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_update($entity_type, $entity)</signature>
              <docrelurl>hook_field_attach_update/7</docrelurl>
            </item>
            <item name= "hook_field_attach_validate">
              <description>Act on field_attach_validate(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_validate($entity_type, $entity, &amp;$errors)</signature>
              <docrelurl>hook_field_attach_validate/7</docrelurl>
            </item>
            <item name= "hook_field_attach_view_alter">
              <description>Perform alterations on field_attach_view(). This hook is invoked after the field module has performed the operation.</description>
              <signature>hook_field_attach_view_alter(&amp;$output, $context)</signature>
              <docrelurl>hook_field_attach_view_alter/7</docrelurl>
            </item>
            <item name= "hook_field_available_languages_alter">
              <description>Alter field_available_languages() values. This hook is invoked from field_available_languages() to allow modules to alter the array of available languages for the given field.</description>
              <signature>hook_field_available_languages_alter(&amp;$languages, $context)</signature>
              <docrelurl>hook_field_available_languages_alter/7</docrelurl>
            </item>
            <item name= "hook_field_create_field">
              <description>Act on a field being created. This hook is invoked from field_create_field() after the field is created, to allow modules to act on field creation.</description>
              <signature>hook_field_create_field($field)</signature>
              <docrelurl>hook_field_create_field/7</docrelurl>
            </item>
            <item name= "hook_field_create_instance">
              <description>Act on a field instance being created. This hook is invoked from field_create_instance() after the instance record is saved, so it cannot be used to modify the instance itself.</description>
              <signature>hook_field_create_instance($instance)</signature>
              <docrelurl>hook_field_create_instance/7</docrelurl>
            </item>
            <item name= "hook_field_delete">
              <description>Define custom delete behavior for this module's field types. This hook is invoked just before the data is deleted from field storage in field_attach_delete().</description>
              <signature>hook_field_delete($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_delete/7</docrelurl>
            </item>
            <item name= "hook_field_delete_field">
              <description>Act on a field being deleted. This hook is invoked just after a field is deleted by field_delete_field().</description>
              <signature>hook_field_delete_field($field)</signature>
              <docrelurl>hook_field_delete_field/7</docrelurl>
            </item>
            <item name= "hook_field_delete_instance">
              <description>Act on a field instance being deleted. This hook is invoked from field_delete_instance() after the instance is deleted.</description>
              <signature>hook_field_delete_instance($instance)</signature>
              <docrelurl>hook_field_delete_instance/7</docrelurl>
            </item>
            <item name= "hook_field_delete_revision">
              <description>Define custom revision delete behavior for this module's field types. This hook is invoked just before the data is deleted from field storage in field_attach_delete_revision(), and will only be called for fieldable types that are versioned.</description>
              <signature>hook_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_delete_revision/7</docrelurl>
            </item>
            <item name= "hook_field_display_alter">
              <description>Alters the display settings of a field before it gets displayed. Note that instead of hook_field_display_alter(), which is called for all fields on all entity types, hook_field_display_ENTITY_TYPE_alter() may be used to alter display settings for fields on a specific entity type only.</description>
              <signature>hook_field_display_alter(&amp;$display, $context)</signature>
              <docrelurl>hook_field_display_alter/7</docrelurl>
            </item>
            <item name= "hook_field_display_ENTITY_TYPE_alter">
              <description>Alters the display settings of a field on a given entity type before it gets displayed. Modules can implement hook_field_display_ENTITY_TYPE_alter() to alter display settings for fields on a specific entity type, rather than implementing hook_field_display_alter().</description>
              <signature>hook_field_display_ENTITY_TYPE_alter(&amp;$display, $context)</signature>
              <docrelurl>hook_field_display_ENTITY_TYPE_alter/7</docrelurl>
            </item>
            <item name= "hook_field_extra_fields">
              <description>Exposes "pseudo-field" components on fieldable entities. Field UI's "Manage fields" and "Manage display" pages let users re-order fields, but also non-field components. For nodes, these include the title, poll choices, and other elements exposed by modules through hook_form() or hook_form_alter().</description>
              <signature>hook_field_extra_fields()</signature>
              <docrelurl>hook_field_extra_fields/7</docrelurl>
            </item>
            <item name= "hook_field_extra_fields_alter">
              <description>Alter "pseudo-field" components on fieldable entities.</description>
              <signature>hook_field_extra_fields_alter(&amp;$info)</signature>
              <docrelurl>hook_field_extra_fields_alter/7</docrelurl>
            </item>
            <item name= "hook_field_extra_fields_display_alter">
              <description>Alters the display settings of pseudo-fields before an entity is displayed. This hook is called once per displayed entity. If the result of the hook involves reading from the database, it is highly recommended to statically cache the information.</description>
              <signature>hook_field_extra_fields_display_alter(&amp;$displays, $context)</signature>
              <docrelurl>hook_field_extra_fields_display_alter/7</docrelurl>
            </item>
            <item name= "hook_field_formatter_info">
              <description>Expose Field API formatter types. Formatters handle the display of field values. Formatter hooks are typically called by the Field Attach API field_attach_prepare_view() and field_attach_view() functions.</description>
              <signature>hook_field_formatter_info()</signature>
              <docrelurl>hook_field_formatter_info/7</docrelurl>
            </item>
            <item name= "hook_field_formatter_info_alter">
              <description>Perform alterations on Field API formatter types.</description>
              <signature>hook_field_formatter_info_alter(&amp;$info)</signature>
              <docrelurl>hook_field_formatter_info_alter/7</docrelurl>
            </item>
            <item name= "hook_field_formatter_prepare_view">
              <description>Allow formatters to load information for field values being displayed. This should be used when a formatter needs to load additional information from the database in order to render a field, for example a reference field which displays properties of the referenced entities such as name or type.</description>
              <signature>hook_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $displays)</signature>
              <docrelurl>hook_field_formatter_prepare_view/7</docrelurl>
            </item>
            <item name= "hook_field_formatter_view">
              <description>Build a renderable array for a field value.</description>
              <signature>hook_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>hook_field_formatter_view/7</docrelurl>
            </item>
            <item name= "hook_field_info">
              <description>Define Field API field types.</description>
              <signature>hook_field_info()</signature>
              <docrelurl>hook_field_info/7</docrelurl>
            </item>
            <item name= "hook_field_info_alter">
              <description>Perform alterations on Field API field types.</description>
              <signature>hook_field_info_alter(&amp;$info)</signature>
              <docrelurl>hook_field_info_alter/7</docrelurl>
            </item>
            <item name= "hook_field_insert">
              <description>Define custom insert behavior for this module's field types. Invoked from field_attach_insert().</description>
              <signature>hook_field_insert($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_insert/7</docrelurl>
            </item>
            <item name= "hook_field_instance_settings_form">
              <description>Add settings to an instance field settings form. Invoked from field_ui_field_edit_form() to allow the module defining the field to add settings for a field instance.</description>
              <signature>hook_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>hook_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "hook_field_is_empty">
              <description>Define what constitutes an empty item for a field type.</description>
              <signature>hook_field_is_empty($item, $field)</signature>
              <docrelurl>hook_field_is_empty/7</docrelurl>
            </item>
            <item name= "hook_field_language_alter">
              <description>Perform alterations on field_language() values. This hook is invoked to alter the array of display languages for the given entity.</description>
              <signature>hook_field_language_alter(&amp;$display_language, $context)</signature>
              <docrelurl>hook_field_language_alter/7</docrelurl>
            </item>
            <item name= "hook_field_load">
              <description>Define custom load behavior for this module's field types. Unlike most other field hooks, this hook operates on multiple entities. The $entities, $instances and $items parameters are arrays keyed by entity ID. For performance reasons, information for all available entity should be loaded in a single query where possible.</description>
              <signature>hook_field_load($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $age)</signature>
              <docrelurl>hook_field_load/7</docrelurl>
            </item>
            <item name= "hook_field_prepare_translation">
              <description>Define custom prepare_translation behavior for this module's field types.</description>
              <signature>hook_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &amp;$items, $source_entity, $source_langcode)</signature>
              <docrelurl>hook_field_prepare_translation/7</docrelurl>
            </item>
            <item name= "hook_field_prepare_view">
              <description>Prepare field values prior to display. This hook is invoked before the field values are handed to formatters for display, and runs before the formatters' own hook_field_formatter_prepare_view().</description>
              <signature>hook_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_prepare_view/7</docrelurl>
            </item>
            <item name= "hook_field_presave">
              <description>Define custom presave behavior for this module's field types. Make changes or additions to field values by altering the $items parameter by reference. There is no return value.</description>
              <signature>hook_field_presave($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_presave/7</docrelurl>
            </item>
            <item name= "hook_field_purge_field">
              <description>Acts when a field record is being purged. In field_purge_field(), after the field configuration has been removed from the database, the field storage module has had a chance to run its hook_field_storage_purge_field(), and the field info cache has been cleared, this hook is invoked on all modules to allow them to respond to the field being purged.</description>
              <signature>hook_field_purge_field($field)</signature>
              <docrelurl>hook_field_purge_field/7</docrelurl>
            </item>
            <item name= "hook_field_purge_field_instance">
              <description>Acts when a field instance is being purged. In field_purge_instance(), after the field instance has been removed from the database, the field storage module has had a chance to run its hook_field_storage_purge_instance(), and the field info cache has been cleared, this hook is invoked on all modules to allow them to respond to the field instance being purged.</description>
              <signature>hook_field_purge_field_instance($instance)</signature>
              <docrelurl>hook_field_purge_field_instance/7</docrelurl>
            </item>
            <item name= "hook_field_read_field">
              <description>Act on field records being read from the database. This hook is invoked from field_read_fields() on each field being read.</description>
              <signature>hook_field_read_field(&amp;$field)</signature>
              <docrelurl>hook_field_read_field/7</docrelurl>
            </item>
            <item name= "hook_field_read_instance">
              <description>Act on a field record being read from the database. This hook is invoked from field_read_instances() on each instance being read.</description>
              <signature>hook_field_read_instance($instance)</signature>
              <docrelurl>hook_field_read_instance/7</docrelurl>
            </item>
            <item name= "hook_field_schema">
              <description>Define the Field API schema for a field structure.</description>
              <signature>hook_field_schema($field)</signature>
              <docrelurl>hook_field_schema/7</docrelurl>
            </item>
            <item name= "hook_field_settings_form">
              <description>Add settings to a field settings form. Invoked from field_ui_field_settings_form() to allow the module defining the field to add global settings (i.e. settings that do not depend on the bundle or instance) to the field settings form. If the field already has data, only include settings that are safe to change.</description>
              <signature>hook_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>hook_field_settings_form/7</docrelurl>
            </item>
            <item name= "hook_field_storage_create_field">
              <description>Act on creation of a new field. This hook is invoked from field_create_field() to ask the field storage module to save field information and prepare for storing field instances. If there is a problem, the field storage module should throw an exception.</description>
              <signature>hook_field_storage_create_field($field)</signature>
              <docrelurl>hook_field_storage_create_field/7</docrelurl>
            </item>
            <item name= "hook_field_storage_delete">
              <description>Delete all field data for an entity. This hook is invoked from field_attach_delete() to ask the field storage module to delete field data.</description>
              <signature>hook_field_storage_delete($entity_type, $entity, $fields)</signature>
              <docrelurl>hook_field_storage_delete/7</docrelurl>
            </item>
            <item name= "hook_field_storage_delete_field">
              <description>Act on deletion of a field. This hook is invoked from field_delete_field() to ask the field storage module to mark all information stored in the field for deletion.</description>
              <signature>hook_field_storage_delete_field($field)</signature>
              <docrelurl>hook_field_storage_delete_field/7</docrelurl>
            </item>
            <item name= "hook_field_storage_delete_instance">
              <description>Act on deletion of a field instance. This hook is invoked from field_delete_instance() to ask the field storage module to mark all information stored for the field instance for deletion.</description>
              <signature>hook_field_storage_delete_instance($instance)</signature>
              <docrelurl>hook_field_storage_delete_instance/7</docrelurl>
            </item>
            <item name= "hook_field_storage_delete_revision">
              <description>Delete a single revision of field data for an entity. This hook is invoked from field_attach_delete_revision() to ask the field storage module to delete field revision data.</description>
              <signature>hook_field_storage_delete_revision($entity_type, $entity, $fields)</signature>
              <docrelurl>hook_field_storage_delete_revision/7</docrelurl>
            </item>
            <item name= "hook_field_storage_details">
              <description>Reveal the internal details about the storage for a field. For example, an SQL storage module might return the Schema API structure for the table. A key/value storage module might return the server name, authentication credentials, and bin name.</description>
              <signature>hook_field_storage_details($field)</signature>
              <docrelurl>hook_field_storage_details/7</docrelurl>
            </item>
            <item name= "hook_field_storage_details_alter">
              <description>Perform alterations on Field API storage details.</description>
              <signature>hook_field_storage_details_alter(&amp;$details, $field)</signature>
              <docrelurl>hook_field_storage_details_alter/7</docrelurl>
            </item>
            <item name= "hook_field_storage_info">
              <description>Expose Field API storage backends.</description>
              <signature>hook_field_storage_info()</signature>
              <docrelurl>hook_field_storage_info/7</docrelurl>
            </item>
            <item name= "hook_field_storage_info_alter">
              <description>Perform alterations on Field API storage types.</description>
              <signature>hook_field_storage_info_alter(&amp;$info)</signature>
              <docrelurl>hook_field_storage_info_alter/7</docrelurl>
            </item>
            <item name= "hook_field_storage_load">
              <description>Load field data for a set of entities. This hook is invoked from field_attach_load() to ask the field storage module to load field data.</description>
              <signature>hook_field_storage_load($entity_type, &amp;$entities, $age, $fields, $options)</signature>
              <docrelurl>hook_field_storage_load/7</docrelurl>
            </item>
            <item name= "hook_field_storage_pre_insert">
              <description>Act before the storage backends insert field data. This hook allows modules to store data before the Field Storage API, optionally preventing the field storage module from doing so.</description>
              <signature>hook_field_storage_pre_insert($entity_type, $entity, &amp;$skip_fields)</signature>
              <docrelurl>hook_field_storage_pre_insert/7</docrelurl>
            </item>
            <item name= "hook_field_storage_pre_load">
              <description>Act before the storage backends load field data. This hook allows modules to load data before the Field Storage API, optionally preventing the field storage module from doing so.</description>
              <signature>hook_field_storage_pre_load($entity_type, $entities, $age, &amp;$skip_fields, $options)</signature>
              <docrelurl>hook_field_storage_pre_load/7</docrelurl>
            </item>
            <item name= "hook_field_storage_pre_update">
              <description>Act before the storage backends update field data. This hook allows modules to store data before the Field Storage API, optionally preventing the field storage module from doing so.</description>
              <signature>hook_field_storage_pre_update($entity_type, $entity, &amp;$skip_fields)</signature>
              <docrelurl>hook_field_storage_pre_update/7</docrelurl>
            </item>
            <item name= "hook_field_storage_purge">
              <description>Remove field storage information when field data is purged. Called from field_purge_data() to allow the field storage module to delete field data information.</description>
              <signature>hook_field_storage_purge($entity_type, $entity, $field, $instance)</signature>
              <docrelurl>hook_field_storage_purge/7</docrelurl>
            </item>
            <item name= "hook_field_storage_purge_field">
              <description>Remove field storage information when a field record is purged. Called from field_purge_field() to allow the field storage module to remove field information when a field is being purged.</description>
              <signature>hook_field_storage_purge_field($field)</signature>
              <docrelurl>hook_field_storage_purge_field/7</docrelurl>
            </item>
            <item name= "hook_field_storage_purge_field_instance">
              <description>Remove field storage information when a field instance is purged. Called from field_purge_instance() to allow the field storage module to remove field instance information when a field instance is being purged.</description>
              <signature>hook_field_storage_purge_field_instance($instance)</signature>
              <docrelurl>hook_field_storage_purge_field_instance/7</docrelurl>
            </item>
            <item name= "hook_field_storage_query">
              <description>Execute an EntityFieldQuery. This hook is called to find the entities having certain entity and field conditions and sort them in the given field order. If the field storage engine also handles property sorts and orders, it should unset those properties in the called object to signal that those have been handled.</description>
              <signature>hook_field_storage_query($query)</signature>
              <docrelurl>hook_field_storage_query/7</docrelurl>
            </item>
            <item name= "hook_field_storage_update_field">
              <description>Update the storage information for a field. This is invoked on the field's storage module from field_update_field(), before the new field information is saved to the database. The field storage module should update its storage tables to agree with the new field information. If there is a problem, the field storage module should throw an exception.</description>
              <signature>hook_field_storage_update_field($field, $prior_field, $has_data)</signature>
              <docrelurl>hook_field_storage_update_field/7</docrelurl>
            </item>
            <item name= "hook_field_storage_write">
              <description>Write field data for an entity. This hook is invoked from field_attach_insert() and field_attach_update(), to ask the field storage module to save field data.</description>
              <signature>hook_field_storage_write($entity_type, $entity, $op, $fields)</signature>
              <docrelurl>hook_field_storage_write/7</docrelurl>
            </item>
            <item name= "hook_field_ui_view_modes_tabs">
              <description>Provide information on view mode tabs for an entity type.</description>
              <signature>hook_field_ui_view_modes_tabs($entity_type)</signature>
              <docrelurl>hook_field_ui_view_modes_tabs/7</docrelurl>
            </item>
            <item name= "hook_field_update">
              <description>Define custom update behavior for this module's field types. Invoked from field_attach_update().</description>
              <signature>hook_field_update($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>hook_field_update/7</docrelurl>
            </item>
            <item name= "hook_field_update_field">
              <description>Act on a field being updated. This hook is invoked just after field is updated in field_update_field().</description>
              <signature>hook_field_update_field($field, $prior_field, $has_data)</signature>
              <docrelurl>hook_field_update_field/7</docrelurl>
            </item>
            <item name= "hook_field_update_forbid">
              <description>Forbid a field update from occurring. Any module may forbid any update for any reason. For example, the field's storage module might forbid an update if it would change the storage schema while data for the field exists. A field type module might forbid an update if it would change existing data's semantics, or if there are external dependencies on field settings that cannot be updated.</description>
              <signature>hook_field_update_forbid($field, $prior_field, $has_data)</signature>
              <docrelurl>hook_field_update_forbid/7</docrelurl>
            </item>
            <item name= "hook_field_update_instance">
              <description>Act on a field instance being updated. This hook is invoked from field_update_instance() after the instance record is saved, so it cannot be used by a module to modify the instance itself.</description>
              <signature>hook_field_update_instance($instance, $prior_instance)</signature>
              <docrelurl>hook_field_update_instance/7</docrelurl>
            </item>
            <item name= "hook_field_validate">
              <description>Validate this module's field data. If there are validation problems, add to the $errors array (passed by reference). There is no return value.</description>
              <signature>hook_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>hook_field_validate/7</docrelurl>
            </item>
            <item name= "hook_field_widget_error">
              <description>Flag a field-level validation error.</description>
              <signature>hook_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>hook_field_widget_error/7</docrelurl>
            </item>
            <item name= "hook_field_widget_form">
              <description>Return the form for a single field widget. Field widget form elements should be based on the passed in $element, which contains the base form element properties derived from the field configuration.</description>
              <signature>hook_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>hook_field_widget_form/7</docrelurl>
            </item>
            <item name= "hook_field_widget_info">
              <description>Expose Field API widget types. Widgets are Form API elements with additional processing capabilities. Widget hooks are typically called by the Field Attach API during the creation of the field form structure with field_attach_form().</description>
              <signature>hook_field_widget_info()</signature>
              <docrelurl>hook_field_widget_info/7</docrelurl>
            </item>
            <item name= "hook_field_widget_info_alter">
              <description>Perform alterations on Field API widget types.</description>
              <signature>hook_field_widget_info_alter(&amp;$info)</signature>
              <docrelurl>hook_field_widget_info_alter/7</docrelurl>
            </item>
            <item name= "hook_field_widget_settings_form">
              <description>Add settings to a widget settings form. Invoked from field_ui_field_edit_form() to allow the module defining the widget to add settings for a widget instance.</description>
              <signature>hook_field_widget_settings_form($field, $instance)</signature>
              <docrelurl>hook_field_widget_settings_form/7</docrelurl>
            </item>
            <item name= "hook_filetransfer_backends">
              <description>Provide information on available file transfer backends. File transfer backends are used by modules to transfer files from remote locations to Drupal sites. For instance, update.module uses a file transfer backend to download new versions of modules and themes from drupal.org.</description>
              <signature>hook_filetransfer_backends()</signature>
              <docrelurl>hook_filetransfer_backends/7</docrelurl>
            </item>
            <item name= "hook_file_copy">
              <description>Respond to a file that has been copied.</description>
              <signature>hook_file_copy($file, $source)</signature>
              <docrelurl>hook_file_copy/7</docrelurl>
            </item>
            <item name= "hook_file_delete">
              <description>Respond to a file being deleted.</description>
              <signature>hook_file_delete($file)</signature>
              <docrelurl>hook_file_delete/7</docrelurl>
            </item>
            <item name= "hook_file_download">
              <description>Control access to private file downloads and specify HTTP headers. This hook allows modules enforce permissions on file downloads when the private file download method is selected. Modules can also provide headers to specify information like the file's name or MIME type.</description>
              <signature>hook_file_download($uri)</signature>
              <docrelurl>hook_file_download/7</docrelurl>
            </item>
            <item name= "hook_file_insert">
              <description>Respond to a file being added. This hook is called when a file has been added to the database. The hook doesn't distinguish between files created as a result of a copy or those created by an upload.</description>
              <signature>hook_file_insert($file)</signature>
              <docrelurl>hook_file_insert/7</docrelurl>
            </item>
            <item name= "hook_file_load">
              <description>Load additional information into file objects. file_load_multiple() calls this hook to allow modules to load additional information into each file.</description>
              <signature>hook_file_load($files)</signature>
              <docrelurl>hook_file_load/7</docrelurl>
            </item>
            <item name= "hook_file_mimetype_mapping_alter">
              <description>Alter MIME type mappings used to determine MIME type from a file extension. This hook is run when file_mimetype_mapping() is called. It is used to allow modules to add to or modify the default mapping from file_default_mimetype_mapping().</description>
              <signature>hook_file_mimetype_mapping_alter(&amp;$mapping)</signature>
              <docrelurl>hook_file_mimetype_mapping_alter/7</docrelurl>
            </item>
            <item name= "hook_file_move">
              <description>Respond to a file that has been moved.</description>
              <signature>hook_file_move($file, $source)</signature>
              <docrelurl>hook_file_move/7</docrelurl>
            </item>
            <item name= "hook_file_references">
              <description>Report the number of times a file is referenced by a module. This hook is called to determine if a files is in use. Multiple modules may be referencing the same file and to prevent one from deleting a file used by another this hook is called.</description>
              <signature>hook_file_references($file)</signature>
              <docrelurl>hook_file_references/7</docrelurl>
            </item>
            <item name= "hook_file_update">
              <description>Respond to a file being updated. This hook is called when file_save() is called on an existing file.</description>
              <signature>hook_file_update($file)</signature>
              <docrelurl>hook_file_update/7</docrelurl>
            </item>
            <item name= "hook_file_url_alter">
              <description>Alter the URL to a file. This hook is called from file_create_url(), and is called fairly frequently (10+ times per page), depending on how many files there are in a given page. If CSS and JS aggregation are disabled, this can become very frequently (50+ times per page) so performance is critical.</description>
              <signature>hook_file_url_alter(&amp;$uri)</signature>
              <docrelurl>hook_file_url_alter/7</docrelurl>
            </item>
            <item name= "hook_file_validate">
              <description>Check that files meet a given criteria. This hook lets modules perform additional validation on files. They're able to report a failure by returning one or more error messages.</description>
              <signature>hook_file_validate(&amp;$file)</signature>
              <docrelurl>hook_file_validate/7</docrelurl>
            </item>
            <item name= "hook_filter_format_delete">
              <description>Perform actions when a text format has been deleted. It is recommended for modules to implement this hook, when they store references to text formats to replace existing references to the deleted text format with the fallback format.</description>
              <signature>hook_filter_format_delete($format, $fallback)</signature>
              <docrelurl>hook_filter_format_delete/7</docrelurl>
            </item>
            <item name= "hook_filter_format_insert">
              <description>Perform actions when a new text format has been created.</description>
              <signature>hook_filter_format_insert($format)</signature>
              <docrelurl>hook_filter_format_insert/7</docrelurl>
            </item>
            <item name= "hook_filter_format_update">
              <description>Perform actions when a text format has been updated. This hook allows modules to act when a text format has been updated in any way. For example, when filters have been reconfigured, disabled, or re-arranged in the text format.</description>
              <signature>hook_filter_format_update($format)</signature>
              <docrelurl>hook_filter_format_update/7</docrelurl>
            </item>
            <item name= "hook_filter_info">
              <description>Define content filters. Content in Drupal is passed through a group of filters before it is output. This lets a module modify content to the site administrator's liking.</description>
              <signature>hook_filter_info()</signature>
              <docrelurl>hook_filter_info/7</docrelurl>
            </item>
            <item name= "hook_filter_info_alter">
              <description>Perform alterations on filter definitions.</description>
              <signature>hook_filter_info_alter(&amp;$info)</signature>
              <docrelurl>hook_filter_info_alter/7</docrelurl>
            </item>
            <item name= "hook_flush_caches">
              <description>Add a list of cache tables to be cleared. This hook allows your module to add cache table names to the list of cache tables that will be cleared by the Clear button on the Performance page or whenever drupal_flush_all_caches is invoked.</description>
              <signature>hook_flush_caches()</signature>
              <docrelurl>hook_flush_caches/7</docrelurl>
            </item>
            <item name= "hook_form">
              <description>Display a node editing form. This hook, implemented by node modules, is called to retrieve the form that is displayed when one attempts to "create/edit" an item. This form is displayed at the URI http://www.example.com/?q=node/&lt;add|edit&gt;/nodetype.</description>
              <signature>hook_form($node, $form_state)</signature>
              <docrelurl>hook_form/7</docrelurl>
            </item>
            <item name= "hook_forms">
              <description>Map form_ids to form builder functions. By default, when drupal_get_form() is called, the system will look for a function with the same name as the form ID, and use that function to build the form. This hook allows you to override that behavior in two ways.</description>
              <signature>hook_forms($form_id, $args)</signature>
              <docrelurl>hook_forms/7</docrelurl>
            </item>
            <item name= "hook_form_alter">
              <description>Perform alterations before a form is rendered. One popular use of this hook is to add form elements to the node form. When altering a node form, the node object can be accessed at $form['#node'].</description>
              <signature>hook_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>hook_form_alter/7</docrelurl>
            </item>
            <item name= "hook_form_FORM_ID_alter">
              <description>Provide a form-specific alteration instead of the global hook_form_alter(). Modules can implement hook_form_FORM_ID_alter() to modify a specific form, rather than implementing hook_form_alter() and checking the form ID, or using long switch statements to alter multiple forms.</description>
              <signature>hook_form_FORM_ID_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>hook_form_FORM_ID_alter/7</docrelurl>
            </item>
            <item name= "hook_form_system_theme_settings_alter">
              <description>Allow themes to alter the theme-specific settings form. With this hook, themes can alter the theme-specific settings form in any way allowable by Drupal's Forms API, such as adding form elements, changing default values and removing form elements. See the Forms API documentation on api.drupal.org for detailed information.</description>
              <signature>hook_form_system_theme_settings_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>hook_form_system_theme_settings_alter/7</docrelurl>
            </item>
            <item name= "hook_help">
              <description>Provide online user help. By implementing hook_help(), a module can make documentation available to the user for the module as a whole, or for specific paths. Help for developers should usually be provided via function header comments in the code, or in special API example files.</description>
              <signature>hook_help($path, $arg)</signature>
              <docrelurl>hook_help/7</docrelurl>
            </item>
            <item name= "hook_hook_info">
              <description>Defines one or more hooks that are exposed by a module. Normally hooks do not need to be explicitly defined. However, by declaring a hook explicitly, a module may define a "group" for it. Modules that implement a hook may then place their implementation in either $module.module or in $module.$group.inc. If the hook is located in $module.$group.inc, then that file will be automatically loaded when needed. In general, hooks that are rarely invoked and/or are very large should be placed in a separate include file, while hooks that are very short or very frequently called should be left in the main module file so that they are always available.</description>
              <signature>hook_hook_info()</signature>
              <docrelurl>hook_hook_info/7</docrelurl>
            </item>
            <item name= "hook_hook_info_alter">
              <description>Alter information from hook_hook_info().</description>
              <signature>hook_hook_info_alter(&amp;$hooks)</signature>
              <docrelurl>hook_hook_info_alter/7</docrelurl>
            </item>
            <item name= "hook_html_head_alter">
              <description>Alter XHTML HEAD tags before they are rendered by drupal_get_html_head(). Elements available to be altered are only those added using drupal_add_html_head_link() or drupal_add_html_head(). CSS and JS files are handled using drupal_add_css() and drupal_add_js(), so the head links for those files will not appear in the $head_elements array.</description>
              <signature>hook_html_head_alter(&amp;$head_elements)</signature>
              <docrelurl>hook_html_head_alter/7</docrelurl>
            </item>
            <item name= "hook_image_default_styles">
              <description>Provide module-based image styles for reuse throughout Drupal. This hook allows your module to provide image styles. This may be useful if you require images to fit within exact dimensions. Note that you should attempt to re-use the default styles provided by Image module whenever possible, rather than creating image styles that are specific to your module. Image provides the styles "thumbnail", "medium", and "large".</description>
              <signature>hook_image_default_styles()</signature>
              <docrelurl>hook_image_default_styles/7</docrelurl>
            </item>
            <item name= "hook_image_effect_info">
              <description>Define information about image effects provided by a module. This hook enables modules to define image manipulation effects for use with an image style.</description>
              <signature>hook_image_effect_info()</signature>
              <docrelurl>hook_image_effect_info/7</docrelurl>
            </item>
            <item name= "hook_image_styles_alter">
              <description>Modify any image styles provided by other modules or the user. This hook allows modules to modify, add, or remove image styles. This may be useful to modify default styles provided by other modules or enforce that a specific effect is always enabled on a style. Note that modifications to these styles may negatively affect the user experience, such as if an effect is added to a style through this hook, the user may attempt to remove the effect but it will be immediately be re-added.</description>
              <signature>hook_image_styles_alter(&amp;$styles)</signature>
              <docrelurl>hook_image_styles_alter/7</docrelurl>
            </item>
            <item name= "hook_image_style_delete">
              <description>Respond to image style deletion. This hook enables modules to update settings when a image style is being deleted. If a style is deleted, a replacement name may be specified in $style['name'] and the style being deleted will be specified in $style['old_name'].</description>
              <signature>hook_image_style_delete($style)</signature>
              <docrelurl>hook_image_style_delete/7</docrelurl>
            </item>
            <item name= "hook_image_style_flush">
              <description>Respond to image style flushing. This hook enables modules to take effect when a style is being flushed (all images are being deleted from the server and regenerated). Any module-specific caches that contain information related to the style should be cleared using this hook. This hook is called whenever a style is updated, deleted, or any effect associated with the style is update or deleted.</description>
              <signature>hook_image_style_flush($style)</signature>
              <docrelurl>hook_image_style_flush/7</docrelurl>
            </item>
            <item name= "hook_image_style_save">
              <description>Respond to image style updating. This hook enables modules to update settings that might be affected by changes to an image. For example, updating a module specific variable to reflect a change in the image style's name.</description>
              <signature>hook_image_style_save($style)</signature>
              <docrelurl>hook_image_style_save/7</docrelurl>
            </item>
            <item name= "hook_image_toolkits">
              <description>Define image toolkits provided by this module. The file which includes each toolkit's functions must be declared as part of the files array in the module .info file so that the registry will find and parse it.</description>
              <signature>hook_image_toolkits()</signature>
              <docrelurl>hook_image_toolkits/7</docrelurl>
            </item>
            <item name= "hook_init">
              <description>Perform setup tasks. See also, hook_boot. This hook is run at the beginning of the page request. It is typically used to set up global parameters which are needed later in the request. when this hook is called, all modules are already loaded in memory.</description>
              <signature>hook_init()</signature>
              <docrelurl>hook_init/7</docrelurl>
            </item>
            <item name= "hook_insert">
              <description>Respond to creation of a new node. This hook is invoked only on the module that defines the node's content type (use hook_node_insert() to act on all node insertions).</description>
              <signature>hook_insert($node)</signature>
              <docrelurl>hook_insert/7</docrelurl>
            </item>
            <item name= "hook_install">
              <description>Perform setup tasks when the module is installed. If the module implements hook_schema(), the database tables will be created before this hook is fired.</description>
              <signature>hook_install()</signature>
              <docrelurl>hook_install/7</docrelurl>
            </item>
            <item name= "hook_install_tasks">
              <description>Return an array of tasks to be performed by an installation profile. Any tasks you define here will be run, in order, after the installer has finished the site configuration step but before it has moved on to the final import of languages and the end of the installation. You can have any number of custom tasks to perform during this phase.</description>
              <signature>hook_install_tasks()</signature>
              <docrelurl>hook_install_tasks/7</docrelurl>
            </item>
            <item name= "hook_install_tasks_alter">
              <description>Alter the full list of installation tasks.</description>
              <signature>hook_install_tasks_alter(&amp;$tasks, $install_state)</signature>
              <docrelurl>hook_install_tasks_alter/7</docrelurl>
            </item>
            <item name= "hook_js_alter">
              <description>Perform necessary alterations to the JavaScript before it is presented on the page.</description>
              <signature>hook_js_alter(&amp;$javascript)</signature>
              <docrelurl>hook_js_alter/7</docrelurl>
            </item>
            <item name= "hook_language_fallback_candidates_alter">
              <description>Perform alterations on the language fallback candidates.</description>
              <signature>hook_language_fallback_candidates_alter(array &amp;$fallback_candidates)</signature>
              <docrelurl>hook_language_fallback_candidates_alter/7</docrelurl>
            </item>
            <item name= "hook_language_init">
              <description>Allows modules to act after language initialization has been performed. This is primarily needed to provide translation for configuration variables in the proper bootstrap phase. Variables are user-defined strings and therefore should not be translated via t(), since the source string can change without notice and any previous translation would be lost. Moreover, since variables can be used in the bootstrap phase, we need a bootstrap hook to provide a translation early enough to avoid misalignments between code using the original values and code using the translated values. However modules implementing hook_boot() should be aware that language initialization did not happen yet and thus they cannot rely on translated variables.</description>
              <signature>hook_language_init()</signature>
              <docrelurl>hook_language_init/7</docrelurl>
            </item>
            <item name= "hook_language_negotiation_info">
              <description>Allow modules to define their own language providers.</description>
              <signature>hook_language_negotiation_info()</signature>
              <docrelurl>hook_language_negotiation_info/7</docrelurl>
            </item>
            <item name= "hook_language_negotiation_info_alter">
              <description>Perform alterations on language providers.</description>
              <signature>hook_language_negotiation_info_alter(array &amp;$language_providers)</signature>
              <docrelurl>hook_language_negotiation_info_alter/7</docrelurl>
            </item>
            <item name= "hook_language_switch_links_alter">
              <description>Perform alterations on language switcher links. A language switcher link may need to point to a different path or use a translated link text before going through l(), which will just handle the path aliases.</description>
              <signature>hook_language_switch_links_alter(array &amp;$links, $type, $path)</signature>
              <docrelurl>hook_language_switch_links_alter/7</docrelurl>
            </item>
            <item name= "hook_language_types_info">
              <description>Allow modules to define their own language types.</description>
              <signature>hook_language_types_info()</signature>
              <docrelurl>hook_language_types_info/7</docrelurl>
            </item>
            <item name= "hook_language_types_info_alter">
              <description>Perform alterations on language types.</description>
              <signature>hook_language_types_info_alter(array &amp;$language_types)</signature>
              <docrelurl>hook_language_types_info_alter/7</docrelurl>
            </item>
            <item name= "hook_library">
              <description>Registers JavaScript/CSS libraries associated with a module. Modules implementing this return an array of arrays. The key to each sub-array is the machine readable name of the library. Each library may contain the following items:</description>
              <signature>hook_library()</signature>
              <docrelurl>hook_library/7</docrelurl>
            </item>
            <item name= "hook_library_alter">
              <description>Alters the JavaScript/CSS library registry. Allows certain, contributed modules to update libraries to newer versions while ensuring backwards compatibility. In general, such manipulations should only be done by designated modules, since most modules that integrate with a certain library also depend on the API of a certain library version.</description>
              <signature>hook_library_alter(&amp;$libraries, $module)</signature>
              <docrelurl>hook_library_alter/7</docrelurl>
            </item>
            <item name= "hook_load">
              <description>Act on nodes being loaded from the database. This hook is invoked only on the module that defines the node's content type (use hook_node_load() to respond to all node loads).</description>
              <signature>hook_load($nodes)</signature>
              <docrelurl>hook_load/7</docrelurl>
            </item>
            <item name= "hook_locale">
              <description>Allows modules to define their own text groups that can be translated.</description>
              <signature>hook_locale($op = 'groups')</signature>
              <docrelurl>hook_locale/7</docrelurl>
            </item>
            <item name= "hook_mail">
              <description>Prepare a message based on parameters; called from drupal_mail().</description>
              <signature>hook_mail($key, &amp;$message, $params)</signature>
              <docrelurl>hook_mail/7</docrelurl>
            </item>
            <item name= "hook_mail_alter">
              <description>Alter an email message created with the drupal_mail() function. hook_mail_alter() allows modification of email messages created and sent with drupal_mail(). Usage examples include adding and/or changing message text, message fields, and message headers.</description>
              <signature>hook_mail_alter(&amp;$message)</signature>
              <docrelurl>hook_mail_alter/7</docrelurl>
            </item>
            <item name= "hook_menu">
              <description>Define menu items and page callbacks. This hook enables modules to register paths in order to define how URL requests are handled. Paths may be registered for URL handling only, or they can register a link to be placed in a menu (usually the Navigation menu). A path and its associated information is commonly called a "menu router item". This hook is rarely called (for example, when modules are enabled), and its results are cached in the database.</description>
              <signature>hook_menu()</signature>
              <docrelurl>hook_menu/7</docrelurl>
            </item>
            <item name= "hook_menu_active_handler_alter">
              <description>Alters the router item for the active menu handler. Called by menu_execute_active_handler() to allow modules to alter the information that will be used to handle the page request. Only use this hook if an alteration specific to the page request is needed. Otherwise use hook_menu_alter().</description>
              <signature>hook_menu_active_handler_alter(&amp;$router_item, $path = NULL)</signature>
              <docrelurl>hook_menu_active_handler_alter/7</docrelurl>
            </item>
            <item name= "hook_menu_alter">
              <description>Alter the data being saved to the {menu_router} table after hook_menu is invoked. This hook is invoked by menu_router_build(). The menu definitions are passed in by reference. Each element of the $items array is one item returned by a module from hook_menu. Additional items may be added, or existing items altered.</description>
              <signature>hook_menu_alter(&amp;$items)</signature>
              <docrelurl>hook_menu_alter/7</docrelurl>
            </item>
            <item name= "hook_menu_contextual_links_alter">
              <description>Alter contextual links before they are rendered. This hook is invoked by menu_contextual_links(). The system-determined contextual links are passed in by reference. Additional links may be added or existing links can be altered.</description>
              <signature>hook_menu_contextual_links_alter(&amp;$links, $router_item, $root_path)</signature>
              <docrelurl>hook_menu_contextual_links_alter/7</docrelurl>
            </item>
            <item name= "hook_menu_delete">
              <description>Informs modules that a custom menu was deleted. This hook is used to notify modules that a custom menu along with all links contained in it (if any) has been deleted. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_delete($menu)</signature>
              <docrelurl>hook_menu_delete/7</docrelurl>
            </item>
            <item name= "hook_menu_insert">
              <description>Informs modules that a custom menu was created. This hook is used to notify modules that a custom menu has been created. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_insert($menu)</signature>
              <docrelurl>hook_menu_insert/7</docrelurl>
            </item>
            <item name= "hook_menu_link_alter">
              <description>Alter the data being saved to the {menu_links} table by menu_link_save().</description>
              <signature>hook_menu_link_alter(&amp;$item)</signature>
              <docrelurl>hook_menu_link_alter/7</docrelurl>
            </item>
            <item name= "hook_menu_link_delete">
              <description>Inform modules that a menu link has been deleted. This hook is used to notify modules that menu items have been deleted. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_link_delete($link)</signature>
              <docrelurl>hook_menu_link_delete/7</docrelurl>
            </item>
            <item name= "hook_menu_link_insert">
              <description>Inform modules that a menu link has been created. This hook is used to notify modules that menu items have been created. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_link_insert($link)</signature>
              <docrelurl>hook_menu_link_insert/7</docrelurl>
            </item>
            <item name= "hook_menu_link_update">
              <description>Inform modules that a menu link has been updated. This hook is used to notify modules that menu items have been updated. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_link_update($link)</signature>
              <docrelurl>hook_menu_link_update/7</docrelurl>
            </item>
            <item name= "hook_menu_local_tasks_alter">
              <description>Alter tabs and actions displayed on the page before they are rendered. This hook is invoked by menu_local_tasks(). The system-determined tabs and actions are passed in by reference. Additional tabs or actions may be added, or existing items altered.</description>
              <signature>hook_menu_local_tasks_alter(&amp;$data, $router_item, $root_path)</signature>
              <docrelurl>hook_menu_local_tasks_alter/7</docrelurl>
            </item>
            <item name= "hook_menu_update">
              <description>Informs modules that a custom menu was updated. This hook is used to notify modules that a custom menu has been updated. Contributed modules may use the information to perform actions based on the information entered into the menu system.</description>
              <signature>hook_menu_update($menu)</signature>
              <docrelurl>hook_menu_update/7</docrelurl>
            </item>
            <item name= "hook_modules_disabled">
              <description>Perform necessary actions after modules are disabled. This function differs from hook_disable() as it gives all other modules a chance to perform actions when modules are disabled, whereas hook_disable() will only be called on the module actually being disabled.</description>
              <signature>hook_modules_disabled($modules)</signature>
              <docrelurl>hook_modules_disabled/7</docrelurl>
            </item>
            <item name= "hook_modules_enabled">
              <description>Perform necessary actions after modules are enabled. This function differs from hook_enable() as it gives all other modules a chance to perform actions when modules are enabled, whereas hook_enable() will only be called on the module actually being enabled.</description>
              <signature>hook_modules_enabled($modules)</signature>
              <docrelurl>hook_modules_enabled/7</docrelurl>
            </item>
            <item name= "hook_modules_installed">
              <description>Perform necessary actions after modules are installed. This function differs from hook_install() as it gives all other modules a chance to perform actions when a module is installed, whereas hook_install() will only be called on the module actually being installed.</description>
              <signature>hook_modules_installed($modules)</signature>
              <docrelurl>hook_modules_installed/7</docrelurl>
            </item>
            <item name= "hook_modules_uninstalled">
              <description>Perform necessary actions after modules are uninstalled. This function differs from hook_uninstall() as it gives all other modules a chance to perform actions when a module is uninstalled, whereas hook_uninstall() will only be called on the module actually being uninstalled.</description>
              <signature>hook_modules_uninstalled($modules)</signature>
              <docrelurl>hook_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "hook_module_implements_alter">
              <description>Alter the registry of modules implementing a hook. This hook is invoked during module_implements(). A module may implement this hook in order to reorder the implementing modules, which are otherwise ordered by the module's system weight.</description>
              <signature>hook_module_implements_alter(&amp;$implementations, $hook)</signature>
              <docrelurl>hook_module_implements_alter/7</docrelurl>
            </item>
            <item name= "hook_multilingual_settings_changed">
              <description>Allow modules to react to language settings changes. Every module needing to act when the number of enabled languages changes should implement this. This is an "internal" hook and should not be invoked elsewhere. The typical implementation would trigger some kind of rebuilding, this way system components could properly react to the change of the enabled languages number.</description>
              <signature>hook_multilingual_settings_changed()</signature>
              <docrelurl>hook_multilingual_settings_changed/7</docrelurl>
            </item>
            <item name= "hook_node_access">
              <description>Control access to a node. Modules may implement this hook if they want to have a say in whether or not a given user has access to perform a given operation on a node.</description>
              <signature>hook_node_access($node, $op, $account)</signature>
              <docrelurl>hook_node_access/7</docrelurl>
            </item>
            <item name= "hook_node_access_records">
              <description>Set permissions for a node to be written to the database. When a node is saved, a module implementing hook_node_access_records() will be asked if it is interested in the access permissions for a node. If it is interested, it must respond with an array of permissions arrays for that node.</description>
              <signature>hook_node_access_records($node)</signature>
              <docrelurl>hook_node_access_records/7</docrelurl>
            </item>
            <item name= "hook_node_access_records_alter">
              <description>Alter permissions for a node before it is written to the database. Node access modules establish rules for user access to content. Node access records are stored in the {node_access} table and define which permissions are required to access a node. This hook is invoked after node access modules returned their requirements via hook_node_access_records(); doing so allows modules to modify the $grants array by reference before it is stored, so custom or advanced business logic can be applied.</description>
              <signature>hook_node_access_records_alter(&amp;$grants, $node)</signature>
              <docrelurl>hook_node_access_records_alter/7</docrelurl>
            </item>
            <item name= "hook_node_delete">
              <description>Respond to node deletion. This hook is invoked from node_delete_multiple() after the node has been removed from the node table in the database, after the type-specific hook_delete() has been invoked, and before field_attach_delete() is called.</description>
              <signature>hook_node_delete($node)</signature>
              <docrelurl>hook_node_delete/7</docrelurl>
            </item>
            <item name= "hook_node_grants">
              <description>Inform the node access system what permissions the user has. This hook is for implementation by node access modules. In this hook, the module grants a user different "grant IDs" within one or more "realms". In hook_node_access_records(), the realms and grant IDs are associated with permission to view, edit, and delete individual nodes.</description>
              <signature>hook_node_grants($account, $op)</signature>
              <docrelurl>hook_node_grants/7</docrelurl>
            </item>
            <item name= "hook_node_grants_alter">
              <description>Alter user access rules when trying to view, edit or delete a node. Node access modules establish rules for user access to content. hook_node_grants() defines permissions for a user to view, edit or delete nodes by building a $grants array that indicates the permissions assigned to the user by each node access module. This hook is called to allow modules to modify the $grants array by reference, so the interaction of multiple node access modules can be altered or advanced business logic can be applied.</description>
              <signature>hook_node_grants_alter(&amp;$grants, $account, $op)</signature>
              <docrelurl>hook_node_grants_alter/7</docrelurl>
            </item>
            <item name= "hook_node_info">
              <description>Define module-provided node types. This hook allows a module to define one or more of its own node types. For example, the blog module uses it to define a blog node-type named "Blog entry." The name and attributes of each desired node type are specified in an array returned by the hook.</description>
              <signature>hook_node_info()</signature>
              <docrelurl>hook_node_info/7</docrelurl>
            </item>
            <item name= "hook_node_insert">
              <description>Respond to creation of a new node. This hook is invoked from node_save() after the node is inserted into the node table in the database, after the type-specific hook_insert() is invoked, and after field_attach_insert() is called.</description>
              <signature>hook_node_insert($node)</signature>
              <docrelurl>hook_node_insert/7</docrelurl>
            </item>
            <item name= "hook_node_load">
              <description>Act on nodes being loaded from the database. This hook is invoked during node loading, which is handled by entity_load(), via classes NodeController and DrupalDefaultEntityController. After the node information is read from the database or the entity cache, hook_load() is invoked on the node's content type module, then field_attach_node_revision() or field_attach_load() is called, then hook_entity_load() is invoked on all implementing modules, and finally hook_node_load() is invoked on all implementing modules.</description>
              <signature>hook_node_load($nodes, $types)</signature>
              <docrelurl>hook_node_load/7</docrelurl>
            </item>
            <item name= "hook_node_operations">
              <description>Add mass node operations. This hook enables modules to inject custom operations into the mass operations dropdown found at admin/content, by associating a callback function with the operation, which is called when the form is submitted. The callback function receives one initial argument, which is an array of the checked nodes.</description>
              <signature>hook_node_operations()</signature>
              <docrelurl>hook_node_operations/7</docrelurl>
            </item>
            <item name= "hook_node_prepare">
              <description>Act on a node object about to be shown on the add/edit form. This hook is invoked from node_object_prepare() after the type-specific hook_prepare() is invoked.</description>
              <signature>hook_node_prepare($node)</signature>
              <docrelurl>hook_node_prepare/7</docrelurl>
            </item>
            <item name= "hook_node_presave">
              <description>Act on a node being inserted or updated. This hook is invoked from node_save() before the node is saved to the database.</description>
              <signature>hook_node_presave($node)</signature>
              <docrelurl>hook_node_presave/7</docrelurl>
            </item>
            <item name= "hook_node_revision_delete">
              <description>Respond to deletion of a node revision. This hook is invoked from node_revision_delete() after the revision has been removed from the node_revision table, and before field_attach_delete_revision() is called.</description>
              <signature>hook_node_revision_delete($node)</signature>
              <docrelurl>hook_node_revision_delete/7</docrelurl>
            </item>
            <item name= "hook_node_search_result">
              <description>Act on a node being displayed as a search result. This hook is invoked from node_search_execute(), after node_load() and node_view() have been called.</description>
              <signature>hook_node_search_result($node)</signature>
              <docrelurl>hook_node_search_result/7</docrelurl>
            </item>
            <item name= "hook_node_submit">
              <description>Act on a node after validated form values have been copied to it. This hook is invoked when a node form is submitted with either the "Save" or "Preview" button, after form values have been copied to the form state's node object, but before the node is saved or previewed. It is a chance for modules to adjust the node's properties from what they are simply after a copy from $form_state['values']. This hook is intended for adjusting non-field-related properties. See hook_field_attach_submit() for customizing field-related properties.</description>
              <signature>hook_node_submit($node, $form, &amp;$form_state)</signature>
              <docrelurl>hook_node_submit/7</docrelurl>
            </item>
            <item name= "hook_node_type_delete">
              <description>Respond to node type deletion. This hook is invoked from node_type_delete() after the node type is removed from the database.</description>
              <signature>hook_node_type_delete($info)</signature>
              <docrelurl>hook_node_type_delete/7</docrelurl>
            </item>
            <item name= "hook_node_type_insert">
              <description>Respond to node type creation. This hook is invoked from node_type_save() after the node type is added to the database.</description>
              <signature>hook_node_type_insert($info)</signature>
              <docrelurl>hook_node_type_insert/7</docrelurl>
            </item>
            <item name= "hook_node_type_update">
              <description>Respond to node type updates. This hook is invoked from node_type_save() after the node type is updated in the database.</description>
              <signature>hook_node_type_update($info)</signature>
              <docrelurl>hook_node_type_update/7</docrelurl>
            </item>
            <item name= "hook_node_update">
              <description>Respond to updates to a node. This hook is invoked from node_save() after the node is updated in the node table in the database, after the type-specific hook_update() is invoked, and after field_attach_update() is called.</description>
              <signature>hook_node_update($node)</signature>
              <docrelurl>hook_node_update/7</docrelurl>
            </item>
            <item name= "hook_node_update_index">
              <description>Act on a node being indexed for searching. This hook is invoked during search indexing, after node_load(), and after the result of node_view() is added as $node->rendered to the node object.</description>
              <signature>hook_node_update_index($node)</signature>
              <docrelurl>hook_node_update_index/7</docrelurl>
            </item>
            <item name= "hook_node_validate">
              <description>Perform node validation before a node is created or updated. This hook is invoked from node_validate(), after a user has has finished editing the node and is previewing or submitting it. It is invoked at the end of all the standard validation steps, and after the type-specific hook_validate() is invoked.</description>
              <signature>hook_node_validate($node, $form)</signature>
              <docrelurl>hook_node_validate/7</docrelurl>
            </item>
            <item name= "hook_node_view">
              <description>Act on a node that is being assembled before rendering. The module may add elements to $node->content prior to rendering. This hook will be called after hook_view(). The structure of $node->content is a renderable array as expected by drupal_render().</description>
              <signature>hook_node_view($node, $view_mode)</signature>
              <docrelurl>hook_node_view/7</docrelurl>
            </item>
            <item name= "hook_node_view_alter">
              <description>Alter the results of node_view(). This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete node content structure has been built.</description>
              <signature>hook_node_view_alter(&amp;$build)</signature>
              <docrelurl>hook_node_view_alter/7</docrelurl>
            </item>
            <item name= "hook_openid">
              <description>Allow modules to modify the OpenID request parameters.</description>
              <signature>hook_openid($op, $request)</signature>
              <docrelurl>hook_openid/7</docrelurl>
            </item>
            <item name= "hook_openid_discovery_method_info">
              <description>Allow modules to declare OpenID discovery methods. The discovery function callbacks will be called in turn with an unique parameter, the claimed identifier. They have to return an array of services, in the same form returned by openid_discover().</description>
              <signature>hook_openid_discovery_method_info()</signature>
              <docrelurl>hook_openid_discovery_method_info/7</docrelurl>
            </item>
            <item name= "hook_openid_discovery_method_info_alter">
              <description>Allow modules to alter discovery methods.</description>
              <signature>hook_openid_discovery_method_info_alter(&amp;$methods)</signature>
              <docrelurl>hook_openid_discovery_method_info_alter/7</docrelurl>
            </item>
            <item name= "hook_openid_normalization_method_info">
              <description>Allow modules to declare OpenID normalization methods. The discovery function callbacks will be called in turn with an unique parameter, the identifier to normalize. They have to return a normalized identifier, or NULL if the identifier is not in a form they can handle.</description>
              <signature>hook_openid_normalization_method_info()</signature>
              <docrelurl>hook_openid_normalization_method_info/7</docrelurl>
            </item>
            <item name= "hook_openid_normalization_method_info_alter">
              <description>Allow modules to alter normalization methods.</description>
              <signature>hook_openid_normalization_method_info_alter(&amp;$methods)</signature>
              <docrelurl>hook_openid_normalization_method_info_alter/7</docrelurl>
            </item>
            <item name= "hook_openid_response">
              <description>Allow modules to act upon a successful OpenID login.</description>
              <signature>hook_openid_response($response, $account)</signature>
              <docrelurl>hook_openid_response/7</docrelurl>
            </item>
            <item name= "hook_options_list">
              <description>Returns the list of options to be displayed for a field. Field types willing to enable one or several of the widgets defined in options.module (select, radios/checkboxes, on/off checkbox) need to implement this hook to specify the list of options to display in the widgets.</description>
              <signature>hook_options_list($field)</signature>
              <docrelurl>hook_options_list/7</docrelurl>
            </item>
            <item name= "hook_overlay_child_initialize">
              <description>Allow modules to act when an overlay child window is initialized. The child window is initialized when a page is displayed from within the overlay, so modules can act here if they need to take action to work from within the confines of the overlay.</description>
              <signature>hook_overlay_child_initialize()</signature>
              <docrelurl>hook_overlay_child_initialize/7</docrelurl>
            </item>
            <item name= "hook_overlay_parent_initialize">
              <description>Allow modules to act when an overlay parent window is initialized. The parent window is initialized when a page is displayed in which the overlay might be required to be displayed, so modules can act here if they need to take action to accomodate the possibility of the overlay appearing within a Drupal page.</description>
              <signature>hook_overlay_parent_initialize()</signature>
              <docrelurl>hook_overlay_parent_initialize/7</docrelurl>
            </item>
            <item name= "hook_page_alter">
              <description>Perform alterations before a page is rendered. Use this hook when you want to remove or alter elements at the page level, or add elements at the page level that depend on an other module's elements (this hook runs after hook_page_build().</description>
              <signature>hook_page_alter(&amp;$page)</signature>
              <docrelurl>hook_page_alter/7</docrelurl>
            </item>
            <item name= "hook_page_build">
              <description>Add elements to a page before it is rendered. Use this hook when you want to add elements at the page level. For your additions to be printed, they have to be placed below a top level array key of the $page array that has the name of a region of the active theme.</description>
              <signature>hook_page_build(&amp;$page)</signature>
              <docrelurl>hook_page_build/7</docrelurl>
            </item>
            <item name= "hook_page_delivery_callback_alter">
              <description>Alters the delivery callback used to send the result of the page callback to the browser. Called by drupal_deliver_page() to allow modules to alter how the page is delivered to the browser.</description>
              <signature>hook_page_delivery_callback_alter(&amp;$callback)</signature>
              <docrelurl>hook_page_delivery_callback_alter/7</docrelurl>
            </item>
            <item name= "hook_path_delete">
              <description>The path has been deleted.</description>
              <signature>hook_path_delete($path)</signature>
              <docrelurl>hook_path_delete/7</docrelurl>
            </item>
            <item name= "hook_path_insert">
              <description>The path has been inserted.</description>
              <signature>hook_path_insert($path)</signature>
              <docrelurl>hook_path_insert/7</docrelurl>
            </item>
            <item name= "hook_path_update">
              <description>The path has been updated.</description>
              <signature>hook_path_update($path)</signature>
              <docrelurl>hook_path_update/7</docrelurl>
            </item>
            <item name= "hook_permission">
              <description>Define user permissions. This hook can supply permissions that the module defines, so that they can be selected on the user permissions page and used to grant or restrict access to actions the module performs.</description>
              <signature>hook_permission()</signature>
              <docrelurl>hook_permission/7</docrelurl>
            </item>
            <item name= "hook_prepare">
              <description>Act on a node object about to be shown on the add/edit form. This hook is invoked only on the module that defines the node's content type (use hook_node_prepare() to act on all node preparations).</description>
              <signature>hook_prepare($node)</signature>
              <docrelurl>hook_prepare/7</docrelurl>
            </item>
            <item name= "hook_preprocess">
              <description>Preprocess theme variables. This hook allows modules to preprocess theme variables for theme templates. It is called for all invocations of theme(), to allow modules to add to or override variables for all theme hooks.</description>
              <signature>hook_preprocess(&amp;$variables, $hook)</signature>
              <docrelurl>hook_preprocess/7</docrelurl>
            </item>
            <item name= "hook_preprocess_HOOK">
              <description>Preprocess theme variables for a specific theme hook. This hook allows modules to preprocess theme variables for a specific theme hook. It should only be used if a module needs to override or add to the theme preprocessing for a theme hook it didn't define.</description>
              <signature>hook_preprocess_HOOK(&amp;$variables)</signature>
              <docrelurl>hook_preprocess_HOOK/7</docrelurl>
            </item>
            <item name= "hook_process">
              <description>Process theme variables. This hook allows modules to process theme variables for theme templates. It is called for all invocations of theme(), to allow modules to add to or override variables for all theme hooks.</description>
              <signature>hook_process(&amp;$variables, $hook)</signature>
              <docrelurl>hook_process/7</docrelurl>
            </item>
            <item name= "hook_process_HOOK">
              <description>Process theme variables for a specific theme hook. This hook allows modules to process theme variables for a specific theme hook. It should only be used if a module needs to override or add to the theme processing for a theme hook it didn't define.</description>
              <signature>hook_process_HOOK(&amp;$variables)</signature>
              <docrelurl>hook_process_HOOK/7</docrelurl>
            </item>
            <item name= "hook_query_alter">
              <description>Perform alterations to a structured query. Structured (aka dynamic) queries that have tags associated may be altered by any module before the query is executed.</description>
              <signature>hook_query_alter(QueryAlterableInterface $query)</signature>
              <docrelurl>hook_query_alter/7</docrelurl>
            </item>
            <item name= "hook_query_TAG_alter">
              <description>Perform alterations to a structured query for a given tag.</description>
              <signature>hook_query_TAG_alter(QueryAlterableInterface $query)</signature>
              <docrelurl>hook_query_TAG_alter/7</docrelurl>
            </item>
            <item name= "hook_ranking">
              <description>Provide additional methods of scoring for core search results for nodes. A node's search score is used to rank it among other nodes matched by the search, with the highest-ranked nodes appearing first in the search listing.</description>
              <signature>hook_ranking()</signature>
              <docrelurl>hook_ranking/7</docrelurl>
            </item>
            <item name= "hook_rdf_mapping">
              <description>Allow modules to define RDF mappings for field bundles. Modules defining their own field bundles can specify which RDF semantics should be used to annotate these bundles. These mappings are then used for automatic RDFa output in the HTML code.</description>
              <signature>hook_rdf_mapping()</signature>
              <docrelurl>hook_rdf_mapping/7</docrelurl>
            </item>
            <item name= "hook_rdf_namespaces">
              <description>Allow modules to define namespaces for RDF mappings. Many common namespace prefixes are defined in rdf_rdf_namespaces(). However, if a module implements hook_rdf_mapping() and uses a prefix that is not defined in rdf_rdf_namespaces(), this hook should be used to define the new namespace prefix.</description>
              <signature>hook_rdf_namespaces()</signature>
              <docrelurl>hook_rdf_namespaces/7</docrelurl>
            </item>
            <item name= "hook_registry_files_alter">
              <description>Perform necessary alterations to the list of files parsed by the registry. Modules can manually modify the list of files before the registry parses them. The $modules array provides the .info file information, which includes the list of files registered to each module. Any files in the list can then be added to the list of files that the registry will parse, or modify attributes of a file.</description>
              <signature>hook_registry_files_alter(&amp;$files, $modules)</signature>
              <docrelurl>hook_registry_files_alter/7</docrelurl>
            </item>
            <item name= "hook_requirements">
              <description>Check installation requirements and do status reporting. This hook has two closely related uses, determined by the $phase argument: checking installation requirements ($phase == 'install') and status reporting ($phase == 'runtime').</description>
              <signature>hook_requirements($phase)</signature>
              <docrelurl>hook_requirements/7</docrelurl>
            </item>
            <item name= "hook_schema">
              <description>Define the current version of the database schema. A Drupal schema definition is an array structure representing one or more tables and their related keys and indexes. A schema is defined by hook_schema() which must live in your module's .install file.</description>
              <signature>hook_schema()</signature>
              <docrelurl>hook_schema/7</docrelurl>
            </item>
            <item name= "hook_schema_alter">
              <description>Perform alterations to existing database schemas. When a module modifies the database structure of another module (by changing, adding or removing fields, keys or indexes), it should implement hook_schema_alter() to update the default $schema to take it's changes into account.</description>
              <signature>hook_schema_alter(&amp;$schema)</signature>
              <docrelurl>hook_schema_alter/7</docrelurl>
            </item>
            <item name= "hook_search_access">
              <description>Define access to a custom search routine. This hook allows a module to define permissions for a search tab.</description>
              <signature>hook_search_access()</signature>
              <docrelurl>hook_search_access/7</docrelurl>
            </item>
            <item name= "hook_search_admin">
              <description>Add elements to the search settings form.</description>
              <signature>hook_search_admin()</signature>
              <docrelurl>hook_search_admin/7</docrelurl>
            </item>
            <item name= "hook_search_execute">
              <description>Execute a search for a set of key words. Use database API with the 'PagerDefault' query extension to perform your search.</description>
              <signature>hook_search_execute($keys = NULL)</signature>
              <docrelurl>hook_search_execute/7</docrelurl>
            </item>
            <item name= "hook_search_info">
              <description>Define a custom search type. This hook allows a module to tell search.module that it wishes to perform searches on content it defines (custom node types, users, or comments for example) when a site search is performed.</description>
              <signature>hook_search_info()</signature>
              <docrelurl>hook_search_info/7</docrelurl>
            </item>
            <item name= "hook_search_page">
              <description>Override the rendering of search results. A module that implements hook_search() to define a type of search may implement this hook in order to override the default theming of its search results, which is otherwise themed using theme('search_results').</description>
              <signature>hook_search_page($results)</signature>
              <docrelurl>hook_search_page/7</docrelurl>
            </item>
            <item name= "hook_search_preprocess">
              <description>Preprocess text for search. This hook is called to preprocess both the text added to the search index and the keywords users have submitted for searching.</description>
              <signature>hook_search_preprocess($text)</signature>
              <docrelurl>hook_search_preprocess/7</docrelurl>
            </item>
            <item name= "hook_search_reset">
              <description>Take action when the search index is going to be rebuilt. Modules that use hook_update_index() should update their indexing bookkeeping so that it starts from scratch the next time hook_update_index() is called.</description>
              <signature>hook_search_reset()</signature>
              <docrelurl>hook_search_reset/7</docrelurl>
            </item>
            <item name= "hook_search_status">
              <description>Report the status of indexing.</description>
              <signature>hook_search_status()</signature>
              <docrelurl>hook_search_status/7</docrelurl>
            </item>
            <item name= "hook_shortcut_default_set">
              <description>Return the name of a default shortcut set for the provided user account. This hook allows modules to define default shortcut sets for a particular user that differ from the site-wide default (for example, a module may want to define default shortcuts on a per-role basis).</description>
              <signature>hook_shortcut_default_set($account)</signature>
              <docrelurl>hook_shortcut_default_set/7</docrelurl>
            </item>
            <item name= "hook_simpletest_alter">
              <description>Alter the list of tests.</description>
              <signature>hook_simpletest_alter(&amp;$groups)</signature>
              <docrelurl>hook_simpletest_alter/7</docrelurl>
            </item>
            <item name= "hook_stream_wrappers">
              <description>Registers PHP stream wrapper implementations associated with a module. Provide a facility for managing and querying user-defined stream wrappers in PHP. PHP's internal stream_get_wrappers() doesn't return the class registered to handle a stream, which we need to be able to find the handler for class instantiation.</description>
              <signature>hook_stream_wrappers()</signature>
              <docrelurl>hook_stream_wrappers/7</docrelurl>
            </item>
            <item name= "hook_stream_wrappers_alter">
              <description>Alters the list of PHP stream wrapper implementations.</description>
              <signature>hook_stream_wrappers_alter(&amp;$wrappers)</signature>
              <docrelurl>hook_stream_wrappers_alter/7</docrelurl>
            </item>
            <item name= "hook_system_info_alter">
              <description>Alter the information parsed from module and theme .info files This hook is invoked in _system_rebuild_module_data() and in _system_rebuild_theme_data(). A module may implement this hook in order to add to or alter the data generated by reading the .info file with drupal_parse_info_file().</description>
              <signature>hook_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>hook_system_info_alter/7</docrelurl>
            </item>
            <item name= "hook_system_themes_page_alter">
              <description>Alters theme operation links.</description>
              <signature>hook_system_themes_page_alter(&amp;$theme_groups)</signature>
              <docrelurl>hook_system_themes_page_alter/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_term_delete">
              <description>Respond to the deletion of taxonomy terms. Modules implementing this hook can respond to the deletion of taxonomy terms from the database.</description>
              <signature>hook_taxonomy_term_delete($term)</signature>
              <docrelurl>hook_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_term_insert">
              <description>Act on taxonomy terms when inserted. Modules implementing this hook can act on the term object when saved to the database.</description>
              <signature>hook_taxonomy_term_insert($term)</signature>
              <docrelurl>hook_taxonomy_term_insert/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_term_load">
              <description>Act on taxonomy terms when loaded. Modules implementing this hook can act on the term objects returned by taxonomy_term_load_multiple().</description>
              <signature>hook_taxonomy_term_load($terms)</signature>
              <docrelurl>hook_taxonomy_term_load/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_term_presave">
              <description>Act on taxonomy terms before they are saved. Modules implementing this hook can act on the term object before it is inserted or updated.</description>
              <signature>hook_taxonomy_term_presave($term)</signature>
              <docrelurl>hook_taxonomy_term_presave/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_term_update">
              <description>Act on taxonomy terms when updated. Modules implementing this hook can act on the term object when updated.</description>
              <signature>hook_taxonomy_term_update($term)</signature>
              <docrelurl>hook_taxonomy_term_update/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_vocabulary_delete">
              <description>Respond to the deletion of taxonomy vocabularies. Modules implementing this hook can respond to the deletion of taxonomy vocabularies from the database.</description>
              <signature>hook_taxonomy_vocabulary_delete($vocabulary)</signature>
              <docrelurl>hook_taxonomy_vocabulary_delete/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_vocabulary_insert">
              <description>Act on taxonomy vocabularies when inserted. Modules implementing this hook can act on the vocabulary object when saved to the database.</description>
              <signature>hook_taxonomy_vocabulary_insert($vocabulary)</signature>
              <docrelurl>hook_taxonomy_vocabulary_insert/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_vocabulary_load">
              <description>Act on taxonomy vocabularies when loaded. Modules implementing this hook can act on the vocabulary objects before they are returned by taxonomy_vocabulary_load_multiple().</description>
              <signature>hook_taxonomy_vocabulary_load($vocabularies)</signature>
              <docrelurl>hook_taxonomy_vocabulary_load/7</docrelurl>
            </item>
            <item name= "hook_taxonomy_vocabulary_update">
              <description>Act on taxonomy vocabularies when updated. Modules implementing this hook can act on the vocabulary object when updated.</description>
              <signature>hook_taxonomy_vocabulary_update($vocabulary)</signature>
              <docrelurl>hook_taxonomy_vocabulary_update/7</docrelurl>
            </item>
            <item name= "hook_test_finished">
              <description>An individual test has finished. This hook is called when an individual test has finished.</description>
              <signature>hook_test_finished($results)</signature>
              <docrelurl>hook_test_finished/7</docrelurl>
            </item>
            <item name= "hook_test_group_finished">
              <description>A test group has finished. This hook is called just once at the end of a test group.</description>
              <signature>hook_test_group_finished()</signature>
              <docrelurl>hook_test_group_finished/7</docrelurl>
            </item>
            <item name= "hook_test_group_started">
              <description>A test group has started. This hook is called just once at the beginning of a test group.</description>
              <signature>hook_test_group_started()</signature>
              <docrelurl>hook_test_group_started/7</docrelurl>
            </item>
            <item name= "hook_theme">
              <description>Register a module (or theme's) theme implementations. The following parameters are all optional.</description>
              <signature>hook_theme($existing, $type, $theme, $path)</signature>
              <docrelurl>hook_theme/7</docrelurl>
            </item>
            <item name= "hook_themes_disabled">
              <description>Respond to themes being disabled.</description>
              <signature>hook_themes_disabled($theme_list)</signature>
              <docrelurl>hook_themes_disabled/7</docrelurl>
            </item>
            <item name= "hook_themes_enabled">
              <description>Respond to themes being enabled.</description>
              <signature>hook_themes_enabled($theme_list)</signature>
              <docrelurl>hook_themes_enabled/7</docrelurl>
            </item>
            <item name= "hook_theme_registry_alter">
              <description>Alter the theme registry information returned from hook_theme(). The theme registry stores information about all available theme hooks, including which callback functions those hooks will call when triggered, what template files are exposed by these hooks, and so on.</description>
              <signature>hook_theme_registry_alter(&amp;$theme_registry)</signature>
              <docrelurl>hook_theme_registry_alter/7</docrelurl>
            </item>
            <item name= "hook_tokens">
              <description>Provide replacement values for placeholder tokens.</description>
              <signature>hook_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>hook_tokens/7</docrelurl>
            </item>
            <item name= "hook_token_info">
              <description>Provide metadata about available placeholder tokens and token types.</description>
              <signature>hook_token_info()</signature>
              <docrelurl>hook_token_info/7</docrelurl>
            </item>
            <item name= "hook_token_info_alter">
              <description>Alter the metadata about available placeholder tokens and token types.</description>
              <signature>hook_token_info_alter(&amp;$data)</signature>
              <docrelurl>hook_token_info_alter/7</docrelurl>
            </item>
            <item name= "hook_translated_menu_link_alter">
              <description>Alter a menu link after it's translated, but before it's rendered. This hook may be used, for example, to add a page-specific query string. For performance reasons, only links that have $item['options']['alter'] == TRUE will be passed into this hook. The $item['options']['alter'] flag should generally be set using hook_menu_link_alter().</description>
              <signature>hook_translated_menu_link_alter(&amp;$item, $map)</signature>
              <docrelurl>hook_translated_menu_link_alter/7</docrelurl>
            </item>
            <item name= "hook_trigger_info">
              <description>Declare triggers (events) for users to assign actions to. This hook is used by the trigger module to create a list of triggers (events) that users can assign actions to. Your module is responsible for detecting that the events have occurred, calling trigger_get_assigned_actions() to find out which actions the user has associated with your trigger, and then calling actions_do() to fire off the actions.</description>
              <signature>hook_trigger_info()</signature>
              <docrelurl>hook_trigger_info/7</docrelurl>
            </item>
            <item name= "hook_trigger_info_alter">
              <description>Alter triggers declared by hook_trigger_info().</description>
              <signature>hook_trigger_info_alter(&amp;$triggers)</signature>
              <docrelurl>hook_trigger_info_alter/7</docrelurl>
            </item>
            <item name= "hook_uninstall">
              <description>Remove any information that the module sets. The information that the module should remove includes:</description>
              <signature>hook_uninstall()</signature>
              <docrelurl>hook_uninstall/7</docrelurl>
            </item>
            <item name= "hook_update">
              <description>Respond to updates to a node. This hook is invoked only on the module that defines the node's content type (use hook_node_update() to act on all node updates).</description>
              <signature>hook_update($node)</signature>
              <docrelurl>hook_update/7</docrelurl>
            </item>
            <item name= "hook_updater_info">
              <description>Provide information on Updaters (classes that can update Drupal). An Updater is a class that knows how to update various parts of the Drupal file system, for example to update modules that have newer releases, or to install a new theme.</description>
              <signature>hook_updater_info()</signature>
              <docrelurl>hook_updater_info/7</docrelurl>
            </item>
            <item name= "hook_updater_info_alter">
              <description>Alter the Updater information array. An Updater is a class that knows how to update various parts of the Drupal file system, for example to update modules that have newer releases, or to install a new theme.</description>
              <signature>hook_updater_info_alter(&amp;$updaters)</signature>
              <docrelurl>hook_updater_info_alter/7</docrelurl>
            </item>
            <item name= "hook_update_dependencies">
              <description>Return an array of information about module update dependencies. This can be used to indicate update functions from other modules that your module's update functions depend on, or vice versa. It is used by the update system to determine the appropriate order in which updates should be run, as well as to search for missing dependencies.</description>
              <signature>hook_update_dependencies()</signature>
              <docrelurl>hook_update_dependencies/7</docrelurl>
            </item>
            <item name= "hook_update_index">
              <description>Update the search index for this module. This hook is called every cron run if search.module is enabled, your module has implemented hook_search_info(), and your module has been set as an active search module on the Search settings page (admin/config/search/settings). It allows your module to add items to the built-in search index using search_index(), or to add them to your module's own indexing mechanism.</description>
              <signature>hook_update_index()</signature>
              <docrelurl>hook_update_index/7</docrelurl>
            </item>
            <item name= "hook_update_last_removed">
              <description>Return a number which is no longer available as hook_update_N(). If you remove some update functions from your mymodule.install file, you should notify Drupal of those missing functions. This way, Drupal can ensure that no update is accidentally skipped.</description>
              <signature>hook_update_last_removed()</signature>
              <docrelurl>hook_update_last_removed/7</docrelurl>
            </item>
            <item name= "hook_update_N">
              <description>Perform a single update. For each patch which requires a database change add a new hook_update_N() which will be called by update.php. The database updates are numbered sequentially according to the version of Drupal you are compatible with.</description>
              <signature>hook_update_N(&amp;$sandbox)</signature>
              <docrelurl>hook_update_N/7</docrelurl>
            </item>
            <item name= "hook_update_projects_alter">
              <description>Alter the list of projects before fetching data and comparing versions. Most modules will never need to implement this hook. It is for advanced interaction with the update status module: mere mortals need not apply. The primary use-case for this hook is to add projects to the list, for example, to provide update status data on disabled modules and themes. A contributed module might want to hide projects from the list, for example, if there is a site-specific module that doesn't have any official releases, that module could remove itself from this list to avoid "No available releases found" warnings on the available updates report. In rare cases, a module might want to alter the data associated with a project already in the list.</description>
              <signature>hook_update_projects_alter(&amp;$projects)</signature>
              <docrelurl>hook_update_projects_alter/7</docrelurl>
            </item>
            <item name= "hook_update_status_alter">
              <description>Alter the information about available updates for projects.</description>
              <signature>hook_update_status_alter(&amp;$projects)</signature>
              <docrelurl>hook_update_status_alter/7</docrelurl>
            </item>
            <item name= "hook_url_inbound_alter">
              <description>Alters inbound URL requests.</description>
              <signature>hook_url_inbound_alter(&amp;$path, $original_path, $path_language)</signature>
              <docrelurl>hook_url_inbound_alter/7</docrelurl>
            </item>
            <item name= "hook_url_outbound_alter">
              <description>Alters outbound URLs.</description>
              <signature>hook_url_outbound_alter(&amp;$path, &amp;$options, $original_path)</signature>
              <docrelurl>hook_url_outbound_alter/7</docrelurl>
            </item>
            <item name= "hook_username_alter">
              <description>Alter the username that is displayed for a user. Called by format_username() to allow modules to alter the username that's displayed. Can be used to ensure user privacy in situations where $account->name is too revealing.</description>
              <signature>hook_username_alter(&amp;$name, $account)</signature>
              <docrelurl>hook_username_alter/7</docrelurl>
            </item>
            <item name= "hook_user_cancel">
              <description>Act on user account cancellations. The user account is being canceled. Depending on the account cancellation method, the module should either do nothing, unpublish content, or anonymize content.</description>
              <signature>hook_user_cancel($edit, $account, $method)</signature>
              <docrelurl>hook_user_cancel/7</docrelurl>
            </item>
            <item name= "hook_user_cancel_methods_alter">
              <description>Modify account cancellation methods. By implementing this hook, modules are able to add, customize, or remove account cancellation methods. All defined methods are turned into radio button form elements by user_cancel_methods() after this hook is invoked. The following properties can be defined for each method:</description>
              <signature>hook_user_cancel_methods_alter(&amp;$methods)</signature>
              <docrelurl>hook_user_cancel_methods_alter/7</docrelurl>
            </item>
            <item name= "hook_user_categories">
              <description>Retrieve a list of user setting or profile information categories.</description>
              <signature>hook_user_categories()</signature>
              <docrelurl>hook_user_categories/7</docrelurl>
            </item>
            <item name= "hook_user_delete">
              <description>Respond to user deletion. This hook is invoked from user_delete_multiple() after the account has been removed from the user tables in the database, and before field_attach_delete() is called.</description>
              <signature>hook_user_delete($account)</signature>
              <docrelurl>hook_user_delete/7</docrelurl>
            </item>
            <item name= "hook_user_insert">
              <description>A user account was created. The module should save its custom additions to the user object into the database.</description>
              <signature>hook_user_insert(&amp;$edit, $account, $category)</signature>
              <docrelurl>hook_user_insert/7</docrelurl>
            </item>
            <item name= "hook_user_load">
              <description>Act on user objects when loaded from the database. Due to the static cache in user_load_multiple() you should not use this hook to modify the user properties returned by the {users} table itself since this may result in unreliable results when loading from cache.</description>
              <signature>hook_user_load($users)</signature>
              <docrelurl>hook_user_load/7</docrelurl>
            </item>
            <item name= "hook_user_login">
              <description>The user just logged in.</description>
              <signature>hook_user_login(&amp;$edit, $account)</signature>
              <docrelurl>hook_user_login/7</docrelurl>
            </item>
            <item name= "hook_user_logout">
              <description>The user just logged out.</description>
              <signature>hook_user_logout($account)</signature>
              <docrelurl>hook_user_logout/7</docrelurl>
            </item>
            <item name= "hook_user_operations">
              <description>Add mass user operations. This hook enables modules to inject custom operations into the mass operations dropdown found at admin/people, by associating a callback function with the operation, which is called when the form is submitted. The callback function receives one initial argument, which is an array of the checked users.</description>
              <signature>hook_user_operations()</signature>
              <docrelurl>hook_user_operations/7</docrelurl>
            </item>
            <item name= "hook_user_presave">
              <description>A user account is about to be created or updated. This hook is primarily intended for modules that want to store properties in the serialized {users}.data column, which is automatically loaded whenever a user account object is loaded, modules may add to $edit['data'] in order to have their data serialized on save.</description>
              <signature>hook_user_presave(&amp;$edit, $account, $category)</signature>
              <docrelurl>hook_user_presave/7</docrelurl>
            </item>
            <item name= "hook_user_role_delete">
              <description>Inform other modules that a user role has been deleted. This hook allows you act when a user role has been deleted. If your module stores references to roles, it's recommended that you implement this hook and delete existing instances of the deleted role in your module database tables.</description>
              <signature>hook_user_role_delete($role)</signature>
              <docrelurl>hook_user_role_delete/7</docrelurl>
            </item>
            <item name= "hook_user_role_insert">
              <description>Inform other modules that a user role has been added. Modules implementing this hook can act on the user role object when saved to the database. It's recommended that you implement this hook if your module adds additional data to user roles object. The module should save its custom additions to the database.</description>
              <signature>hook_user_role_insert($role)</signature>
              <docrelurl>hook_user_role_insert/7</docrelurl>
            </item>
            <item name= "hook_user_role_update">
              <description>Inform other modules that a user role has been updated. Modules implementing this hook can act on the user role object when updated. It's recommended that you implement this hook if your module adds additional data to user roles object. The module should save its custom additions to the database.</description>
              <signature>hook_user_role_update($role)</signature>
              <docrelurl>hook_user_role_update/7</docrelurl>
            </item>
            <item name= "hook_user_update">
              <description>A user account was updated. Modules may use this hook to update their user data in a custom storage after a user account has been updated.</description>
              <signature>hook_user_update(&amp;$edit, $account, $category)</signature>
              <docrelurl>hook_user_update/7</docrelurl>
            </item>
            <item name= "hook_user_view">
              <description>The user's account information is being displayed. The module should format its custom additions for display and add them to the $account->content array.</description>
              <signature>hook_user_view($account, $view_mode)</signature>
              <docrelurl>hook_user_view/7</docrelurl>
            </item>
            <item name= "hook_user_view_alter">
              <description>The user was built; the module may modify the structured content. This hook is called after the content has been assembled in a structured array and may be used for doing processing which requires that the complete user content structure has been built.</description>
              <signature>hook_user_view_alter(&amp;$build)</signature>
              <docrelurl>hook_user_view_alter/7</docrelurl>
            </item>
            <item name= "hook_validate">
              <description>Perform node validation before a node is created or updated. This hook is invoked only on the module that defines the node's content type (use hook_node_validate() to act on all node validations).</description>
              <signature>hook_validate($node, &amp;$form)</signature>
              <docrelurl>hook_validate/7</docrelurl>
            </item>
            <item name= "hook_verify_update_archive">
              <description>Verify an archive after it has been downloaded and extracted.</description>
              <signature>hook_verify_update_archive($project, $archive_file, $directory)</signature>
              <docrelurl>hook_verify_update_archive/7</docrelurl>
            </item>
            <item name= "hook_view">
              <description>Display a node. This is a hook used by node modules. It allows a module to define a custom method of displaying its nodes, usually by displaying extra information particular to that node type.</description>
              <signature>hook_view($node, $view_mode)</signature>
              <docrelurl>hook_view/7</docrelurl>
            </item>
            <item name= "hook_watchdog">
              <description>Log an event message This hook allows modules to route log events to custom destinations, such as SMS, Email, pager, syslog, ...etc.</description>
              <signature>hook_watchdog(array $log_entry)</signature>
              <docrelurl>hook_watchdog/7</docrelurl>
            </item>
            <item name= "hook_xmlrpc">
              <description>Register XML-RPC callbacks. This hook lets a module register callback functions to be called when particular XML-RPC methods are invoked by a client.</description>
              <signature>hook_xmlrpc()</signature>
              <docrelurl>hook_xmlrpc/7</docrelurl>
            </item>
            <item name= "hook_xmlrpc_alter">
              <description>Alter the definition of XML-RPC methods before they are called. This hook lets at module modify the callback definition for already declared XML-RPC methods, when they are being invoked by a client.</description>
              <signature>hook_xmlrpc_alter(&amp;$methods)</signature>
              <docrelurl>hook_xmlrpc_alter/7</docrelurl>
            </item>
            <item name= "image_crop">
              <description>Crop an image to the rectangle specified by the given rectangle.</description>
              <signature>image_crop(stdClass $image, $x, $y, $width, $height)</signature>
              <docrelurl>image_crop/7</docrelurl>
            </item>
            <item name= "image_crop_effect">
              <description>Image effect callback; Crop an image resource.</description>
              <signature>image_crop_effect(&amp;$image, $data)</signature>
              <docrelurl>image_crop_effect/7</docrelurl>
            </item>
            <item name= "image_crop_form">
              <description>Form structure for the image crop form. Note that this is not a complete form, it only contains the portion of the form for configuring the crop options. Therefore it does not not need to include metadata about the effect, nor a submit button.</description>
              <signature>image_crop_form($data)</signature>
              <docrelurl>image_crop_form/7</docrelurl>
            </item>
            <item name= "image_default_style_revert">
              <description>Revert the changes made by users to a default image style.</description>
              <signature>image_default_style_revert($style)</signature>
              <docrelurl>image_default_style_revert/7</docrelurl>
            </item>
            <item name= "image_default_style_save">
              <description>Save a default image style to the database.</description>
              <signature>image_default_style_save($style)</signature>
              <docrelurl>image_default_style_save/7</docrelurl>
            </item>
            <item name= "image_desaturate">
              <description>Convert an image to grayscale.</description>
              <signature>image_desaturate(stdClass $image)</signature>
              <docrelurl>image_desaturate/7</docrelurl>
            </item>
            <item name= "image_desaturate_effect">
              <description>Image effect callback; Desaturate (grayscale) an image resource.</description>
              <signature>image_desaturate_effect(&amp;$image, $data)</signature>
              <docrelurl>image_desaturate_effect/7</docrelurl>
            </item>
            <item name= "image_effects">
              <description>Load all image effects from the database.</description>
              <signature>image_effects()</signature>
              <docrelurl>image_effects/7</docrelurl>
            </item>
            <item name= "image_effect_apply">
              <description>Given an image object and effect, perform the effect on the file.</description>
              <signature>image_effect_apply($image, $effect)</signature>
              <docrelurl>image_effect_apply/7</docrelurl>
            </item>
            <item name= "image_effect_color_validate">
              <description>Element validate handler to ensure a hexadecimal color value.</description>
              <signature>image_effect_color_validate($element, &amp;$form_state)</signature>
              <docrelurl>image_effect_color_validate/7</docrelurl>
            </item>
            <item name= "image_effect_definitions">
              <description>Pull in image effects exposed by modules implementing hook_image_effect_info().</description>
              <signature>image_effect_definitions()</signature>
              <docrelurl>image_effect_definitions/7</docrelurl>
            </item>
            <item name= "image_effect_definition_load">
              <description>Load the definition for an image effect. The effect definition is a set of core properties for an image effect, not containing any user-settings. The definition defines various functions to call when configuring or executing an image effect. This loader is mostly for internal use within image.module. Use image_effect_load() or image_style_load() to get image effects that contain configuration.</description>
              <signature>image_effect_definition_load($effect, $style_name = NULL)</signature>
              <docrelurl>image_effect_definition_load/7</docrelurl>
            </item>
            <item name= "image_effect_delete">
              <description>Delete an image effect.</description>
              <signature>image_effect_delete($effect)</signature>
              <docrelurl>image_effect_delete/7</docrelurl>
            </item>
            <item name= "image_effect_delete_form">
              <description>Form builder; Form for deleting an image effect.</description>
              <signature>image_effect_delete_form($form, &amp;$form_state, $style, $effect)</signature>
              <docrelurl>image_effect_delete_form/7</docrelurl>
            </item>
            <item name= "image_effect_delete_form_submit">
              <description>Submit handler to delete an image effect.</description>
              <signature>image_effect_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_effect_delete_form_submit/7</docrelurl>
            </item>
            <item name= "image_effect_form">
              <description>Form builder; Form for adding and editing image effects. This form is used universally for editing all image effects. Each effect adds its own custom section to the form by calling the form function specified in hook_image_effects().</description>
              <signature>image_effect_form($form, &amp;$form_state, $style, $effect)</signature>
              <docrelurl>image_effect_form/7</docrelurl>
            </item>
            <item name= "image_effect_form_submit">
              <description>Submit handler for updating an image effect.</description>
              <signature>image_effect_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_effect_form_submit/7</docrelurl>
            </item>
            <item name= "image_effect_integer_validate">
              <description>Element validate handler to ensure an integer pixel value. The property #allow_negative = TRUE may be set to allow negative integers.</description>
              <signature>image_effect_integer_validate($element, &amp;$form_state)</signature>
              <docrelurl>image_effect_integer_validate/7</docrelurl>
            </item>
            <item name= "image_effect_load">
              <description>Load a single image effect.</description>
              <signature>image_effect_load($ieid, $style_name, $include = NULL)</signature>
              <docrelurl>image_effect_load/7</docrelurl>
            </item>
            <item name= "image_effect_save">
              <description>Save an image effect.</description>
              <signature>image_effect_save($effect)</signature>
              <docrelurl>image_effect_save/7</docrelurl>
            </item>
            <item name= "image_effect_scale_validate">
              <description>Element validate handler to ensure that either a height or a width is specified.</description>
              <signature>image_effect_scale_validate($element, &amp;$form_state)</signature>
              <docrelurl>image_effect_scale_validate/7</docrelurl>
            </item>
            <item name= "image_field_delete">
              <description>Implements hook_field_delete().</description>
              <signature>image_field_delete($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>image_field_delete/7</docrelurl>
            </item>
            <item name= "image_field_delete_revision">
              <description>Implements hook_field_delete_revision().</description>
              <signature>image_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>image_field_delete_revision/7</docrelurl>
            </item>
            <item name= "image_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>image_field_formatter_info()</signature>
              <docrelurl>image_field_formatter_info/7</docrelurl>
            </item>
            <item name= "image_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>image_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>image_field_formatter_view/7</docrelurl>
            </item>
            <item name= "image_field_info">
              <description>Implements hook_field_info().</description>
              <signature>image_field_info()</signature>
              <docrelurl>image_field_info/7</docrelurl>
            </item>
            <item name= "image_field_instance_settings_form">
              <description>Implements hook_field_instance_settings_form().</description>
              <signature>image_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>image_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "image_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>image_field_is_empty($item, $field)</signature>
              <docrelurl>image_field_is_empty/7</docrelurl>
            </item>
            <item name= "image_field_load">
              <description>Implements hook_field_load().</description>
              <signature>image_field_load($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $age)</signature>
              <docrelurl>image_field_load/7</docrelurl>
            </item>
            <item name= "image_field_prepare_view">
              <description>Implements hook_field_prepare_view().</description>
              <signature>image_field_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items)</signature>
              <docrelurl>image_field_prepare_view/7</docrelurl>
            </item>
            <item name= "image_field_presave">
              <description>Implements hook_field_presave().</description>
              <signature>image_field_presave($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>image_field_presave/7</docrelurl>
            </item>
            <item name= "image_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>image_field_schema($field)</signature>
              <docrelurl>image_field_schema/7</docrelurl>
            </item>
            <item name= "image_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>image_field_settings_form($field, $instance)</signature>
              <docrelurl>image_field_settings_form/7</docrelurl>
            </item>
            <item name= "image_field_update">
              <description>Implements hook_field_update().</description>
              <signature>image_field_update($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>image_field_update/7</docrelurl>
            </item>
            <item name= "image_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>image_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>image_field_widget_form/7</docrelurl>
            </item>
            <item name= "image_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>image_field_widget_info()</signature>
              <docrelurl>image_field_widget_info/7</docrelurl>
            </item>
            <item name= "image_field_widget_process">
              <description>An element #process callback for the image_image field type. Expands the image_image type to include the alt and title fields.</description>
              <signature>image_field_widget_process($element, &amp;$form_state, $form)</signature>
              <docrelurl>image_field_widget_process/7</docrelurl>
            </item>
            <item name= "image_field_widget_settings_form">
              <description>Implements hook_field_widget_settings_form().</description>
              <signature>image_field_widget_settings_form($field, $instance)</signature>
              <docrelurl>image_field_widget_settings_form/7</docrelurl>
            </item>
            <item name= "image_file_delete">
              <description>Implements hook_file_delete().</description>
              <signature>image_file_delete($file)</signature>
              <docrelurl>image_file_delete/7</docrelurl>
            </item>
            <item name= "image_file_download">
              <description>Implements hook_file_download(). Control the access to files underneath the styles directory.</description>
              <signature>image_file_download($uri)</signature>
              <docrelurl>image_file_download/7</docrelurl>
            </item>
            <item name= "image_file_move">
              <description>Implements hook_file_move().</description>
              <signature>image_file_move($file, $source)</signature>
              <docrelurl>image_file_move/7</docrelurl>
            </item>
            <item name= "image_file_references">
              <description>Implements hook_file_references().</description>
              <signature>image_file_references($file)</signature>
              <docrelurl>image_file_references/7</docrelurl>
            </item>
            <item name= "image_filter_keyword">
              <description>Accept a keyword (center, top, left, etc) and return it as a pixel offset.</description>
              <signature>image_filter_keyword($value, $current_pixels, $new_pixels)</signature>
              <docrelurl>image_filter_keyword/7</docrelurl>
            </item>
            <item name= "image_filter_percent">
              <description>Accept a percentage and return it in pixels.</description>
              <signature>image_filter_percent($value, $current_pixels)</signature>
              <docrelurl>image_filter_percent/7</docrelurl>
            </item>
            <item name= "image_flush_caches">
              <description>Implements hook_flush_caches().</description>
              <signature>image_flush_caches()</signature>
              <docrelurl>image_flush_caches/7</docrelurl>
            </item>
            <item name= "image_gd_check_settings">
              <description>Verify GD2 settings (that the right version is actually installed).</description>
              <signature>image_gd_check_settings()</signature>
              <docrelurl>image_gd_check_settings/7</docrelurl>
            </item>
            <item name= "image_gd_create_tmp">
              <description>Create a truecolor image preserving transparency from a provided image.</description>
              <signature>image_gd_create_tmp(stdClass $image, $width, $height)</signature>
              <docrelurl>image_gd_create_tmp/7</docrelurl>
            </item>
            <item name= "image_gd_crop">
              <description>Crop an image using the GD toolkit.</description>
              <signature>image_gd_crop(stdClass $image, $x, $y, $width, $height)</signature>
              <docrelurl>image_gd_crop/7</docrelurl>
            </item>
            <item name= "image_gd_desaturate">
              <description>Convert an image resource to grayscale. Note that transparent GIFs loose transparency when desaturated.</description>
              <signature>image_gd_desaturate(stdClass $image)</signature>
              <docrelurl>image_gd_desaturate/7</docrelurl>
            </item>
            <item name= "image_gd_get_info">
              <description>Get details about an image.</description>
              <signature>image_gd_get_info(stdClass $image)</signature>
              <docrelurl>image_gd_get_info/7</docrelurl>
            </item>
            <item name= "image_gd_load">
              <description>GD helper function to create an image resource from a file.</description>
              <signature>image_gd_load(stdClass $image)</signature>
              <docrelurl>image_gd_load/7</docrelurl>
            </item>
            <item name= "image_gd_resize">
              <description>Scale an image to the specified size using GD.</description>
              <signature>image_gd_resize(stdClass $image, $width, $height)</signature>
              <docrelurl>image_gd_resize/7</docrelurl>
            </item>
            <item name= "image_gd_rotate">
              <description>Rotate an image the given number of degrees.</description>
              <signature>image_gd_rotate(stdClass $image, $degrees, $background = NULL)</signature>
              <docrelurl>image_gd_rotate/7</docrelurl>
            </item>
            <item name= "image_gd_save">
              <description>GD helper to write an image resource to a destination file.</description>
              <signature>image_gd_save(stdClass $image, $destination)</signature>
              <docrelurl>image_gd_save/7</docrelurl>
            </item>
            <item name= "image_gd_settings">
              <description>Retrieve settings for the GD2 toolkit.</description>
              <signature>image_gd_settings()</signature>
              <docrelurl>image_gd_settings/7</docrelurl>
            </item>
            <item name= "image_gd_settings_validate">
              <description>Validate the submitted GD settings.</description>
              <signature>image_gd_settings_validate($form, &amp;$form_state)</signature>
              <docrelurl>image_gd_settings_validate/7</docrelurl>
            </item>
            <item name= "image_get_available_toolkits">
              <description>Return a list of available toolkits.</description>
              <signature>image_get_available_toolkits()</signature>
              <docrelurl>image_get_available_toolkits/7</docrelurl>
            </item>
            <item name= "image_get_info">
              <description>Get details about an image. Drupal supports GIF, JPG and PNG file formats when used with the GD toolkit, and may support others, depending on which toolkits are installed.</description>
              <signature>image_get_info($filepath, $toolkit = FALSE)</signature>
              <docrelurl>image_get_info/7</docrelurl>
            </item>
            <item name= "image_get_toolkit">
              <description>Retrieve the name of the currently used toolkit.</description>
              <signature>image_get_toolkit()</signature>
              <docrelurl>image_get_toolkit/7</docrelurl>
            </item>
            <item name= "image_help">
              <description>Implement of hook_help().</description>
              <signature>image_help($path, $arg)</signature>
              <docrelurl>image_help/7</docrelurl>
            </item>
            <item name= "image_image_default_styles">
              <description>Implements hook_image_default_styles().</description>
              <signature>image_image_default_styles()</signature>
              <docrelurl>image_image_default_styles/7</docrelurl>
            </item>
            <item name= "image_image_effect_info">
              <description>Implements hook_image_effect_info().</description>
              <signature>image_image_effect_info()</signature>
              <docrelurl>image_image_effect_info/7</docrelurl>
            </item>
            <item name= "image_image_style_delete">
              <description>Implements hook_image_style_delete().</description>
              <signature>image_image_style_delete($style)</signature>
              <docrelurl>image_image_style_delete/7</docrelurl>
            </item>
            <item name= "image_image_style_save">
              <description>Implements hook_image_style_save().</description>
              <signature>image_image_style_save($style)</signature>
              <docrelurl>image_image_style_save/7</docrelurl>
            </item>
            <item name= "image_install">
              <description>Implements hook_install().</description>
              <signature>image_install()</signature>
              <docrelurl>image_install/7</docrelurl>
            </item>
            <item name= "image_load">
              <description>Load an image file and return an image object. Any changes to the file are not saved until image_save() is called.</description>
              <signature>image_load($file, $toolkit = FALSE)</signature>
              <docrelurl>image_load/7</docrelurl>
            </item>
            <item name= "image_menu">
              <description>Implements hook_menu().</description>
              <signature>image_menu()</signature>
              <docrelurl>image_menu/7</docrelurl>
            </item>
            <item name= "image_path_flush">
              <description>Clear cached versions of a specific file in all styles.</description>
              <signature>image_path_flush($path)</signature>
              <docrelurl>image_path_flush/7</docrelurl>
            </item>
            <item name= "image_permission">
              <description>Implements hook_permission().</description>
              <signature>image_permission()</signature>
              <docrelurl>image_permission/7</docrelurl>
            </item>
            <item name= "image_requirements">
              <description>Implements hook_requirements() to check the PHP GD Library.</description>
              <signature>image_requirements($phase)</signature>
              <docrelurl>image_requirements/7</docrelurl>
            </item>
            <item name= "image_resize">
              <description>Resize an image to the given dimensions (ignoring aspect ratio).</description>
              <signature>image_resize(stdClass $image, $width, $height)</signature>
              <docrelurl>image_resize/7</docrelurl>
            </item>
            <item name= "image_resize_effect">
              <description>Image effect callback; Resize an image resource.</description>
              <signature>image_resize_effect(&amp;$image, $data)</signature>
              <docrelurl>image_resize_effect/7</docrelurl>
            </item>
            <item name= "image_resize_form">
              <description>Form structure for the image resize form. Note that this is not a complete form, it only contains the portion of the form for configuring the resize options. Therefore it does not not need to include metadata about the effect, nor a submit button.</description>
              <signature>image_resize_form($data)</signature>
              <docrelurl>image_resize_form/7</docrelurl>
            </item>
            <item name= "image_rotate">
              <description>Rotate an image by the given number of degrees.</description>
              <signature>image_rotate(stdClass $image, $degrees, $background = NULL)</signature>
              <docrelurl>image_rotate/7</docrelurl>
            </item>
            <item name= "image_rotate_effect">
              <description>Image effect callback; Rotate an image resource.</description>
              <signature>image_rotate_effect(&amp;$image, $data)</signature>
              <docrelurl>image_rotate_effect/7</docrelurl>
            </item>
            <item name= "image_rotate_form">
              <description>Form structure for the image rotate form. Note that this is not a complete form, it only contains the portion of the form for configuring the rotate options. Therefore it does not not need to include metadata about the effect, nor a submit button.</description>
              <signature>image_rotate_form($data)</signature>
              <docrelurl>image_rotate_form/7</docrelurl>
            </item>
            <item name= "image_save">
              <description>Close the image and save the changes to a file.</description>
              <signature>image_save(stdClass $image, $destination = NULL)</signature>
              <docrelurl>image_save/7</docrelurl>
            </item>
            <item name= "image_scale">
              <description>Scales an image to the given width and height while maintaining aspect ratio. The resulting image can be smaller for one or both target dimensions.</description>
              <signature>image_scale(stdClass $image, $width = NULL, $height = NULL, $upscale = FALSE)</signature>
              <docrelurl>image_scale/7</docrelurl>
            </item>
            <item name= "image_scale_and_crop">
              <description>Scales an image to the exact width and height given. This function achieves the target aspect ratio by cropping the original image equally on both sides, or equally on the top and bottom. This function is useful to create uniform sized avatars from larger images.</description>
              <signature>image_scale_and_crop(stdClass $image, $width, $height)</signature>
              <docrelurl>image_scale_and_crop/7</docrelurl>
            </item>
            <item name= "image_scale_and_crop_effect">
              <description>Image effect callback; Scale and crop an image resource.</description>
              <signature>image_scale_and_crop_effect(&amp;$image, $data)</signature>
              <docrelurl>image_scale_and_crop_effect/7</docrelurl>
            </item>
            <item name= "image_scale_effect">
              <description>Image effect callback; Scale an image resource.</description>
              <signature>image_scale_effect(&amp;$image, $data)</signature>
              <docrelurl>image_scale_effect/7</docrelurl>
            </item>
            <item name= "image_scale_form">
              <description>Form structure for the image scale form. Note that this is not a complete form, it only contains the portion of the form for configuring the scale options. Therefore it does not not need to include metadata about the effect, nor a submit button.</description>
              <signature>image_scale_form($data)</signature>
              <docrelurl>image_scale_form/7</docrelurl>
            </item>
            <item name= "image_schema">
              <description>Implements hook_schema().</description>
              <signature>image_schema()</signature>
              <docrelurl>image_schema/7</docrelurl>
            </item>
            <item name= "image_styles">
              <description>Get an array of all styles and their settings.</description>
              <signature>image_styles()</signature>
              <docrelurl>image_styles/7</docrelurl>
            </item>
            <item name= "image_style_add_form">
              <description>Form builder; Form for adding a new image style.</description>
              <signature>image_style_add_form($form, &amp;$form_state)</signature>
              <docrelurl>image_style_add_form/7</docrelurl>
            </item>
            <item name= "image_style_add_form_submit">
              <description>Submit handler for adding a new image style.</description>
              <signature>image_style_add_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_add_form_submit/7</docrelurl>
            </item>
            <item name= "image_style_create_derivative">
              <description>Create a new image based on an image style.</description>
              <signature>image_style_create_derivative($style, $source, $destination)</signature>
              <docrelurl>image_style_create_derivative/7</docrelurl>
            </item>
            <item name= "image_style_delete">
              <description>Delete an image style.</description>
              <signature>image_style_delete($style, $replacement_style_name = '')</signature>
              <docrelurl>image_style_delete/7</docrelurl>
            </item>
            <item name= "image_style_delete_form">
              <description>Form builder; Form for deleting an image style.</description>
              <signature>image_style_delete_form($form, $form_state, $style)</signature>
              <docrelurl>image_style_delete_form/7</docrelurl>
            </item>
            <item name= "image_style_delete_form_submit">
              <description>Submit handler to delete an image style.</description>
              <signature>image_style_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_delete_form_submit/7</docrelurl>
            </item>
            <item name= "image_style_effects">
              <description>Load all the effects for an image style.</description>
              <signature>image_style_effects($style)</signature>
              <docrelurl>image_style_effects/7</docrelurl>
            </item>
            <item name= "image_style_flush">
              <description>Flush cached media for a style.</description>
              <signature>image_style_flush($style)</signature>
              <docrelurl>image_style_flush/7</docrelurl>
            </item>
            <item name= "image_style_form">
              <description>Form builder; Edit an image style name and effects order.</description>
              <signature>image_style_form($form, &amp;$form_state, $style)</signature>
              <docrelurl>image_style_form/7</docrelurl>
            </item>
            <item name= "image_style_form_add_submit">
              <description>Submit handler for adding a new image effect to an image style.</description>
              <signature>image_style_form_add_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_form_add_submit/7</docrelurl>
            </item>
            <item name= "image_style_form_add_validate">
              <description>Validate handler for adding a new image effect to an image style.</description>
              <signature>image_style_form_add_validate($form, &amp;$form_state)</signature>
              <docrelurl>image_style_form_add_validate/7</docrelurl>
            </item>
            <item name= "image_style_form_override_submit">
              <description>Submit handler for overriding a module-defined style.</description>
              <signature>image_style_form_override_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_form_override_submit/7</docrelurl>
            </item>
            <item name= "image_style_form_submit">
              <description>Submit handler for saving an image style.</description>
              <signature>image_style_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_form_submit/7</docrelurl>
            </item>
            <item name= "image_style_generate">
              <description>Menu callback; Given a style and image path, generate a derivative. This menu callback is always served after checking a token to prevent generation of unnecessary images. After generating an image transfer it to the requesting agent via file_transfer().</description>
              <signature>image_style_generate()</signature>
              <docrelurl>image_style_generate/7</docrelurl>
            </item>
            <item name= "image_style_list">
              <description>Menu callback; Listing of all current image styles.</description>
              <signature>image_style_list()</signature>
              <docrelurl>image_style_list/7</docrelurl>
            </item>
            <item name= "image_style_load">
              <description>Load a style by style name or ID. May be used as a loader for menu items.</description>
              <signature>image_style_load($name = NULL, $isid = NULL, $include = NULL)</signature>
              <docrelurl>image_style_load/7</docrelurl>
            </item>
            <item name= "image_style_name_validate">
              <description>Element validate function to ensure unique, URL safe style names.</description>
              <signature>image_style_name_validate($element, $form_state)</signature>
              <docrelurl>image_style_name_validate/7</docrelurl>
            </item>
            <item name= "image_style_options">
              <description>Get an array of image styles suitable for using as select list options.</description>
              <signature>image_style_options($include_empty = TRUE)</signature>
              <docrelurl>image_style_options/7</docrelurl>
            </item>
            <item name= "image_style_path">
              <description>Return the URI of an image when using a style. The path returned by this function may not exist. The default generation method only creates images when they are requested by a user's browser.</description>
              <signature>image_style_path($style_name, $uri)</signature>
              <docrelurl>image_style_path/7</docrelurl>
            </item>
            <item name= "image_style_revert_form">
              <description>Confirmation form to revert a database style to its default.</description>
              <signature>image_style_revert_form($form, $form_state, $style)</signature>
              <docrelurl>image_style_revert_form/7</docrelurl>
            </item>
            <item name= "image_style_revert_form_submit">
              <description>Submit handler to convert an overridden style to its default.</description>
              <signature>image_style_revert_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>image_style_revert_form_submit/7</docrelurl>
            </item>
            <item name= "image_style_save">
              <description>Save an image style.</description>
              <signature>image_style_save($style)</signature>
              <docrelurl>image_style_save/7</docrelurl>
            </item>
            <item name= "image_style_url">
              <description>Return the URL for an image derivative given a style and image path. This function is the default image generation method. It returns a URL for an image that can be used in an &lt;img&gt; tag. When the browser requests the image at image/generate/[style_name]/[scheme]/[path] the image is generated if it does not already exist and then served to the browser. This allows each image to have its own PHP instance (and memory limit) for generation of the new image.</description>
              <signature>image_style_url($style_name, $path)</signature>
              <docrelurl>image_style_url/7</docrelurl>
            </item>
            <item name= "image_test_crop">
              <description>Image tookit's crop operation.</description>
              <signature>image_test_crop(stdClass $image, $x, $y, $width, $height)</signature>
              <docrelurl>image_test_crop/7</docrelurl>
            </item>
            <item name= "image_test_desaturate">
              <description>Image tookit's desaturate operation.</description>
              <signature>image_test_desaturate(stdClass $image)</signature>
              <docrelurl>image_test_desaturate/7</docrelurl>
            </item>
            <item name= "image_test_get_all_calls">
              <description>Get an array with the all the calls to the toolkits since image_test_reset() was called.</description>
              <signature>image_test_get_all_calls()</signature>
              <docrelurl>image_test_get_all_calls/7</docrelurl>
            </item>
            <item name= "image_test_get_info">
              <description>Image toolkit's get_info operation.</description>
              <signature>image_test_get_info(stdClass $image)</signature>
              <docrelurl>image_test_get_info/7</docrelurl>
            </item>
            <item name= "image_test_image_toolkits">
              <description>Implements hook_image_toolkits().</description>
              <signature>image_test_image_toolkits()</signature>
              <docrelurl>image_test_image_toolkits/7</docrelurl>
            </item>
            <item name= "image_test_load">
              <description>Image tookit's load operation.</description>
              <signature>image_test_load(stdClass $image)</signature>
              <docrelurl>image_test_load/7</docrelurl>
            </item>
            <item name= "image_test_reset">
              <description>Reset/initialize the history of calls to the toolkit functions.</description>
              <signature>image_test_reset()</signature>
              <docrelurl>image_test_reset/7</docrelurl>
            </item>
            <item name= "image_test_resize">
              <description>Image tookit's resize operation.</description>
              <signature>image_test_resize(stdClass $image, $width, $height)</signature>
              <docrelurl>image_test_resize/7</docrelurl>
            </item>
            <item name= "image_test_rotate">
              <description>Image tookit's rotate operation.</description>
              <signature>image_test_rotate(stdClass $image, $degrees, $background = NULL)</signature>
              <docrelurl>image_test_rotate/7</docrelurl>
            </item>
            <item name= "image_test_save">
              <description>Image tookit's save operation.</description>
              <signature>image_test_save(stdClass $image, $destination)</signature>
              <docrelurl>image_test_save/7</docrelurl>
            </item>
            <item name= "image_test_settings">
              <description>Image tookit's settings operation.</description>
              <signature>image_test_settings()</signature>
              <docrelurl>image_test_settings/7</docrelurl>
            </item>
            <item name= "image_theme">
              <description>Implements hook_theme().</description>
              <signature>image_theme()</signature>
              <docrelurl>image_theme/7</docrelurl>
            </item>
            <item name= "image_toolkit_invoke">
              <description>Invokes the given method using the currently selected toolkit.</description>
              <signature>image_toolkit_invoke($method, stdClass $image, array $params = array())</signature>
              <docrelurl>image_toolkit_invoke/7</docrelurl>
            </item>
            <item name= "image_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>image_uninstall()</signature>
              <docrelurl>image_uninstall/7</docrelurl>
            </item>
            <item name= "image_update_7000">
              <description>Install the schema for users upgrading from the contributed module.</description>
              <signature>image_update_7000()</signature>
              <docrelurl>image_update_7000/7</docrelurl>
            </item>
            <item name= "install_already_done_error">
              <description>Indicates that Drupal has already been installed.</description>
              <signature>install_already_done_error()</signature>
              <docrelurl>install_already_done_error/7</docrelurl>
            </item>
            <item name= "install_begin_request">
              <description>Begin an installation request, modifying the installation state as needed. This function performs commands that must run at the beginning of every page request. It throws an exception if the installation should not proceed.</description>
              <signature>install_begin_request(&amp;$install_state)</signature>
              <docrelurl>install_begin_request/7</docrelurl>
            </item>
            <item name= "install_bootstrap_full">
              <description>Installation task; perform a full bootstrap of Drupal.</description>
              <signature>install_bootstrap_full(&amp;$install_state)</signature>
              <docrelurl>install_bootstrap_full/7</docrelurl>
            </item>
            <item name= "install_check_requirements">
              <description>Checks installation requirements and reports any errors.</description>
              <signature>install_check_requirements($install_state)</signature>
              <docrelurl>install_check_requirements/7</docrelurl>
            </item>
            <item name= "install_configure_form">
              <description>Installation task; configure settings for the new site.</description>
              <signature>install_configure_form($form, &amp;$form_state, &amp;$install_state)</signature>
              <docrelurl>install_configure_form/7</docrelurl>
            </item>
            <item name= "install_configure_form_submit">
              <description>Forms API submit for the site configuration form.</description>
              <signature>install_configure_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>install_configure_form_submit/7</docrelurl>
            </item>
            <item name= "install_configure_form_validate">
              <description>Forms API validate for the site configuration form.</description>
              <signature>install_configure_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>install_configure_form_validate/7</docrelurl>
            </item>
            <item name= "install_database_errors">
              <description>Checks a database connection and returns any errors.</description>
              <signature>install_database_errors($database, $settings_file)</signature>
              <docrelurl>install_database_errors/7</docrelurl>
            </item>
            <item name= "install_display_output">
              <description>Displays themed installer output and ends the page request. Installation tasks should use drupal_set_title() to set the desired page title, but otherwise this function takes care of theming the overall page output during every step of the installation.</description>
              <signature>install_display_output($output, $install_state)</signature>
              <docrelurl>install_display_output/7</docrelurl>
            </item>
            <item name= "install_drupal">
              <description>Installs Drupal either interactively or via an array of passed-in settings. The Drupal installation happens in a series of steps, which may be spread out over multiple page requests. Each request begins by trying to determine the last completed installation step (also known as a "task"), if one is available from a previous request. Control is then passed to the task handler, which processes the remaining tasks that need to be run until (a) an error is thrown, (b) a new page needs to be displayed, or (c) the installation finishes (whichever happens first).</description>
              <signature>install_drupal($settings = array())</signature>
              <docrelurl>install_drupal/7</docrelurl>
            </item>
            <item name= "install_find_locales">
              <description>Find all .po files for the current profile.</description>
              <signature>install_find_locales($profilename)</signature>
              <docrelurl>install_find_locales/7</docrelurl>
            </item>
            <item name= "install_find_profiles">
              <description>Finds all .profile files.</description>
              <signature>install_find_profiles()</signature>
              <docrelurl>install_find_profiles/7</docrelurl>
            </item>
            <item name= "install_finished">
              <description>Installation task; perform final steps and display a 'finished' page.</description>
              <signature>install_finished(&amp;$install_state)</signature>
              <docrelurl>install_finished/7</docrelurl>
            </item>
            <item name= "install_full_redirect_url">
              <description>Returns the complete URL redirected to during an installation request.</description>
              <signature>install_full_redirect_url($install_state)</signature>
              <docrelurl>install_full_redirect_url/7</docrelurl>
            </item>
            <item name= "install_goto">
              <description>Send the user to a different installer page. This issues an on-site HTTP redirect. Messages (and errors) are erased.</description>
              <signature>install_goto($path)</signature>
              <docrelurl>install_goto/7</docrelurl>
            </item>
            <item name= "install_import_locales">
              <description>Installation task; import languages via a batch process.</description>
              <signature>install_import_locales(&amp;$install_state)</signature>
              <docrelurl>install_import_locales/7</docrelurl>
            </item>
            <item name= "install_import_locales_remaining">
              <description>Installation task; import remaining languages via a batch process.</description>
              <signature>install_import_locales_remaining(&amp;$install_state)</signature>
              <docrelurl>install_import_locales_remaining/7</docrelurl>
            </item>
            <item name= "install_load_profile">
              <description>Installation task; load information about the chosen profile.</description>
              <signature>install_load_profile(&amp;$install_state)</signature>
              <docrelurl>install_load_profile/7</docrelurl>
            </item>
            <item name= "install_no_profile_error">
              <description>Indicates that there are no profiles available.</description>
              <signature>install_no_profile_error()</signature>
              <docrelurl>install_no_profile_error/7</docrelurl>
            </item>
            <item name= "install_profile_info">
              <description>Retrieve info about an install profile from its .info file. The information stored in a profile .info file is similar to that stored in a normal Drupal module .info file. For example:</description>
              <signature>install_profile_info($profile, $locale = 'en')</signature>
              <docrelurl>install_profile_info/7</docrelurl>
            </item>
            <item name= "install_profile_modules">
              <description>Installation task; install required modules via a batch process.</description>
              <signature>install_profile_modules(&amp;$install_state)</signature>
              <docrelurl>install_profile_modules/7</docrelurl>
            </item>
            <item name= "install_redirect_url">
              <description>Returns the URL that should be redirected to during an installation request. The output of this function is suitable for sending to install_goto().</description>
              <signature>install_redirect_url($install_state)</signature>
              <docrelurl>install_redirect_url/7</docrelurl>
            </item>
            <item name= "install_run_task">
              <description>Runs an individual installation task.</description>
              <signature>install_run_task($task, &amp;$install_state)</signature>
              <docrelurl>install_run_task/7</docrelurl>
            </item>
            <item name= "install_run_tasks">
              <description>Runs all tasks for the current installation request. In the case of an interactive installation, all tasks will be attempted until one is reached that has output which needs to be displayed to the user, or until a page redirect is required. Otherwise, tasks will be attempted until the installation is finished.</description>
              <signature>install_run_tasks(&amp;$install_state)</signature>
              <docrelurl>install_run_tasks/7</docrelurl>
            </item>
            <item name= "install_select_locale">
              <description>Installation task; select which locale to use for the current profile.</description>
              <signature>install_select_locale(&amp;$install_state)</signature>
              <docrelurl>install_select_locale/7</docrelurl>
            </item>
            <item name= "install_select_locale_form">
              <description>Form API array definition for language selection.</description>
              <signature>install_select_locale_form($form, &amp;$form_state, $locales, $profilename = 'standard')</signature>
              <docrelurl>install_select_locale_form/7</docrelurl>
            </item>
            <item name= "install_select_profile">
              <description>Installation task; select which profile to install.</description>
              <signature>install_select_profile(&amp;$install_state)</signature>
              <docrelurl>install_select_profile/7</docrelurl>
            </item>
            <item name= "install_select_profile_form">
              <description>Form API array definition for the profile selection form.</description>
              <signature>install_select_profile_form($form, &amp;$form_state, $profile_files)</signature>
              <docrelurl>install_select_profile_form/7</docrelurl>
            </item>
            <item name= "install_settings_form">
              <description>Installation task; define a form to configure and rewrite settings.php.</description>
              <signature>install_settings_form($form, &amp;$form_state, &amp;$install_state)</signature>
              <docrelurl>install_settings_form/7</docrelurl>
            </item>
            <item name= "install_settings_form_submit">
              <description>Form API submit for install_settings form.</description>
              <signature>install_settings_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>install_settings_form_submit/7</docrelurl>
            </item>
            <item name= "install_settings_form_validate">
              <description>Form API validate for install_settings form.</description>
              <signature>install_settings_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>install_settings_form_validate/7</docrelurl>
            </item>
            <item name= "install_state_defaults">
              <description>Returns an array of default settings for the global installation state. The installation state is initialized with these settings at the beginning of each page request. They may evolve during the page request, but they are initialized again once the next request begins.</description>
              <signature>install_state_defaults()</signature>
              <docrelurl>install_state_defaults/7</docrelurl>
            </item>
            <item name= "install_system_module">
              <description>Installation task; install the Drupal system module.</description>
              <signature>install_system_module(&amp;$install_state)</signature>
              <docrelurl>install_system_module/7</docrelurl>
            </item>
            <item name= "install_tasks">
              <description>Returns a list of all tasks the installer currently knows about. This function will return tasks regardless of whether or not they are intended to run on the current page request. However, the list can change based on the installation state (for example, if an installation profile hasn't been selected yet, we don't yet know which profile tasks will be available).</description>
              <signature>install_tasks($install_state)</signature>
              <docrelurl>install_tasks/7</docrelurl>
            </item>
            <item name= "install_tasks_to_display">
              <description>Returns a list of tasks that should be displayed to the end user. The output of this function is a list suitable for sending to theme_task_list().</description>
              <signature>install_tasks_to_display($install_state)</signature>
              <docrelurl>install_tasks_to_display/7</docrelurl>
            </item>
            <item name= "install_tasks_to_perform">
              <description>Returns a list of tasks to perform during the current installation request. Note that the list of tasks can change based on the installation state as the page request evolves (for example, if an installation profile hasn't been selected yet, we don't yet know which profile tasks need to be run).</description>
              <signature>install_tasks_to_perform($install_state)</signature>
              <docrelurl>install_tasks_to_perform/7</docrelurl>
            </item>
            <item name= "install_verify_completed_task">
              <description>Verify and return the last installation task that was completed.</description>
              <signature>install_verify_completed_task()</signature>
              <docrelurl>install_verify_completed_task/7</docrelurl>
            </item>
            <item name= "install_verify_pdo">
              <description>Verify PDO library.</description>
              <signature>install_verify_pdo()</signature>
              <docrelurl>install_verify_pdo/7</docrelurl>
            </item>
            <item name= "install_verify_requirements">
              <description>Installation task; verify the requirements for installing Drupal.</description>
              <signature>install_verify_requirements(&amp;$install_state)</signature>
              <docrelurl>install_verify_requirements/7</docrelurl>
            </item>
            <item name= "install_verify_settings">
              <description>Verifies the existing settings in settings.php.</description>
              <signature>install_verify_settings()</signature>
              <docrelurl>install_verify_settings/7</docrelurl>
            </item>
            <item name= "int2vancode">
              <description>Generate vancode. Consists of a leading character indicating length, followed by N digits with a numerical value in base 36. Vancodes can be sorted as strings without messing up numerical order.</description>
              <signature>int2vancode($i = 0)</signature>
              <docrelurl>int2vancode/7</docrelurl>
            </item>
            <item name= "ip_address">
              <description>If Drupal is behind a reverse proxy, we use the X-Forwarded-For header instead of $_SERVER['REMOTE_ADDR'], which would be the IP address of the proxy server, and not the client's. The actual header name can be configured by the reverse_proxy_header variable.</description>
              <signature>ip_address()</signature>
              <docrelurl>ip_address/7</docrelurl>
            </item>
            <item name= "l">
              <description>Formats an internal or external URL link as an HTML anchor tag. This function correctly handles aliased paths, and adds an 'active' class attribute to links that point to the current page (for theming), so all internal links output by modules should be generated by this function if possible.</description>
              <signature>l($text, $path, array $options = array())</signature>
              <docrelurl>l/7</docrelurl>
            </item>
            <item name= "language_default">
              <description>Default language used on the site</description>
              <signature>language_default($property = NULL)</signature>
              <docrelurl>language_default/7</docrelurl>
            </item>
            <item name= "language_fallback_get_candidates">
              <description>Return the possible fallback languages ordered by language weight.</description>
              <signature>language_fallback_get_candidates($type = LANGUAGE_TYPE_CONTENT)</signature>
              <docrelurl>language_fallback_get_candidates/7</docrelurl>
            </item>
            <item name= "language_from_default">
              <description>Default language provider.</description>
              <signature>language_from_default()</signature>
              <docrelurl>language_from_default/7</docrelurl>
            </item>
            <item name= "language_initialize">
              <description>Choose a language for the given type based on language negotiation settings.</description>
              <signature>language_initialize($type)</signature>
              <docrelurl>language_initialize/7</docrelurl>
            </item>
            <item name= "language_list">
              <description>Get a list of languages set up indexed by the specified key</description>
              <signature>language_list($field = 'language')</signature>
              <docrelurl>language_list/7</docrelurl>
            </item>
            <item name= "language_negotiation_get">
              <description>Check if a language provider is enabled. This has two possible behaviors:</description>
              <signature>language_negotiation_get($type, $provider_id = NULL)</signature>
              <docrelurl>language_negotiation_get/7</docrelurl>
            </item>
            <item name= "language_negotiation_get_any">
              <description>Check if the given language provider is enabled for any configurable language type.</description>
              <signature>language_negotiation_get_any($provider_id)</signature>
              <docrelurl>language_negotiation_get_any/7</docrelurl>
            </item>
            <item name= "language_negotiation_get_switch_links">
              <description>Return the language switch links for the given language.</description>
              <signature>language_negotiation_get_switch_links($type, $path)</signature>
              <docrelurl>language_negotiation_get_switch_links/7</docrelurl>
            </item>
            <item name= "language_negotiation_info">
              <description>Return all the defined language providers.</description>
              <signature>language_negotiation_info()</signature>
              <docrelurl>language_negotiation_info/7</docrelurl>
            </item>
            <item name= "language_negotiation_set">
              <description>Save a list of language providers.</description>
              <signature>language_negotiation_set($type, $language_providers)</signature>
              <docrelurl>language_negotiation_set/7</docrelurl>
            </item>
            <item name= "language_provider_invoke">
              <description>Helper function used to cache the language providers results.</description>
              <signature>language_provider_invoke($provider_id, $provider = NULL)</signature>
              <docrelurl>language_provider_invoke/7</docrelurl>
            </item>
            <item name= "language_provider_weight">
              <description>Return the passed language provider weight or a default value.</description>
              <signature>language_provider_weight($provider)</signature>
              <docrelurl>language_provider_weight/7</docrelurl>
            </item>
            <item name= "language_types">
              <description>Return an array of the available language types.</description>
              <signature>language_types()</signature>
              <docrelurl>language_types/7</docrelurl>
            </item>
            <item name= "language_types_configurable">
              <description>Return only the configurable language types. A language type maybe configurable or fixed. A fixed language type is a type whose negotiation values are unchangeable and defined while defining the language type itself.</description>
              <signature>language_types_configurable($stored = TRUE)</signature>
              <docrelurl>language_types_configurable/7</docrelurl>
            </item>
            <item name= "language_types_disable">
              <description>Disable the given language types.</description>
              <signature>language_types_disable($types)</signature>
              <docrelurl>language_types_disable/7</docrelurl>
            </item>
            <item name= "language_types_info">
              <description>Return all the defined language types.</description>
              <signature>language_types_info()</signature>
              <docrelurl>language_types_info/7</docrelurl>
            </item>
            <item name= "language_url_split_prefix">
              <description>Split the given path into prefix and actual path. Parse the given path and return the language object identified by the prefix and the actual path.</description>
              <signature>language_url_split_prefix($path, $languages)</signature>
              <docrelurl>language_url_split_prefix/7</docrelurl>
            </item>
            <item name= "list_allowed_values">
              <description>Returns the set of allowed values for a list field. The strings are not safe for output. Keys and values of the array should be sanitized through field_filter_xss() before being displayed.</description>
              <signature>list_allowed_values($field)</signature>
              <docrelurl>list_allowed_values/7</docrelurl>
            </item>
            <item name= "list_allowed_values_setting_validate">
              <description>Element validate callback; check that the entered values are valid.</description>
              <signature>list_allowed_values_setting_validate($element, &amp;$form_state)</signature>
              <docrelurl>list_allowed_values_setting_validate/7</docrelurl>
            </item>
            <item name= "list_boolean_allowed_values_callback">
              <description>Form element #value_callback: assembles the allowed values for 'boolean' fields. </description>
              <signature>list_boolean_allowed_values_callback($element, $edit = FALSE)</signature>
              <docrelurl>list_boolean_allowed_values_callback/7</docrelurl>
            </item>
            <item name= "list_extract_allowed_values">
              <description>Generates an array of values from a string. Explode a string with keys and labels separated with '|' and with each new value on its own line.</description>
              <signature>list_extract_allowed_values($string_values, $position_keys = FALSE)</signature>
              <docrelurl>list_extract_allowed_values/7</docrelurl>
            </item>
            <item name= "list_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>list_field_formatter_info()</signature>
              <docrelurl>list_field_formatter_info/7</docrelurl>
            </item>
            <item name= "list_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>list_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>list_field_formatter_view/7</docrelurl>
            </item>
            <item name= "list_field_info">
              <description>Implements hook_field_info().</description>
              <signature>list_field_info()</signature>
              <docrelurl>list_field_info/7</docrelurl>
            </item>
            <item name= "list_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>list_field_is_empty($item, $field)</signature>
              <docrelurl>list_field_is_empty/7</docrelurl>
            </item>
            <item name= "list_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>list_field_schema($field)</signature>
              <docrelurl>list_field_schema/7</docrelurl>
            </item>
            <item name= "list_field_settings_form">
              <description>Implements hook_field_settings_form(). @todo: If $has_data, add a form validate function to verify that the new allowed values do not exclude any keys for which data already exists in the field storage (use EntityFieldQuery to find out). Implement the validate function via hook_field_update_forbid() so list.module does not depend on form submission.</description>
              <signature>list_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>list_field_settings_form/7</docrelurl>
            </item>
            <item name= "list_field_update_field">
              <description>Implements hook_field_update_field().</description>
              <signature>list_field_update_field($field, $prior_field, $has_data)</signature>
              <docrelurl>list_field_update_field/7</docrelurl>
            </item>
            <item name= "list_field_validate">
              <description>Implements hook_field_validate(). Possible error codes:</description>
              <signature>list_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>list_field_validate/7</docrelurl>
            </item>
            <item name= "list_field_widget_info_alter">
              <description>Implements hook_field_widget_info_alter(). The List module does not implement widgets of its own, but reuses the widgets defined in options.module.</description>
              <signature>list_field_widget_info_alter(&amp;$info)</signature>
              <docrelurl>list_field_widget_info_alter/7</docrelurl>
            </item>
            <item name= "list_help">
              <description>Implements hook_help().</description>
              <signature>list_help($path, $arg)</signature>
              <docrelurl>list_help/7</docrelurl>
            </item>
            <item name= "list_options_list">
              <description>Implements hook_options_list().</description>
              <signature>list_options_list($field)</signature>
              <docrelurl>list_options_list/7</docrelurl>
            </item>
            <item name= "list_test_allowed_values_callback">
              <description>Allowed values callback.</description>
              <signature>list_test_allowed_values_callback($field)</signature>
              <docrelurl>list_test_allowed_values_callback/7</docrelurl>
            </item>
            <item name= "list_themes">
              <description>Return a list of all currently available themes. Retrieved from the database, if available and the site is not in maintenance mode; otherwise compiled freshly from the filesystem.</description>
              <signature>list_themes($refresh = FALSE)</signature>
              <docrelurl>list_themes/7</docrelurl>
            </item>
            <item name= "locale">
              <description>Provides interface translation services. This function is called from t() to translate a string if needed.</description>
              <signature>locale($string = NULL, $context = NULL, $langcode = NULL)</signature>
              <docrelurl>locale/7</docrelurl>
            </item>
            <item name= "locale_add_language">
              <description>API function to add a language.</description>
              <signature>locale_add_language($langcode, $name = NULL, $native = NULL, $direction = LANGUAGE_LTR, $domain = '', $prefix = '', $enabled = TRUE, $default = FALSE)</signature>
              <docrelurl>locale_add_language/7</docrelurl>
            </item>
            <item name= "locale_batch_by_component">
              <description>Prepare a batch to run when installing modules or enabling themes. This batch will import translations for the newly added components in all the languages already set up on the site.</description>
              <signature>locale_batch_by_component($components, $finished = '_locale_batch_system_finished')</signature>
              <docrelurl>locale_batch_by_component/7</docrelurl>
            </item>
            <item name= "locale_batch_by_language">
              <description>Prepare a batch to import translations for all enabled modules in a given language.</description>
              <signature>locale_batch_by_language($langcode, $finished = NULL, $skip = array())</signature>
              <docrelurl>locale_batch_by_language/7</docrelurl>
            </item>
            <item name= "locale_block_info">
              <description>Implements hook_block_info().</description>
              <signature>locale_block_info()</signature>
              <docrelurl>locale_block_info/7</docrelurl>
            </item>
            <item name= "locale_block_view">
              <description>Implements hook_block_view(). Displays a language switcher. Only show if we have at least two languages.</description>
              <signature>locale_block_view($type)</signature>
              <docrelurl>locale_block_view/7</docrelurl>
            </item>
            <item name= "locale_css_alter">
              <description>Code modules/locale/locale.module, line 874</description>
              <signature>locale_css_alter(&amp;$css)</signature>
              <docrelurl>locale_css_alter/7</docrelurl>
            </item>
            <item name= "locale_date_format_form">
              <description>Provide date localization configuration options to users.</description>
              <signature>locale_date_format_form($form, &amp;$form_state, $langcode)</signature>
              <docrelurl>locale_date_format_form/7</docrelurl>
            </item>
            <item name= "locale_date_format_form_submit">
              <description>Submit handler for configuring localized date formats on the locale_date_format_form.</description>
              <signature>locale_date_format_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_date_format_form_submit/7</docrelurl>
            </item>
            <item name= "locale_date_format_language_overview_page">
              <description>Display edit date format links for each language.</description>
              <signature>locale_date_format_language_overview_page()</signature>
              <docrelurl>locale_date_format_language_overview_page/7</docrelurl>
            </item>
            <item name= "locale_date_format_reset_form">
              <description>Reset locale specific date formats to the global defaults.</description>
              <signature>locale_date_format_reset_form($form, &amp;$form_state, $langcode)</signature>
              <docrelurl>locale_date_format_reset_form/7</docrelurl>
            </item>
            <item name= "locale_date_format_reset_form_submit">
              <description>Reset date formats for a specific language to global defaults.</description>
              <signature>locale_date_format_reset_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_date_format_reset_form_submit/7</docrelurl>
            </item>
            <item name= "locale_date_format_save">
              <description>Save locale specific date formats to the database.</description>
              <signature>locale_date_format_save($langcode, $type, $format)</signature>
              <docrelurl>locale_date_format_save/7</docrelurl>
            </item>
            <item name= "locale_entity_info_alter">
              <description>Implements hook_entity_info_alter().</description>
              <signature>locale_entity_info_alter(&amp;$entity_info)</signature>
              <docrelurl>locale_entity_info_alter/7</docrelurl>
            </item>
            <item name= "locale_field_language_alter">
              <description>Implements hook_field_language_alter().</description>
              <signature>locale_field_language_alter(&amp;$display_language, $context)</signature>
              <docrelurl>locale_field_language_alter/7</docrelurl>
            </item>
            <item name= "locale_field_language_fallback">
              <description>Applies language fallback rules to the fields attached to the given entity. Core language fallback rules simply check if fields have a field translation for the requested language code. If so the requested language is returned, otherwise all the fallback candidates are inspected to see if there is a field translation available in another language. By default this is called by locale_field_language_alter(), but this behavior can be disabled by setting the 'locale_field_language_fallback' variable to FALSE.</description>
              <signature>locale_field_language_fallback(&amp;$display_language, $entity, $langcode)</signature>
              <docrelurl>locale_field_language_fallback/7</docrelurl>
            </item>
            <item name= "locale_field_node_form_submit">
              <description>Form submit handler for node_form(). Checks if Locale is registered as a translation handler and handle possible node language changes.</description>
              <signature>locale_field_node_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_field_node_form_submit/7</docrelurl>
            </item>
            <item name= "locale_form_alter">
              <description>Implements hook_form_alter(). Adds language fields to forms.</description>
              <signature>locale_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>locale_form_alter/7</docrelurl>
            </item>
            <item name= "locale_form_comment_form_alter">
              <description>Code modules/locale/locale.module, line 999</description>
              <signature>locale_form_comment_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>locale_form_comment_form_alter/7</docrelurl>
            </item>
            <item name= "locale_form_node_type_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>locale_form_node_type_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>locale_form_node_type_form_alter/7</docrelurl>
            </item>
            <item name= "locale_form_path_admin_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>locale_form_path_admin_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>locale_form_path_admin_form_alter/7</docrelurl>
            </item>
            <item name= "locale_get_localized_date_format">
              <description>Select locale date format details from database.</description>
              <signature>locale_get_localized_date_format($languages)</signature>
              <docrelurl>locale_get_localized_date_format/7</docrelurl>
            </item>
            <item name= "locale_get_plural">
              <description>Returns plural form index for a specific number. The index is computed from the formula of this language.</description>
              <signature>locale_get_plural($count, $langcode = NULL)</signature>
              <docrelurl>locale_get_plural/7</docrelurl>
            </item>
            <item name= "locale_help">
              <description>Implements hook_help().</description>
              <signature>locale_help($path, $arg)</signature>
              <docrelurl>locale_help/7</docrelurl>
            </item>
            <item name= "locale_init">
              <description>Implements hook_init(). Initialize date formats according to the user's current locale.</description>
              <signature>locale_init()</signature>
              <docrelurl>locale_init/7</docrelurl>
            </item>
            <item name= "locale_install">
              <description>Implements hook_install().</description>
              <signature>locale_install()</signature>
              <docrelurl>locale_install/7</docrelurl>
            </item>
            <item name= "locale_js_alter">
              <description>Implements hook_js_alter(). This function checks all JavaScript files currently added via drupal_add_js() and invokes parsing if they have not yet been parsed for Drupal.t() and Drupal.formatPlural() calls. Also refreshes the JavaScript translation file if necessary, and adds it to the page.</description>
              <signature>locale_js_alter(&amp;$javascript)</signature>
              <docrelurl>locale_js_alter/7</docrelurl>
            </item>
            <item name= "locale_languages_add_screen">
              <description>User interface for the language addition screen.</description>
              <signature>locale_languages_add_screen()</signature>
              <docrelurl>locale_languages_add_screen/7</docrelurl>
            </item>
            <item name= "locale_languages_configure_form">
              <description>Setting for language negotiation options</description>
              <signature>locale_languages_configure_form()</signature>
              <docrelurl>locale_languages_configure_form/7</docrelurl>
            </item>
            <item name= "locale_languages_configure_form_submit">
              <description>Submit handler for language negotiation settings.</description>
              <signature>locale_languages_configure_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_configure_form_submit/7</docrelurl>
            </item>
            <item name= "locale_languages_custom_form">
              <description>Custom language addition form.</description>
              <signature>locale_languages_custom_form($form)</signature>
              <docrelurl>locale_languages_custom_form/7</docrelurl>
            </item>
            <item name= "locale_languages_delete_form">
              <description>User interface for the language deletion confirmation screen.</description>
              <signature>locale_languages_delete_form($form, &amp;$form_state, $langcode)</signature>
              <docrelurl>locale_languages_delete_form/7</docrelurl>
            </item>
            <item name= "locale_languages_delete_form_submit">
              <description>Process language deletion submissions.</description>
              <signature>locale_languages_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_delete_form_submit/7</docrelurl>
            </item>
            <item name= "locale_languages_edit_form">
              <description>Editing screen for a particular language.</description>
              <signature>locale_languages_edit_form($form, &amp;$form_state, $langcode)</signature>
              <docrelurl>locale_languages_edit_form/7</docrelurl>
            </item>
            <item name= "locale_languages_edit_form_submit">
              <description>Process the language editing form submission.</description>
              <signature>locale_languages_edit_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_edit_form_submit/7</docrelurl>
            </item>
            <item name= "locale_languages_edit_form_validate">
              <description>Validate the language editing form. Reused for custom language addition too.</description>
              <signature>locale_languages_edit_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_edit_form_validate/7</docrelurl>
            </item>
            <item name= "locale_languages_overview_form">
              <description>User interface for the language overview screen.</description>
              <signature>locale_languages_overview_form()</signature>
              <docrelurl>locale_languages_overview_form/7</docrelurl>
            </item>
            <item name= "locale_languages_overview_form_submit">
              <description>Process language overview form submissions, updating existing languages.</description>
              <signature>locale_languages_overview_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_overview_form_submit/7</docrelurl>
            </item>
            <item name= "locale_languages_predefined_form">
              <description>Predefined language setup form.</description>
              <signature>locale_languages_predefined_form($form)</signature>
              <docrelurl>locale_languages_predefined_form/7</docrelurl>
            </item>
            <item name= "locale_languages_predefined_form_submit">
              <description>Process the language addition form submission.</description>
              <signature>locale_languages_predefined_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_predefined_form_submit/7</docrelurl>
            </item>
            <item name= "locale_languages_predefined_form_validate">
              <description>Validate the language addition form.</description>
              <signature>locale_languages_predefined_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>locale_languages_predefined_form_validate/7</docrelurl>
            </item>
            <item name= "locale_language_from_browser">
              <description>Identify language from the Accept-language HTTP header we got. We perform browser accept-language parsing only if page cache is disabled, otherwise we would cache a user-specific preference.</description>
              <signature>locale_language_from_browser($languages)</signature>
              <docrelurl>locale_language_from_browser/7</docrelurl>
            </item>
            <item name= "locale_language_from_interface">
              <description>Identifies the language from the current interface language.</description>
              <signature>locale_language_from_interface()</signature>
              <docrelurl>locale_language_from_interface/7</docrelurl>
            </item>
            <item name= "locale_language_from_session">
              <description>Identify language from a request/session parameter.</description>
              <signature>locale_language_from_session($languages)</signature>
              <docrelurl>locale_language_from_session/7</docrelurl>
            </item>
            <item name= "locale_language_from_url">
              <description>Identify language via URL prefix or domain.</description>
              <signature>locale_language_from_url($languages)</signature>
              <docrelurl>locale_language_from_url/7</docrelurl>
            </item>
            <item name= "locale_language_from_user">
              <description>Identify language from the user preferences.</description>
              <signature>locale_language_from_user($languages)</signature>
              <docrelurl>locale_language_from_user/7</docrelurl>
            </item>
            <item name= "locale_language_list">
              <description>Returns array of language names</description>
              <signature>locale_language_list($field = 'name', $all = FALSE)</signature>
              <docrelurl>locale_language_list/7</docrelurl>
            </item>
            <item name= "locale_language_name">
              <description>Returns a language name</description>
              <signature>locale_language_name($lang)</signature>
              <docrelurl>locale_language_name/7</docrelurl>
            </item>
            <item name= "locale_language_negotiation_info">
              <description>Implements hook_language_negotiation_info().</description>
              <signature>locale_language_negotiation_info()</signature>
              <docrelurl>locale_language_negotiation_info/7</docrelurl>
            </item>
            <item name= "locale_language_providers_session_form">
              <description>The URL language provider configuration form.</description>
              <signature>locale_language_providers_session_form($form, &amp;$form_state)</signature>
              <docrelurl>locale_language_providers_session_form/7</docrelurl>
            </item>
            <item name= "locale_language_providers_url_form">
              <description>The URL language provider configuration form.</description>
              <signature>locale_language_providers_url_form($form, &amp;$form_state)</signature>
              <docrelurl>locale_language_providers_url_form/7</docrelurl>
            </item>
            <item name= "locale_language_selector_form">
              <description>Form builder callback to display language selection widget.</description>
              <signature>locale_language_selector_form(&amp;$form, &amp;$form_state, $user)</signature>
              <docrelurl>locale_language_selector_form/7</docrelurl>
            </item>
            <item name= "locale_language_switcher_session">
              <description>Return the session language switcher block.</description>
              <signature>locale_language_switcher_session($type, $path)</signature>
              <docrelurl>locale_language_switcher_session/7</docrelurl>
            </item>
            <item name= "locale_language_switcher_url">
              <description>Return the URL language switcher block. Translation links may be provided by other modules.</description>
              <signature>locale_language_switcher_url($type, $path)</signature>
              <docrelurl>locale_language_switcher_url/7</docrelurl>
            </item>
            <item name= "locale_language_types_info">
              <description>Implements hook_language_types_info(). Defines the three core language types:</description>
              <signature>locale_language_types_info()</signature>
              <docrelurl>locale_language_types_info/7</docrelurl>
            </item>
            <item name= "locale_language_url_rewrite_session">
              <description>Rewrite URLs for the Session language provider.</description>
              <signature>locale_language_url_rewrite_session(&amp;$path, &amp;$options)</signature>
              <docrelurl>locale_language_url_rewrite_session/7</docrelurl>
            </item>
            <item name= "locale_language_url_rewrite_url">
              <description>Rewrite URLs for the URL language provider.</description>
              <signature>locale_language_url_rewrite_url(&amp;$path, &amp;$options)</signature>
              <docrelurl>locale_language_url_rewrite_url/7</docrelurl>
            </item>
            <item name= "locale_library_alter">
              <description>Implement hook_library_alter(). Provides the language support for the jQuery UI Date Picker.</description>
              <signature>locale_library_alter(&amp;$libraries, $module)</signature>
              <docrelurl>locale_library_alter/7</docrelurl>
            </item>
            <item name= "locale_locale">
              <description>Implements hook_locale().</description>
              <signature>locale_locale($op = 'groups')</signature>
              <docrelurl>locale_locale/7</docrelurl>
            </item>
            <item name= "locale_menu">
              <description>Implements hook_menu().</description>
              <signature>locale_menu()</signature>
              <docrelurl>locale_menu/7</docrelurl>
            </item>
            <item name= "locale_multilingual_node_type">
              <description>Return whether the given content type has multilingual support.</description>
              <signature>locale_multilingual_node_type($type_name)</signature>
              <docrelurl>locale_multilingual_node_type/7</docrelurl>
            </item>
            <item name= "locale_permission">
              <description>Implements hook_permission().</description>
              <signature>locale_permission()</signature>
              <docrelurl>locale_permission/7</docrelurl>
            </item>
            <item name= "locale_reset">
              <description>Reset static variables used by locale().</description>
              <signature>locale_reset()</signature>
              <docrelurl>locale_reset/7</docrelurl>
            </item>
            <item name= "locale_schema">
              <description>Implements hook_schema().</description>
              <signature>locale_schema()</signature>
              <docrelurl>locale_schema/7</docrelurl>
            </item>
            <item name= "locale_string_is_safe">
              <description>Check that a string is safe to be added or imported as a translation. This test can be used to detect possibly bad translation strings. It should not have any false positives. But it is only a test, not a transformation, as it destroys valid HTML. We cannot reliably filter translation strings on import because some strings are irreversibly corrupted. For example, a &amp; in the translation would get encoded to &amp;amp; by filter_xss() before being put in the database, and thus would be displayed incorrectly.</description>
              <signature>locale_string_is_safe($string)</signature>
              <docrelurl>locale_string_is_safe/7</docrelurl>
            </item>
            <item name= "locale_system_update">
              <description>Imports translations when new modules or themes are installed or enabled. This function will either import translation for the component change right away, or start a batch if more files need to be imported.</description>
              <signature>locale_system_update($components)</signature>
              <docrelurl>locale_system_update/7</docrelurl>
            </item>
            <item name= "locale_test_boot">
              <description>For testing domain language negotiation, we fake it by setting the HTTP_HOST here</description>
              <signature>locale_test_boot()</signature>
              <docrelurl>locale_test_boot/7</docrelurl>
            </item>
            <item name= "locale_test_locale">
              <description>Implements hook_locale().</description>
              <signature>locale_test_locale($op = 'groups')</signature>
              <docrelurl>locale_test_locale/7</docrelurl>
            </item>
            <item name= "locale_theme">
              <description>Implements hook_theme().</description>
              <signature>locale_theme()</signature>
              <docrelurl>locale_theme/7</docrelurl>
            </item>
            <item name= "locale_translate_delete_form">
              <description>User interface for the string deletion confirmation screen.</description>
              <signature>locale_translate_delete_form($form, &amp;$form_state, $source)</signature>
              <docrelurl>locale_translate_delete_form/7</docrelurl>
            </item>
            <item name= "locale_translate_delete_form_submit">
              <description>Process string deletion submissions.</description>
              <signature>locale_translate_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_translate_delete_form_submit/7</docrelurl>
            </item>
            <item name= "locale_translate_delete_page">
              <description>String deletion confirmation page.</description>
              <signature>locale_translate_delete_page($lid)</signature>
              <docrelurl>locale_translate_delete_page/7</docrelurl>
            </item>
            <item name= "locale_translate_edit_form">
              <description>User interface for string editing.</description>
              <signature>locale_translate_edit_form($form, &amp;$form_state, $lid)</signature>
              <docrelurl>locale_translate_edit_form/7</docrelurl>
            </item>
            <item name= "locale_translate_edit_form_submit">
              <description>Process string editing form submissions. Saves all translations of one string submitted from a form.</description>
              <signature>locale_translate_edit_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_translate_edit_form_submit/7</docrelurl>
            </item>
            <item name= "locale_translate_edit_form_validate">
              <description>Validate string editing form submissions.</description>
              <signature>locale_translate_edit_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>locale_translate_edit_form_validate/7</docrelurl>
            </item>
            <item name= "locale_translate_export_pot_form">
              <description>Translation template export form.</description>
              <signature>locale_translate_export_pot_form()</signature>
              <docrelurl>locale_translate_export_pot_form/7</docrelurl>
            </item>
            <item name= "locale_translate_export_po_form">
              <description>Form to export PO files for the languages provided.</description>
              <signature>locale_translate_export_po_form($form, &amp;$form_state, $names)</signature>
              <docrelurl>locale_translate_export_po_form/7</docrelurl>
            </item>
            <item name= "locale_translate_export_po_form_submit">
              <description>Process a translation (or template) export form submission.</description>
              <signature>locale_translate_export_po_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_translate_export_po_form_submit/7</docrelurl>
            </item>
            <item name= "locale_translate_export_screen">
              <description>User interface for the translation export screen.</description>
              <signature>locale_translate_export_screen()</signature>
              <docrelurl>locale_translate_export_screen/7</docrelurl>
            </item>
            <item name= "locale_translate_import_form">
              <description>User interface for the translation import screen.</description>
              <signature>locale_translate_import_form($form)</signature>
              <docrelurl>locale_translate_import_form/7</docrelurl>
            </item>
            <item name= "locale_translate_import_form_submit">
              <description>Process the locale import form submission.</description>
              <signature>locale_translate_import_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_translate_import_form_submit/7</docrelurl>
            </item>
            <item name= "locale_translate_overview_screen">
              <description>Overview screen for translations.</description>
              <signature>locale_translate_overview_screen()</signature>
              <docrelurl>locale_translate_overview_screen/7</docrelurl>
            </item>
            <item name= "locale_translate_seek_screen">
              <description>String search screen.</description>
              <signature>locale_translate_seek_screen()</signature>
              <docrelurl>locale_translate_seek_screen/7</docrelurl>
            </item>
            <item name= "locale_translation_filters">
              <description>List locale translation filters that can be applied.</description>
              <signature>locale_translation_filters()</signature>
              <docrelurl>locale_translation_filters/7</docrelurl>
            </item>
            <item name= "locale_translation_filter_form">
              <description>Return form for locale translation filters.</description>
              <signature>locale_translation_filter_form()</signature>
              <docrelurl>locale_translation_filter_form/7</docrelurl>
            </item>
            <item name= "locale_translation_filter_form_submit">
              <description>Process result from locale translation filter form.</description>
              <signature>locale_translation_filter_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>locale_translation_filter_form_submit/7</docrelurl>
            </item>
            <item name= "locale_translation_filter_form_validate">
              <description>Validate result from locale translation filter form.</description>
              <signature>locale_translation_filter_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>locale_translation_filter_form_validate/7</docrelurl>
            </item>
            <item name= "locale_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>locale_uninstall()</signature>
              <docrelurl>locale_uninstall/7</docrelurl>
            </item>
            <item name= "locale_update_7000">
              <description>Add context field index and allow longer location.</description>
              <signature>locale_update_7000()</signature>
              <docrelurl>locale_update_7000/7</docrelurl>
            </item>
            <item name= "locale_update_7001">
              <description>Upgrade language negotiation settings.</description>
              <signature>locale_update_7001()</signature>
              <docrelurl>locale_update_7001/7</docrelurl>
            </item>
            <item name= "locale_update_7002">
              <description>Allow longer javascript file names.</description>
              <signature>locale_update_7002()</signature>
              <docrelurl>locale_update_7002/7</docrelurl>
            </item>
            <item name= "locale_url_outbound_alter">
              <description>Implements hook_url_outbound_alter(). Rewrite outbound URLs with language based prefixes.</description>
              <signature>locale_url_outbound_alter(&amp;$path, &amp;$options, $original_path)</signature>
              <docrelurl>locale_url_outbound_alter/7</docrelurl>
            </item>
            <item name= "lock_acquire">
              <description>Acquire (or renew) a lock, but do not block if it fails.</description>
              <signature>lock_acquire($name, $timeout = 30.0)</signature>
              <docrelurl>lock_acquire/7</docrelurl>
            </item>
            <item name= "lock_initialize">
              <description>Initialize the locking system.</description>
              <signature>lock_initialize()</signature>
              <docrelurl>lock_initialize/7</docrelurl>
            </item>
            <item name= "lock_may_be_available">
              <description>Check if lock acquired by a different process may be available. If an existing lock has expired, it is removed.</description>
              <signature>lock_may_be_available($name)</signature>
              <docrelurl>lock_may_be_available/7</docrelurl>
            </item>
            <item name= "lock_release">
              <description>Release a lock previously acquired by lock_acquire(). This will release the named lock if it is still held by the current request.</description>
              <signature>lock_release($name)</signature>
              <docrelurl>lock_release/7</docrelurl>
            </item>
            <item name= "lock_release_all">
              <description>Release all previously acquired locks.</description>
              <signature>lock_release_all($lock_id = NULL)</signature>
              <docrelurl>lock_release_all/7</docrelurl>
            </item>
            <item name= "lock_wait">
              <description>Wait for a lock to be available. This function may be called in a request that fails to acquire a desired lock. This will block further execution until the lock is available or the specified delay in seconds is reached. This should not be used with locks that are acquired very frequently, since the lock is likely to be acquired again by a different request during the sleep().</description>
              <signature>lock_wait($name, $delay = 30)</signature>
              <docrelurl>lock_wait/7</docrelurl>
            </item>
            <item name= "map_month">
              <description>Helper function for usage with drupal_map_assoc to display month names.</description>
              <signature>map_month($month)</signature>
              <docrelurl>map_month/7</docrelurl>
            </item>
            <item name= "menu_block_info">
              <description>Implements hook_block_info().</description>
              <signature>menu_block_info()</signature>
              <docrelurl>menu_block_info/7</docrelurl>
            </item>
            <item name= "menu_block_view">
              <description>Implements hook_block_view().</description>
              <signature>menu_block_view($delta = '')</signature>
              <docrelurl>menu_block_view/7</docrelurl>
            </item>
            <item name= "menu_block_view_alter">
              <description>Implements hook_block_view_alter().</description>
              <signature>menu_block_view_alter(&amp;$data, $block)</signature>
              <docrelurl>menu_block_view_alter/7</docrelurl>
            </item>
            <item name= "menu_cache_clear">
              <description>Clears the cached cached data for a single named menu.</description>
              <signature>menu_cache_clear($menu_name = 'navigation')</signature>
              <docrelurl>menu_cache_clear/7</docrelurl>
            </item>
            <item name= "menu_cache_clear_all">
              <description>Clears all cached menu data. This should be called any time broad changes might have been made to the router items or menu links.</description>
              <signature>menu_cache_clear_all()</signature>
              <docrelurl>menu_cache_clear_all/7</docrelurl>
            </item>
            <item name= "menu_configure">
              <description>Menu callback; Build the form presenting menu configuration options.</description>
              <signature>menu_configure()</signature>
              <docrelurl>menu_configure/7</docrelurl>
            </item>
            <item name= "menu_contextual_links">
              <description>Retrieve contextual links for a system object based on registered local tasks. This leverages the menu system to retrieve the first layer of registered local tasks for a given system path. All local tasks of the tab type MENU_CONTEXT_INLINE are taken into account.</description>
              <signature>menu_contextual_links($module, $parent_path, $args)</signature>
              <docrelurl>menu_contextual_links/7</docrelurl>
            </item>
            <item name= "menu_custom_delete_submit">
              <description>Submit function for the 'Delete' button on the menu editing form.</description>
              <signature>menu_custom_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_custom_delete_submit/7</docrelurl>
            </item>
            <item name= "menu_delete">
              <description>Delete a custom menu and all contained links. Note that this function deletes all menu links in a custom menu. While menu links derived from router paths may be restored by rebuilding the menu, all customized and custom links will be irreversibly gone. Therefore, this function should usually be called from a user interface (form submit) handler only, which allows the user to confirm the action.</description>
              <signature>menu_delete($menu)</signature>
              <docrelurl>menu_delete/7</docrelurl>
            </item>
            <item name= "menu_delete_links">
              <description>Deletes all links for a menu.</description>
              <signature>menu_delete_links($menu_name)</signature>
              <docrelurl>menu_delete_links/7</docrelurl>
            </item>
            <item name= "menu_delete_menu_confirm">
              <description>Build a confirm form for deletion of a custom menu.</description>
              <signature>menu_delete_menu_confirm($form, &amp;$form_state, $menu)</signature>
              <docrelurl>menu_delete_menu_confirm/7</docrelurl>
            </item>
            <item name= "menu_delete_menu_confirm_submit">
              <description>Delete a custom menu and all links in it.</description>
              <signature>menu_delete_menu_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_delete_menu_confirm_submit/7</docrelurl>
            </item>
            <item name= "menu_delete_menu_page">
              <description>Menu callback; check access and get a confirm form for deletion of a custom menu.</description>
              <signature>menu_delete_menu_page($menu)</signature>
              <docrelurl>menu_delete_menu_page/7</docrelurl>
            </item>
            <item name= "menu_edit_item">
              <description>Menu callback; Build the menu link editing form.</description>
              <signature>menu_edit_item($form, &amp;$form_state, $type, $item, $menu)</signature>
              <docrelurl>menu_edit_item/7</docrelurl>
            </item>
            <item name= "menu_edit_item_submit">
              <description>Process menu and menu item add/edit form submissions.</description>
              <signature>menu_edit_item_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_edit_item_submit/7</docrelurl>
            </item>
            <item name= "menu_edit_item_validate">
              <description>Validate form values for a menu link being added or edited.</description>
              <signature>menu_edit_item_validate($form, &amp;$form_state)</signature>
              <docrelurl>menu_edit_item_validate/7</docrelurl>
            </item>
            <item name= "menu_edit_menu">
              <description>Menu callback; Build the form that handles the adding/editing of a custom menu.</description>
              <signature>menu_edit_menu($form, &amp;$form_state, $type, $menu = array())</signature>
              <docrelurl>menu_edit_menu/7</docrelurl>
            </item>
            <item name= "menu_edit_menu_submit">
              <description>Submit function for adding or editing a custom menu.</description>
              <signature>menu_edit_menu_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_edit_menu_submit/7</docrelurl>
            </item>
            <item name= "menu_edit_menu_validate">
              <description>Validates the human and machine-readable names when adding or editing a menu.</description>
              <signature>menu_edit_menu_validate($form, &amp;$form_state)</signature>
              <docrelurl>menu_edit_menu_validate/7</docrelurl>
            </item>
            <item name= "menu_enable">
              <description>Implements hook_enable(). Add a link for each custom menu.</description>
              <signature>menu_enable()</signature>
              <docrelurl>menu_enable/7</docrelurl>
            </item>
            <item name= "menu_execute_active_handler">
              <description>Execute the page callback associated with the current path.</description>
              <signature>menu_execute_active_handler($path = NULL, $deliver = TRUE)</signature>
              <docrelurl>menu_execute_active_handler/7</docrelurl>
            </item>
            <item name= "menu_form_alter">
              <description>Implements hook_form_alter(). Adds menu item fields to the node form.</description>
              <signature>menu_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>menu_form_alter/7</docrelurl>
            </item>
            <item name= "menu_form_node_type_form_alter">
              <description>Implements hook_form_FORM_ID_alter() for the node type form. Adds menu options to the node type form.</description>
              <signature>menu_form_node_type_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>menu_form_node_type_form_alter/7</docrelurl>
            </item>
            <item name= "menu_get_active_breadcrumb">
              <description>Get the breadcrumb for the current page, as determined by the active trail.</description>
              <signature>menu_get_active_breadcrumb()</signature>
              <docrelurl>menu_get_active_breadcrumb/7</docrelurl>
            </item>
            <item name= "menu_get_active_help">
              <description>Returns the help associated with the active menu item.</description>
              <signature>menu_get_active_help()</signature>
              <docrelurl>menu_get_active_help/7</docrelurl>
            </item>
            <item name= "menu_get_active_menu_names">
              <description>Get the active menu for the current page - determines the active trail.</description>
              <signature>menu_get_active_menu_names()</signature>
              <docrelurl>menu_get_active_menu_names/7</docrelurl>
            </item>
            <item name= "menu_get_active_title">
              <description>Get the title of the current page, as determined by the active trail.</description>
              <signature>menu_get_active_title()</signature>
              <docrelurl>menu_get_active_title/7</docrelurl>
            </item>
            <item name= "menu_get_active_trail">
              <description>Gets the active trail (path to root menu root) of the current page. See menu_set_active_trail() for details of return value.</description>
              <signature>menu_get_active_trail()</signature>
              <docrelurl>menu_get_active_trail/7</docrelurl>
            </item>
            <item name= "menu_get_ancestors">
              <description>Returns the ancestors (and relevant placeholders) for any given path. For example, the ancestors of node/12345/edit are:</description>
              <signature>menu_get_ancestors($parts)</signature>
              <docrelurl>menu_get_ancestors/7</docrelurl>
            </item>
            <item name= "menu_get_custom_theme">
              <description>Gets the custom theme for the current page, if there is one.</description>
              <signature>menu_get_custom_theme($initialize = FALSE)</signature>
              <docrelurl>menu_get_custom_theme/7</docrelurl>
            </item>
            <item name= "menu_get_item">
              <description>Get a router item.</description>
              <signature>menu_get_item($path = NULL, $router_item = NULL)</signature>
              <docrelurl>menu_get_item/7</docrelurl>
            </item>
            <item name= "menu_get_menus">
              <description>Return an associative array of the custom menus names.</description>
              <signature>menu_get_menus($all = TRUE)</signature>
              <docrelurl>menu_get_menus/7</docrelurl>
            </item>
            <item name= "menu_get_names">
              <description>Build a list of named menus.</description>
              <signature>menu_get_names()</signature>
              <docrelurl>menu_get_names/7</docrelurl>
            </item>
            <item name= "menu_get_object">
              <description>Get a loaded object from a router item. menu_get_object() provides access to objects loaded by the current router item. For example, on the page node/%node, the router loads the %node object, and calling menu_get_object() will return that. Normally, it is necessary to specify the type of object referenced, however node is the default. The following example tests to see whether the node being displayed is of the "story" content type:</description>
              <signature>menu_get_object($type = 'node', $position = 1, $path = NULL)</signature>
              <docrelurl>menu_get_object/7</docrelurl>
            </item>
            <item name= "menu_get_router">
              <description>Get the menu router.</description>
              <signature>menu_get_router()</signature>
              <docrelurl>menu_get_router/7</docrelurl>
            </item>
            <item name= "menu_help">
              <description>Implements hook_help().</description>
              <signature>menu_help($path, $arg)</signature>
              <docrelurl>menu_help/7</docrelurl>
            </item>
            <item name= "menu_install">
              <description>Implements hook_install().</description>
              <signature>menu_install()</signature>
              <docrelurl>menu_install/7</docrelurl>
            </item>
            <item name= "menu_item_delete_form">
              <description>Build a confirm form for deletion of a single menu link.</description>
              <signature>menu_item_delete_form($form, &amp;$form_state, $item)</signature>
              <docrelurl>menu_item_delete_form/7</docrelurl>
            </item>
            <item name= "menu_item_delete_form_submit">
              <description>Process menu delete form submissions.</description>
              <signature>menu_item_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_item_delete_form_submit/7</docrelurl>
            </item>
            <item name= "menu_item_delete_page">
              <description>Menu callback; Check access and present a confirm form for deleting a menu link.</description>
              <signature>menu_item_delete_page($item)</signature>
              <docrelurl>menu_item_delete_page/7</docrelurl>
            </item>
            <item name= "menu_item_delete_submit">
              <description>Submit function for the delete button on the menu item editing form.</description>
              <signature>menu_item_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_item_delete_submit/7</docrelurl>
            </item>
            <item name= "menu_links_clone">
              <description>Clone an array of menu links.</description>
              <signature>menu_links_clone($links, $menu_name = NULL)</signature>
              <docrelurl>menu_links_clone/7</docrelurl>
            </item>
            <item name= "menu_link_children_relative_depth">
              <description>Find the depth of an item's children relative to its depth. For example, if the item has a depth of 2, and the maximum of any child in the menu link tree is 5, the relative depth is 3.</description>
              <signature>menu_link_children_relative_depth($item)</signature>
              <docrelurl>menu_link_children_relative_depth/7</docrelurl>
            </item>
            <item name= "menu_link_delete">
              <description>Delete one or several menu links.</description>
              <signature>menu_link_delete($mlid, $path = NULL)</signature>
              <docrelurl>menu_link_delete/7</docrelurl>
            </item>
            <item name= "menu_link_load">
              <description>Get a menu link by its mlid, access checked and link translated for rendering. This function should never be called from within node_load() or any other function used as a menu object load function since an infinite recursion may occur.</description>
              <signature>menu_link_load($mlid)</signature>
              <docrelurl>menu_link_load/7</docrelurl>
            </item>
            <item name= "menu_link_maintain">
              <description>Insert, update or delete an uncustomized menu link related to a module.</description>
              <signature>menu_link_maintain($module, $op, $link_path, $link_title)</signature>
              <docrelurl>menu_link_maintain/7</docrelurl>
            </item>
            <item name= "menu_link_save">
              <description>Save a menu link.</description>
              <signature>menu_link_save(&amp;$item)</signature>
              <docrelurl>menu_link_save/7</docrelurl>
            </item>
            <item name= "menu_list_system_menus">
              <description>Return an array containing the names of system-defined (default) menus.</description>
              <signature>menu_list_system_menus()</signature>
              <docrelurl>menu_list_system_menus/7</docrelurl>
            </item>
            <item name= "menu_load">
              <description>Load the data for a single custom menu.</description>
              <signature>menu_load($menu_name)</signature>
              <docrelurl>menu_load/7</docrelurl>
            </item>
            <item name= "menu_load_all">
              <description>Load all custom menu data.</description>
              <signature>menu_load_all()</signature>
              <docrelurl>menu_load_all/7</docrelurl>
            </item>
            <item name= "menu_load_links">
              <description>Returns an array containing all links for a menu.</description>
              <signature>menu_load_links($menu_name)</signature>
              <docrelurl>menu_load_links/7</docrelurl>
            </item>
            <item name= "menu_local_actions">
              <description>Returns the rendered local actions at the current level.</description>
              <signature>menu_local_actions()</signature>
              <docrelurl>menu_local_actions/7</docrelurl>
            </item>
            <item name= "menu_local_tasks">
              <description>Collects the local tasks (tabs), action links, and the root path.</description>
              <signature>menu_local_tasks($level = 0)</signature>
              <docrelurl>menu_local_tasks/7</docrelurl>
            </item>
            <item name= "menu_main_menu">
              <description>Return an array of links to be rendered as the Main menu.</description>
              <signature>menu_main_menu()</signature>
              <docrelurl>menu_main_menu/7</docrelurl>
            </item>
            <item name= "menu_menu">
              <description>Implements hook_menu().</description>
              <signature>menu_menu()</signature>
              <docrelurl>menu_menu/7</docrelurl>
            </item>
            <item name= "menu_navigation_links">
              <description>Return an array of links for a navigation menu.</description>
              <signature>menu_navigation_links($menu_name, $level = 0)</signature>
              <docrelurl>menu_navigation_links/7</docrelurl>
            </item>
            <item name= "menu_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>menu_node_delete($node)</signature>
              <docrelurl>menu_node_delete/7</docrelurl>
            </item>
            <item name= "menu_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>menu_node_insert($node)</signature>
              <docrelurl>menu_node_insert/7</docrelurl>
            </item>
            <item name= "menu_node_prepare">
              <description>Implements hook_node_prepare().</description>
              <signature>menu_node_prepare($node)</signature>
              <docrelurl>menu_node_prepare/7</docrelurl>
            </item>
            <item name= "menu_node_save">
              <description>Helper for hook_node_insert() and hook_node_update().</description>
              <signature>menu_node_save($node)</signature>
              <docrelurl>menu_node_save/7</docrelurl>
            </item>
            <item name= "menu_node_submit">
              <description>Implements hook_node_submit().</description>
              <signature>menu_node_submit($node, $form, $form_state)</signature>
              <docrelurl>menu_node_submit/7</docrelurl>
            </item>
            <item name= "menu_node_update">
              <description>Implements hook_node_update().</description>
              <signature>menu_node_update($node)</signature>
              <docrelurl>menu_node_update/7</docrelurl>
            </item>
            <item name= "menu_overview_form">
              <description>Form for editing an entire menu tree at once. Shows for one menu the menu links accessible to the current user and relevant operations.</description>
              <signature>menu_overview_form($form, &amp;$form_state, $menu)</signature>
              <docrelurl>menu_overview_form/7</docrelurl>
            </item>
            <item name= "menu_overview_form_submit">
              <description>Submit handler for the menu overview form. This function takes great care in saving parent items first, then items underneath them. Saving items in the incorrect order can break the menu tree.</description>
              <signature>menu_overview_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_overview_form_submit/7</docrelurl>
            </item>
            <item name= "menu_overview_page">
              <description>Menu callback which shows an overview page of all the custom menus and their descriptions.</description>
              <signature>menu_overview_page()</signature>
              <docrelurl>menu_overview_page/7</docrelurl>
            </item>
            <item name= "menu_overview_title">
              <description>Title callback for the menu overview page and links.</description>
              <signature>menu_overview_title($menu)</signature>
              <docrelurl>menu_overview_title/7</docrelurl>
            </item>
            <item name= "menu_parent_options">
              <description>Return a list of menu items that are valid possible parents for the given menu item. @todo This has to be turned into a #process form element callback. The 'menu_override_parent_selector' variable is entirely superfluous.</description>
              <signature>menu_parent_options($menus, $item)</signature>
              <docrelurl>menu_parent_options/7</docrelurl>
            </item>
            <item name= "menu_parent_options_js">
              <description>Page callback. Get all available menus and menu items as Javascript array.</description>
              <signature>menu_parent_options_js()</signature>
              <docrelurl>menu_parent_options_js/7</docrelurl>
            </item>
            <item name= "menu_permission">
              <description>Implements hook_permission().</description>
              <signature>menu_permission()</signature>
              <docrelurl>menu_permission/7</docrelurl>
            </item>
            <item name= "menu_primary_local_tasks">
              <description>Returns the rendered local tasks at the top level.</description>
              <signature>menu_primary_local_tasks()</signature>
              <docrelurl>menu_primary_local_tasks/7</docrelurl>
            </item>
            <item name= "menu_rebuild">
              <description>(Re)populate the database tables used by various menu functions. This function will clear and populate the {menu_router} table, add entries to {menu_links} for new router items, then remove stale items from {menu_links}. If called from update.php or install.php, it will also schedule a call to itself on the first real page load from menu_execute_active_handler(), because the maintenance page environment is different and leaves stale data in the menu tables.</description>
              <signature>menu_rebuild()</signature>
              <docrelurl>menu_rebuild/7</docrelurl>
            </item>
            <item name= "menu_reset_item">
              <description>Reset a system-defined menu link.</description>
              <signature>menu_reset_item($link)</signature>
              <docrelurl>menu_reset_item/7</docrelurl>
            </item>
            <item name= "menu_reset_item_confirm">
              <description>Menu callback; reset a single modified menu link.</description>
              <signature>menu_reset_item_confirm($form, &amp;$form_state, $item)</signature>
              <docrelurl>menu_reset_item_confirm/7</docrelurl>
            </item>
            <item name= "menu_reset_item_confirm_submit">
              <description>Process menu reset item form submissions.</description>
              <signature>menu_reset_item_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>menu_reset_item_confirm_submit/7</docrelurl>
            </item>
            <item name= "menu_reset_static_cache">
              <description>Resets the menu system static cache.</description>
              <signature>menu_reset_static_cache()</signature>
              <docrelurl>menu_reset_static_cache/7</docrelurl>
            </item>
            <item name= "menu_router_build">
              <description>Collect and alter the menu definitions.</description>
              <signature>menu_router_build()</signature>
              <docrelurl>menu_router_build/7</docrelurl>
            </item>
            <item name= "menu_save">
              <description>Save a custom menu.</description>
              <signature>menu_save($menu)</signature>
              <docrelurl>menu_save/7</docrelurl>
            </item>
            <item name= "menu_schema">
              <description>Implements hook_schema().</description>
              <signature>menu_schema()</signature>
              <docrelurl>menu_schema/7</docrelurl>
            </item>
            <item name= "menu_secondary_local_tasks">
              <description>Returns the rendered local tasks at the second level.</description>
              <signature>menu_secondary_local_tasks()</signature>
              <docrelurl>menu_secondary_local_tasks/7</docrelurl>
            </item>
            <item name= "menu_secondary_menu">
              <description>Return an array of links to be rendered as the Secondary links.</description>
              <signature>menu_secondary_menu()</signature>
              <docrelurl>menu_secondary_menu/7</docrelurl>
            </item>
            <item name= "menu_set_active_item">
              <description>Set the active path, which determines which page is loaded.</description>
              <signature>menu_set_active_item($path)</signature>
              <docrelurl>menu_set_active_item/7</docrelurl>
            </item>
            <item name= "menu_set_active_menu_names">
              <description>Set (or get) the active menu for the current page - determines the active trail.</description>
              <signature>menu_set_active_menu_names($menu_names = NULL)</signature>
              <docrelurl>menu_set_active_menu_names/7</docrelurl>
            </item>
            <item name= "menu_set_active_trail">
              <description>Sets or gets the active trail (path to root menu root) of the current page.</description>
              <signature>menu_set_active_trail($new_trail = NULL)</signature>
              <docrelurl>menu_set_active_trail/7</docrelurl>
            </item>
            <item name= "menu_set_custom_theme">
              <description>Sets a custom theme for the current page, if there is one.</description>
              <signature>menu_set_custom_theme()</signature>
              <docrelurl>menu_set_custom_theme/7</docrelurl>
            </item>
            <item name= "menu_set_item">
              <description>Replaces the statically cached item for a given path.</description>
              <signature>menu_set_item($path, $router_item)</signature>
              <docrelurl>menu_set_item/7</docrelurl>
            </item>
            <item name= "menu_tab_root_path">
              <description>Returns the router path, or the path of the parent tab of a default local task.</description>
              <signature>menu_tab_root_path()</signature>
              <docrelurl>menu_tab_root_path/7</docrelurl>
            </item>
            <item name= "menu_tail_to_arg">
              <description>Related topics</description>
              <signature>menu_tail_to_arg($arg, $map, $index)</signature>
              <docrelurl>menu_tail_to_arg/7</docrelurl>
            </item>
            <item name= "menu_test_callback">
              <description>Dummy callback for hook_menu() to point to.</description>
              <signature>menu_test_callback()</signature>
              <docrelurl>menu_test_callback/7</docrelurl>
            </item>
            <item name= "menu_test_custom_theme">
              <description>Implement hook_custom_theme().</description>
              <signature>menu_test_custom_theme()</signature>
              <docrelurl>menu_test_custom_theme/7</docrelurl>
            </item>
            <item name= "menu_test_menu">
              <description>Implements hook_menu().</description>
              <signature>menu_test_menu()</signature>
              <docrelurl>menu_test_menu/7</docrelurl>
            </item>
            <item name= "menu_test_menu_link_delete">
              <description>Implements hook_menu_link_delete().</description>
              <signature>menu_test_menu_link_delete($item)</signature>
              <docrelurl>menu_test_menu_link_delete/7</docrelurl>
            </item>
            <item name= "menu_test_menu_link_insert">
              <description>Implements hook_menu_link_insert().</description>
              <signature>menu_test_menu_link_insert($item)</signature>
              <docrelurl>menu_test_menu_link_insert/7</docrelurl>
            </item>
            <item name= "menu_test_menu_link_update">
              <description>Implements hook_menu_link_update().</description>
              <signature>menu_test_menu_link_update($item)</signature>
              <docrelurl>menu_test_menu_link_update/7</docrelurl>
            </item>
            <item name= "menu_test_menu_name">
              <description>Helper function for the testMenuName() test. Used to change the menu_name parameter of a menu.</description>
              <signature>menu_test_menu_name($new_name = '')</signature>
              <docrelurl>menu_test_menu_name/7</docrelurl>
            </item>
            <item name= "menu_test_static_variable">
              <description>Static function for testing hook results.</description>
              <signature>menu_test_static_variable($value = NULL)</signature>
              <docrelurl>menu_test_static_variable/7</docrelurl>
            </item>
            <item name= "menu_test_theme_callback">
              <description>Theme callback to use when testing the theme callback functionality.</description>
              <signature>menu_test_theme_callback($argument)</signature>
              <docrelurl>menu_test_theme_callback/7</docrelurl>
            </item>
            <item name= "menu_test_theme_page_callback">
              <description>Page callback to use when testing the theme callback functionality.</description>
              <signature>menu_test_theme_page_callback($inherited = FALSE)</signature>
              <docrelurl>menu_test_theme_page_callback/7</docrelurl>
            </item>
            <item name= "menu_theme">
              <description>Implements hook_theme().</description>
              <signature>menu_theme()</signature>
              <docrelurl>menu_theme/7</docrelurl>
            </item>
            <item name= "menu_tree">
              <description>Render a menu tree based on the current path. The tree is expanded based on the current path and dynamic paths are also changed according to the defined to_arg functions (for example the 'My account' link is changed from user/% to a link with the current user's uid).</description>
              <signature>menu_tree($menu_name)</signature>
              <docrelurl>menu_tree/7</docrelurl>
            </item>
            <item name= "menu_tree_all_data">
              <description>Get the data structure representing a named menu tree. Since this can be the full tree including hidden items, the data returned may be used for generating an an admin interface or a select.</description>
              <signature>menu_tree_all_data($menu_name, $link = NULL, $max_depth = NULL)</signature>
              <docrelurl>menu_tree_all_data/7</docrelurl>
            </item>
            <item name= "menu_tree_check_access">
              <description>Check access and perform other dynamic operations for each link in the tree.</description>
              <signature>menu_tree_check_access(&amp;$tree, $node_links = array())</signature>
              <docrelurl>menu_tree_check_access/7</docrelurl>
            </item>
            <item name= "menu_tree_collect_node_links">
              <description>Recursive helper function - collect node links.</description>
              <signature>menu_tree_collect_node_links(&amp;$tree, &amp;$node_links)</signature>
              <docrelurl>menu_tree_collect_node_links/7</docrelurl>
            </item>
            <item name= "menu_tree_data">
              <description>Build the data representing a menu tree.</description>
              <signature>menu_tree_data(array $links, array $parents = array(), $depth = 1)</signature>
              <docrelurl>menu_tree_data/7</docrelurl>
            </item>
            <item name= "menu_tree_output">
              <description>Returns a rendered menu tree. The menu item's LI element is given one of the following classes:</description>
              <signature>menu_tree_output($tree)</signature>
              <docrelurl>menu_tree_output/7</docrelurl>
            </item>
            <item name= "menu_tree_page_data">
              <description>Get the data structure representing a named menu tree, based on the current page. The tree order is maintained by storing each parent in an individual field, see http://drupal.org/node/141866 for more.</description>
              <signature>menu_tree_page_data($menu_name, $max_depth = NULL)</signature>
              <docrelurl>menu_tree_page_data/7</docrelurl>
            </item>
            <item name= "menu_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>menu_uninstall()</signature>
              <docrelurl>menu_uninstall/7</docrelurl>
            </item>
            <item name= "menu_unserialize">
              <description>The menu system uses serialized arrays stored in the database for arguments. However, often these need to change according to the current path. This function unserializes such an array and does the necessary change. Integer values are mapped according to the $map parameter. For example, if unserialize($data) is array('view', 1) and $map is array('node', '12345') then 'view' will not be changed because it is not an integer, but 1 will as it is an integer. As $map[1] is '12345', 1 will be replaced with '12345'. So the result will be array('node_load', '12345').</description>
              <signature>menu_unserialize($data, $map)</signature>
              <docrelurl>menu_unserialize/7</docrelurl>
            </item>
            <item name= "mime_header_decode">
              <description>Complement to mime_header_encode</description>
              <signature>mime_header_decode($header)</signature>
              <docrelurl>mime_header_decode/7</docrelurl>
            </item>
            <item name= "mime_header_encode">
              <description>Encodes MIME/HTTP header values that contain non-ASCII, UTF-8 encoded characters. For example, mime_header_encode('tést.txt') returns "=?UTF-8?B?dMOpc3QudHh0?=".</description>
              <signature>mime_header_encode($string)</signature>
              <docrelurl>mime_header_encode/7</docrelurl>
            </item>
            <item name= "minimal_form_install_configure_form_alter">
              <description>Implements hook_form_alter(). Allows the profile to alter the site configuration form.</description>
              <signature>minimal_form_install_configure_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>minimal_form_install_configure_form_alter/7</docrelurl>
            </item>
            <item name= "minimal_install">
              <description>Implements hook_install(). Perform actions to set up the site for this profile.</description>
              <signature>minimal_install()</signature>
              <docrelurl>minimal_install/7</docrelurl>
            </item>
            <item name= "module_disable">
              <description>Disable a given set of modules.</description>
              <signature>module_disable($module_list, $disable_dependents = TRUE)</signature>
              <docrelurl>module_disable/7</docrelurl>
            </item>
            <item name= "module_enable">
              <description>Enable a given list of modules.</description>
              <signature>module_enable($module_list, $enable_dependencies = TRUE)</signature>
              <docrelurl>module_enable/7</docrelurl>
            </item>
            <item name= "module_exists">
              <description>Determine whether a given module exists.</description>
              <signature>module_exists($module)</signature>
              <docrelurl>module_exists/7</docrelurl>
            </item>
            <item name= "module_hook">
              <description>Determine whether a module implements a hook.</description>
              <signature>module_hook($module, $hook)</signature>
              <docrelurl>module_hook/7</docrelurl>
            </item>
            <item name= "module_hook_info">
              <description>Retrieve a list of what hooks are explicitly declared.</description>
              <signature>module_hook_info()</signature>
              <docrelurl>module_hook_info/7</docrelurl>
            </item>
            <item name= "module_implements">
              <description>Determine which modules are implementing a hook.</description>
              <signature>module_implements($hook, $sort = FALSE, $reset = FALSE)</signature>
              <docrelurl>module_implements/7</docrelurl>
            </item>
            <item name= "module_implements_write_cache">
              <description>Writes the hook implementation cache.</description>
              <signature>module_implements_write_cache()</signature>
              <docrelurl>module_implements_write_cache/7</docrelurl>
            </item>
            <item name= "module_invoke">
              <description>Invoke a hook in a particular module.</description>
              <signature>module_invoke()</signature>
              <docrelurl>module_invoke/7</docrelurl>
            </item>
            <item name= "module_invoke_all">
              <description>Invoke a hook in all enabled modules that implement it.</description>
              <signature>module_invoke_all()</signature>
              <docrelurl>module_invoke_all/7</docrelurl>
            </item>
            <item name= "module_list">
              <description>Collect a list of all loaded modules. During the bootstrap, return only vital modules. See bootstrap.inc</description>
              <signature>module_list($refresh = FALSE, $bootstrap = FALSE, $sort = FALSE, $fixed_list = NULL)</signature>
              <docrelurl>module_list/7</docrelurl>
            </item>
            <item name= "module_load_all">
              <description>Load all the modules that have been enabled in the system table.</description>
              <signature>module_load_all($bootstrap = FALSE)</signature>
              <docrelurl>module_load_all/7</docrelurl>
            </item>
            <item name= "module_load_all_includes">
              <description>Load an include file for each of the modules that have been enabled in the system table.</description>
              <signature>module_load_all_includes($type, $name = NULL)</signature>
              <docrelurl>module_load_all_includes/7</docrelurl>
            </item>
            <item name= "module_load_include">
              <description>Load a module include file. Examples:</description>
              <signature>module_load_include($type, $module, $name = NULL)</signature>
              <docrelurl>module_load_include/7</docrelurl>
            </item>
            <item name= "module_load_install">
              <description>Load a module's installation hooks.</description>
              <signature>module_load_install($module)</signature>
              <docrelurl>module_load_install/7</docrelurl>
            </item>
            <item name= "module_test_enable">
              <description>Implements hook_enable().</description>
              <signature>module_test_enable()</signature>
              <docrelurl>module_test_enable/7</docrelurl>
            </item>
            <item name= "module_test_hook_info">
              <description>Implements hook_hook_info().</description>
              <signature>module_test_hook_info()</signature>
              <docrelurl>module_test_hook_info/7</docrelurl>
            </item>
            <item name= "module_test_install">
              <description>Implements hook_install().</description>
              <signature>module_test_install()</signature>
              <docrelurl>module_test_install/7</docrelurl>
            </item>
            <item name= "module_test_permission">
              <description>Implements hook_permission().</description>
              <signature>module_test_permission()</signature>
              <docrelurl>module_test_permission/7</docrelurl>
            </item>
            <item name= "module_test_schema">
              <description>Implements hook_schema().</description>
              <signature>module_test_schema()</signature>
              <docrelurl>module_test_schema/7</docrelurl>
            </item>
            <item name= "module_test_system_info_alter">
              <description>Implements hook_system_info_alter(). Manipulate module dependencies to test dependency chains.</description>
              <signature>module_test_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>module_test_system_info_alter/7</docrelurl>
            </item>
            <item name= "module_test_test_hook">
              <description>Implements hook_test_hook().</description>
              <signature>module_test_test_hook()</signature>
              <docrelurl>module_test_test_hook/7</docrelurl>
            </item>
            <item name= "node_access">
              <description>Determine whether the current user may perform the given operation on the specified node.</description>
              <signature>node_access($op, $node, $account = NULL)</signature>
              <docrelurl>node_access/7</docrelurl>
            </item>
            <item name= "node_access_acquire_grants">
              <description>Gets the list of node access grants and writes them to the database. This function is called when a node is saved, and can also be called by modules if something other than a node save causes node access permissions to change. It collects all node access grants for the node from hook_node_access_records() implementations, allows these grants to be altered via hook_node_access_records_alter() implementations, and saves the collected and altered grants to the database.</description>
              <signature>node_access_acquire_grants($node, $delete = TRUE)</signature>
              <docrelurl>node_access_acquire_grants/7</docrelurl>
            </item>
            <item name= "node_access_grants">
              <description>Fetch an array of permission IDs granted to the given user ID. The implementation here provides only the universal "all" grant. A node access module should implement hook_node_grants() to provide a grant list for the user.</description>
              <signature>node_access_grants($op, $account = NULL)</signature>
              <docrelurl>node_access_grants/7</docrelurl>
            </item>
            <item name= "node_access_needs_rebuild">
              <description>Flag / unflag the node access grants for rebuilding, or read the current value of the flag. When the flag is set, a message is displayed to users with 'access administration pages' permission, pointing to the 'rebuild' confirm form. This can be used as an alternative to direct node_access_rebuild calls, allowing administrators to decide when they want to perform the actual (possibly time consuming) rebuild. When unsure the current user is an administrator, node_access_rebuild should be used instead.</description>
              <signature>node_access_needs_rebuild($rebuild = NULL)</signature>
              <docrelurl>node_access_needs_rebuild/7</docrelurl>
            </item>
            <item name= "node_access_rebuild">
              <description>Rebuild the node access database. This is occasionally needed by modules that make system-wide changes to access levels. When the rebuild is required by an admin-triggered action (e.g module settings form), calling node_access_needs_rebuild(TRUE) instead of node_access_rebuild() lets the user perform his changes and actually rebuild only once he is done.</description>
              <signature>node_access_rebuild($batch_mode = FALSE)</signature>
              <docrelurl>node_access_rebuild/7</docrelurl>
            </item>
            <item name= "node_access_test_menu">
              <description>Implements hook_menu(). Sets up a page that lists nodes.</description>
              <signature>node_access_test_menu()</signature>
              <docrelurl>node_access_test_menu/7</docrelurl>
            </item>
            <item name= "node_access_test_node_access_records">
              <description>Implements hook_node_access_records().</description>
              <signature>node_access_test_node_access_records($node)</signature>
              <docrelurl>node_access_test_node_access_records/7</docrelurl>
            </item>
            <item name= "node_access_test_node_grants">
              <description>Implements hook_node_grants().</description>
              <signature>node_access_test_node_grants($account, $op)</signature>
              <docrelurl>node_access_test_node_grants/7</docrelurl>
            </item>
            <item name= "node_access_test_page">
              <description>Page callback for node access test page. Page should say "No nodes" if there are no nodes, and "Yes, # nodes" (with the number filled in) if there were nodes the user could access. Also, the database query is shown, and a list of the node IDs, for debugging purposes. And if there is a query exception, the page says "Exception" and gives the error.</description>
              <signature>node_access_test_page()</signature>
              <docrelurl>node_access_test_page/7</docrelurl>
            </item>
            <item name= "node_access_test_permission">
              <description>Implements hook_permission(). Sets up permissions for this module.</description>
              <signature>node_access_test_permission()</signature>
              <docrelurl>node_access_test_permission/7</docrelurl>
            </item>
            <item name= "node_access_view_all_nodes">
              <description>Determine whether the user has a global viewing grant for all nodes.</description>
              <signature>node_access_view_all_nodes()</signature>
              <docrelurl>node_access_view_all_nodes/7</docrelurl>
            </item>
            <item name= "node_access_write_grants">
              <description>Writes a list of grants to the database, deleting any previously saved ones. If a realm is provided, it will only delete grants from that realm, but it will always delete a grant from the 'all' realm. Modules that utilize node_access can use this function when doing mass updates due to widespread permission changes.</description>
              <signature>node_access_write_grants($node, $grants, $realm = NULL, $delete = TRUE)</signature>
              <docrelurl>node_access_write_grants/7</docrelurl>
            </item>
            <item name= "node_action_info">
              <description>Implements hook_action_info().</description>
              <signature>node_action_info()</signature>
              <docrelurl>node_action_info/7</docrelurl>
            </item>
            <item name= "node_add">
              <description>Present a node submission form or a set of links to such forms.</description>
              <signature>node_add($type)</signature>
              <docrelurl>node_add/7</docrelurl>
            </item>
            <item name= "node_add_body_field">
              <description>Add default body field to a node type.</description>
              <signature>node_add_body_field($type, $label = 'Body')</signature>
              <docrelurl>node_add_body_field/7</docrelurl>
            </item>
            <item name= "node_add_page">
              <description>Code modules/node/node.pages.inc, line 19</description>
              <signature>node_add_page()</signature>
              <docrelurl>node_add_page/7</docrelurl>
            </item>
            <item name= "node_admin_content">
              <description>Menu callback: content administration.</description>
              <signature>node_admin_content($form, $form_state)</signature>
              <docrelurl>node_admin_content/7</docrelurl>
            </item>
            <item name= "node_admin_nodes">
              <description>Form builder: Builds the node administration overview.</description>
              <signature>node_admin_nodes()</signature>
              <docrelurl>node_admin_nodes/7</docrelurl>
            </item>
            <item name= "node_admin_nodes_submit">
              <description>Process node_admin_nodes form submissions. Execute the chosen 'Update option' on the selected nodes.</description>
              <signature>node_admin_nodes_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_admin_nodes_submit/7</docrelurl>
            </item>
            <item name= "node_admin_nodes_validate">
              <description>Validate node_admin_nodes form submissions. Check if any nodes have been selected to perform the chosen 'Update option' on.</description>
              <signature>node_admin_nodes_validate($form, &amp;$form_state)</signature>
              <docrelurl>node_admin_nodes_validate/7</docrelurl>
            </item>
            <item name= "node_admin_paths">
              <description>Implements hook_admin_paths().</description>
              <signature>node_admin_paths()</signature>
              <docrelurl>node_admin_paths/7</docrelurl>
            </item>
            <item name= "node_assign_owner_action">
              <description>Assigns ownership of a node to a user.</description>
              <signature>node_assign_owner_action($node, $context)</signature>
              <docrelurl>node_assign_owner_action/7</docrelurl>
            </item>
            <item name= "node_assign_owner_action_form">
              <description>Generates the settings form for node_assign_owner_action().</description>
              <signature>node_assign_owner_action_form($context)</signature>
              <docrelurl>node_assign_owner_action_form/7</docrelurl>
            </item>
            <item name= "node_assign_owner_action_submit">
              <description>Saves settings form for node_assign_owner_action().</description>
              <signature>node_assign_owner_action_submit($form, $form_state)</signature>
              <docrelurl>node_assign_owner_action_submit/7</docrelurl>
            </item>
            <item name= "node_assign_owner_action_validate">
              <description>Validates settings form for node_assign_owner_action().</description>
              <signature>node_assign_owner_action_validate($form, $form_state)</signature>
              <docrelurl>node_assign_owner_action_validate/7</docrelurl>
            </item>
            <item name= "node_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>node_block_configure($delta = '')</signature>
              <docrelurl>node_block_configure/7</docrelurl>
            </item>
            <item name= "node_block_info">
              <description>Implements hook_block_info().</description>
              <signature>node_block_info()</signature>
              <docrelurl>node_block_info/7</docrelurl>
            </item>
            <item name= "node_block_list_alter">
              <description>Implements hook_block_list_alter(). Check the content type specific visibilty settings. Remove the block if the visibility conditions are not met.</description>
              <signature>node_block_list_alter(&amp;$blocks)</signature>
              <docrelurl>node_block_list_alter/7</docrelurl>
            </item>
            <item name= "node_block_save">
              <description>Implements hook_block_save().</description>
              <signature>node_block_save($delta = '', $edit = array())</signature>
              <docrelurl>node_block_save/7</docrelurl>
            </item>
            <item name= "node_block_view">
              <description>Implements hook_block_view().</description>
              <signature>node_block_view($delta = '')</signature>
              <docrelurl>node_block_view/7</docrelurl>
            </item>
            <item name= "node_build_content">
              <description>Builds a structured array representing the node's content. The content built for the node (field values, comments, file attachments or other node components) will vary depending on the $view_mode parameter.</description>
              <signature>node_build_content($node, $view_mode = 'full')</signature>
              <docrelurl>node_build_content/7</docrelurl>
            </item>
            <item name= "node_build_filter_query">
              <description>Apply filters for node administration filters based on session.</description>
              <signature>node_build_filter_query(SelectQueryInterface $query)</signature>
              <docrelurl>node_build_filter_query/7</docrelurl>
            </item>
            <item name= "node_configure_rebuild_confirm">
              <description>Menu callback: confirm rebuilding of permissions.</description>
              <signature>node_configure_rebuild_confirm()</signature>
              <docrelurl>node_configure_rebuild_confirm/7</docrelurl>
            </item>
            <item name= "node_configure_rebuild_confirm_submit">
              <description>Handler for wipe confirmation</description>
              <signature>node_configure_rebuild_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_configure_rebuild_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_content_form">
              <description>Implements hook_form().</description>
              <signature>node_content_form($node, $form_state)</signature>
              <docrelurl>node_content_form/7</docrelurl>
            </item>
            <item name= "node_cron">
              <description>Implements hook_cron().</description>
              <signature>node_cron()</signature>
              <docrelurl>node_cron/7</docrelurl>
            </item>
            <item name= "node_delete">
              <description>Delete a node.</description>
              <signature>node_delete($nid)</signature>
              <docrelurl>node_delete/7</docrelurl>
            </item>
            <item name= "node_delete_confirm">
              <description>Menu callback -- ask for confirmation of node deletion</description>
              <signature>node_delete_confirm($form, &amp;$form_state, $node)</signature>
              <docrelurl>node_delete_confirm/7</docrelurl>
            </item>
            <item name= "node_delete_confirm_submit">
              <description>Execute node deletion</description>
              <signature>node_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_delete_multiple">
              <description>Delete multiple nodes.</description>
              <signature>node_delete_multiple($nids)</signature>
              <docrelurl>node_delete_multiple/7</docrelurl>
            </item>
            <item name= "node_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>node_entity_info()</signature>
              <docrelurl>node_entity_info/7</docrelurl>
            </item>
            <item name= "node_feed">
              <description>A generic function for generating RSS feeds from a set of nodes.</description>
              <signature>node_feed($nids = FALSE, $channel = array())</signature>
              <docrelurl>node_feed/7</docrelurl>
            </item>
            <item name= "node_field_display_node_alter">
              <description>Implements hook_field_display_ENTITY_TYPE_alter().</description>
              <signature>node_field_display_node_alter(&amp;$display, $context)</signature>
              <docrelurl>node_field_display_node_alter/7</docrelurl>
            </item>
            <item name= "node_field_extra_fields">
              <description>Implements hook_field_extra_fields().</description>
              <signature>node_field_extra_fields()</signature>
              <docrelurl>node_field_extra_fields/7</docrelurl>
            </item>
            <item name= "node_filters">
              <description>List node administration filters that can be applied.</description>
              <signature>node_filters()</signature>
              <docrelurl>node_filters/7</docrelurl>
            </item>
            <item name= "node_filter_form">
              <description>Return form for node administration filters.</description>
              <signature>node_filter_form()</signature>
              <docrelurl>node_filter_form/7</docrelurl>
            </item>
            <item name= "node_filter_form_submit">
              <description>Process result from node administration filter form.</description>
              <signature>node_filter_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_filter_form_submit/7</docrelurl>
            </item>
            <item name= "node_form">
              <description>Generate the node add/edit form array.</description>
              <signature>node_form($form, &amp;$form_state, $node)</signature>
              <docrelurl>node_form/7</docrelurl>
            </item>
            <item name= "node_forms">
              <description>Implements hook_forms(). All node forms share the same form handler.</description>
              <signature>node_forms()</signature>
              <docrelurl>node_forms/7</docrelurl>
            </item>
            <item name= "node_form_block_add_block_form_alter">
              <description>Implements hook_form_FORMID_alter(). Adds node-type specific visibility options to add block form.</description>
              <signature>node_form_block_add_block_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>node_form_block_add_block_form_alter/7</docrelurl>
            </item>
            <item name= "node_form_block_admin_configure_alter">
              <description>Implements hook_form_FORMID_alter(). Adds node-type specific visibility options to block configuration form.</description>
              <signature>node_form_block_admin_configure_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>node_form_block_admin_configure_alter/7</docrelurl>
            </item>
            <item name= "node_form_block_admin_configure_submit">
              <description>Form submit handler for block configuration form.</description>
              <signature>node_form_block_admin_configure_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_form_block_admin_configure_submit/7</docrelurl>
            </item>
            <item name= "node_form_block_custom_block_delete_alter">
              <description>Implements hook_form_FORMID_alter(). Adds node specific submit handler to delete custom block form.</description>
              <signature>node_form_block_custom_block_delete_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>node_form_block_custom_block_delete_alter/7</docrelurl>
            </item>
            <item name= "node_form_block_custom_block_delete_submit">
              <description>Form submit handler for custom block delete form.</description>
              <signature>node_form_block_custom_block_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_form_block_custom_block_delete_submit/7</docrelurl>
            </item>
            <item name= "node_form_build_preview">
              <description>Code modules/node/node.pages.inc, line 307</description>
              <signature>node_form_build_preview($form, &amp;$form_state)</signature>
              <docrelurl>node_form_build_preview/7</docrelurl>
            </item>
            <item name= "node_form_delete_submit">
              <description>Button submit function: handle the 'Delete' button on the node form.</description>
              <signature>node_form_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_form_delete_submit/7</docrelurl>
            </item>
            <item name= "node_form_search_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>node_form_search_form_alter(&amp;$form, $form_state)</signature>
              <docrelurl>node_form_search_form_alter/7</docrelurl>
            </item>
            <item name= "node_form_submit">
              <description>Code modules/node/node.pages.inc, line 391</description>
              <signature>node_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_form_submit/7</docrelurl>
            </item>
            <item name= "node_form_submit_build_node">
              <description>Updates the form state's node entity by processing this submission's values. This is the default #builder_function for the node form. It is called during the "Save" and "Preview" submit handlers to retrieve the entity to save or preview. This function can also be called by a "Next" button of a wizard to update the form state's entity with the current step's values before proceeding to the next step.</description>
              <signature>node_form_submit_build_node($form, &amp;$form_state)</signature>
              <docrelurl>node_form_submit_build_node/7</docrelurl>
            </item>
            <item name= "node_form_validate">
              <description>Code modules/node/node.pages.inc, line 78</description>
              <signature>node_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>node_form_validate/7</docrelurl>
            </item>
            <item name= "node_get_recent">
              <description>Find the most recent nodes that are available to the current user.</description>
              <signature>node_get_recent($number = 10)</signature>
              <docrelurl>node_get_recent/7</docrelurl>
            </item>
            <item name= "node_help">
              <description>Implements hook_help().</description>
              <signature>node_help($path, $arg)</signature>
              <docrelurl>node_help/7</docrelurl>
            </item>
            <item name= "node_hook">
              <description>Determine whether a node hook exists.</description>
              <signature>node_hook($node, $hook)</signature>
              <docrelurl>node_hook/7</docrelurl>
            </item>
            <item name= "node_init">
              <description>Implements hook_init().</description>
              <signature>node_init()</signature>
              <docrelurl>node_init/7</docrelurl>
            </item>
            <item name= "node_install">
              <description>Implements hook_install().</description>
              <signature>node_install()</signature>
              <docrelurl>node_install/7</docrelurl>
            </item>
            <item name= "node_invoke">
              <description>Invoke a node hook.</description>
              <signature>node_invoke($node, $hook, $a2 = NULL, $a3 = NULL, $a4 = NULL)</signature>
              <docrelurl>node_invoke/7</docrelurl>
            </item>
            <item name= "node_is_page">
              <description>Returns whether the current page is the full page view of the passed in node.</description>
              <signature>node_is_page($node)</signature>
              <docrelurl>node_is_page/7</docrelurl>
            </item>
            <item name= "node_last_changed">
              <description>
                ▸ 1 function calls node_last_changed()
                ▾ 1 function calls node_last_changed()
                node_validate in modules/node/node.module
                Perform validation checks on the given node.
              </description>
              <signature>node_last_changed($nid)</signature>
              <docrelurl>node_last_changed/7</docrelurl>
            </item>
            <item name= "node_last_viewed">
              <description>Retrieves the timestamp at which the current user last viewed the specified node.</description>
              <signature>node_last_viewed($nid)</signature>
              <docrelurl>node_last_viewed/7</docrelurl>
            </item>
            <item name= "node_list_permissions">
              <description>Helper function to generate standard node permission list for a given type.</description>
              <signature>node_list_permissions($type)</signature>
              <docrelurl>node_list_permissions/7</docrelurl>
            </item>
            <item name= "node_load">
              <description>Load a node object from the database.</description>
              <signature>node_load($nid = NULL, $vid = NULL, $reset = FALSE)</signature>
              <docrelurl>node_load/7</docrelurl>
            </item>
            <item name= "node_load_multiple">
              <description>Load node entities from the database. This function should be used whenever you need to load more than one node from the database. Nodes are loaded into memory and will not require database access if loaded again during the same page request.</description>
              <signature>node_load_multiple($nids = array(), $conditions = array(), $reset = FALSE)</signature>
              <docrelurl>node_load_multiple/7</docrelurl>
            </item>
            <item name= "node_make_sticky_action">
              <description>Sets the sticky-at-top-of-list property of a node to 1.</description>
              <signature>node_make_sticky_action($node, $context = array())</signature>
              <docrelurl>node_make_sticky_action/7</docrelurl>
            </item>
            <item name= "node_make_unsticky_action">
              <description>Sets the sticky-at-top-of-list property of a node to 0.</description>
              <signature>node_make_unsticky_action($node, $context = array())</signature>
              <docrelurl>node_make_unsticky_action/7</docrelurl>
            </item>
            <item name= "node_mark">
              <description>Decide on the type of marker to be displayed for a given node.</description>
              <signature>node_mark($nid, $timestamp)</signature>
              <docrelurl>node_mark/7</docrelurl>
            </item>
            <item name= "node_mass_update">
              <description>Make mass update of nodes, changing all nodes in the $nodes array to update them with the field values in $updates. IMPORTANT NOTE: This function is intended to work when called from a form submit handler. Calling it outside of the form submission process may not work correctly.</description>
              <signature>node_mass_update($nodes, $updates)</signature>
              <docrelurl>node_mass_update/7</docrelurl>
            </item>
            <item name= "node_menu">
              <description>Implements hook_menu().</description>
              <signature>node_menu()</signature>
              <docrelurl>node_menu/7</docrelurl>
            </item>
            <item name= "node_menu_local_tasks_alter">
              <description>Implements hook_menu_local_tasks_alter().</description>
              <signature>node_menu_local_tasks_alter(&amp;$data, $router_item, $root_path)</signature>
              <docrelurl>node_menu_local_tasks_alter/7</docrelurl>
            </item>
            <item name= "node_modules_enabled">
              <description>Implements hook_modules_enabled().</description>
              <signature>node_modules_enabled($modules)</signature>
              <docrelurl>node_modules_enabled/7</docrelurl>
            </item>
            <item name= "node_modules_uninstalled">
              <description>Implements hook_modules_uninstalled(). Cleanup {block_node_type} table from modules' blocks.</description>
              <signature>node_modules_uninstalled($modules)</signature>
              <docrelurl>node_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "node_multiple_delete_confirm">
              <description>
                ▸ 1 function calls node_multiple_delete_confirm()
                ▾ 1 function calls node_multiple_delete_confirm()
                node_admin_content in modules/node/node.admin.inc
                Menu callback: content administration.
              </description>
              <signature>node_multiple_delete_confirm($form, &amp;$form_state, $nodes)</signature>
              <docrelurl>node_multiple_delete_confirm/7</docrelurl>
            </item>
            <item name= "node_multiple_delete_confirm_submit">
              <description>Code modules/node/node.admin.inc, line 615</description>
              <signature>node_multiple_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_multiple_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_node_access">
              <description>Implements hook_node_access().</description>
              <signature>node_node_access($node, $op, $account)</signature>
              <docrelurl>node_node_access/7</docrelurl>
            </item>
            <item name= "node_node_operations">
              <description>Implements hook_node_operations().</description>
              <signature>node_node_operations()</signature>
              <docrelurl>node_node_operations/7</docrelurl>
            </item>
            <item name= "node_node_type_insert">
              <description>Implements hook_node_type_insert().</description>
              <signature>node_node_type_insert($info)</signature>
              <docrelurl>node_node_type_insert/7</docrelurl>
            </item>
            <item name= "node_node_type_update">
              <description>Implements hook_node_type_update().</description>
              <signature>node_node_type_update($info)</signature>
              <docrelurl>node_node_type_update/7</docrelurl>
            </item>
            <item name= "node_object_prepare">
              <description>Prepares a node object for editing. Fills in a few default values, and then invokes hook_prepare() on the node type module, and hook_node_prepare() on all modules.</description>
              <signature>node_object_prepare($node)</signature>
              <docrelurl>node_object_prepare/7</docrelurl>
            </item>
            <item name= "node_overview_types">
              <description>Displays the content type admin overview page.</description>
              <signature>node_overview_types()</signature>
              <docrelurl>node_overview_types/7</docrelurl>
            </item>
            <item name= "node_page_default">
              <description>Menu callback; Generate a listing of promoted nodes.</description>
              <signature>node_page_default()</signature>
              <docrelurl>node_page_default/7</docrelurl>
            </item>
            <item name= "node_page_edit">
              <description>Menu callback; presents the node editing form, or redirects to delete confirmation.</description>
              <signature>node_page_edit($node)</signature>
              <docrelurl>node_page_edit/7</docrelurl>
            </item>
            <item name= "node_page_title">
              <description>Title callback.</description>
              <signature>node_page_title($node)</signature>
              <docrelurl>node_page_title/7</docrelurl>
            </item>
            <item name= "node_page_view">
              <description>Menu callback; view a single node.</description>
              <signature>node_page_view($node)</signature>
              <docrelurl>node_page_view/7</docrelurl>
            </item>
            <item name= "node_permission">
              <description>Implements hook_permission().</description>
              <signature>node_permission()</signature>
              <docrelurl>node_permission/7</docrelurl>
            </item>
            <item name= "node_permissions_get_configured_types">
              <description>Returns an array of node types that should be managed by permissions. By default, this will include all node types in the system. To exclude a specific node from getting permissions defined for it, set the node_permissions_$type variable to 0. Core does not provide an interface for doing so, however, contrib modules may exclude their own nodes in hook_install(). Alternatively, contrib modules may configure all node types at once, or decide to apply some other hook_node_access() implementation to some or all node types.</description>
              <signature>node_permissions_get_configured_types()</signature>
              <docrelurl>node_permissions_get_configured_types/7</docrelurl>
            </item>
            <item name= "node_presave_test_node_presave">
              <description>Implements hook_node_presave().</description>
              <signature>node_presave_test_node_presave($node)</signature>
              <docrelurl>node_presave_test_node_presave/7</docrelurl>
            </item>
            <item name= "node_preview">
              <description>Generate a node preview.</description>
              <signature>node_preview($node)</signature>
              <docrelurl>node_preview/7</docrelurl>
            </item>
            <item name= "node_promote_action">
              <description>Sets the promote property of a node to 1.</description>
              <signature>node_promote_action($node, $context = array())</signature>
              <docrelurl>node_promote_action/7</docrelurl>
            </item>
            <item name= "node_publish_action">
              <description>Sets the status of a node to 1 (published).</description>
              <signature>node_publish_action($node, $context = array())</signature>
              <docrelurl>node_publish_action/7</docrelurl>
            </item>
            <item name= "node_query_node_access_alter">
              <description>Implements hook_query_TAG_alter(). This is the hook_query_alter() for queries tagged with 'node_access'. It adds node access checks for the user account given by the 'account' meta-data (or global $user if not provided), for an operation given by the 'op' meta-data (or 'view' if not provided; other possible values are 'update' and 'delete').</description>
              <signature>node_query_node_access_alter(QueryAlterableInterface $query)</signature>
              <docrelurl>node_query_node_access_alter/7</docrelurl>
            </item>
            <item name= "node_ranking">
              <description>Implements hook_ranking().</description>
              <signature>node_ranking()</signature>
              <docrelurl>node_ranking/7</docrelurl>
            </item>
            <item name= "node_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>node_rdf_mapping()</signature>
              <docrelurl>node_rdf_mapping/7</docrelurl>
            </item>
            <item name= "node_requirements">
              <description>Implements hook_requirements().</description>
              <signature>node_requirements($phase)</signature>
              <docrelurl>node_requirements/7</docrelurl>
            </item>
            <item name= "node_revision_delete">
              <description>Delete a node revision.</description>
              <signature>node_revision_delete($revision_id)</signature>
              <docrelurl>node_revision_delete/7</docrelurl>
            </item>
            <item name= "node_revision_delete_confirm">
              <description>Code modules/node/node.pages.inc, line 556</description>
              <signature>node_revision_delete_confirm($form, $form_state, $node_revision)</signature>
              <docrelurl>node_revision_delete_confirm/7</docrelurl>
            </item>
            <item name= "node_revision_delete_confirm_submit">
              <description>Code modules/node/node.pages.inc, line 561</description>
              <signature>node_revision_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_revision_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_revision_list">
              <description>Return a list of all the existing revision numbers.</description>
              <signature>node_revision_list($node)</signature>
              <docrelurl>node_revision_list/7</docrelurl>
            </item>
            <item name= "node_revision_overview">
              <description>Generate an overview table of older revisions of a node.</description>
              <signature>node_revision_overview($node)</signature>
              <docrelurl>node_revision_overview/7</docrelurl>
            </item>
            <item name= "node_revision_revert_confirm">
              <description>Ask for confirmation of the reversion to prevent against CSRF attacks.</description>
              <signature>node_revision_revert_confirm($form, $form_state, $node_revision)</signature>
              <docrelurl>node_revision_revert_confirm/7</docrelurl>
            </item>
            <item name= "node_revision_revert_confirm_submit">
              <description>Code modules/node/node.pages.inc, line 544</description>
              <signature>node_revision_revert_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_revision_revert_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_save">
              <description>Save changes to a node or add a new node.</description>
              <signature>node_save($node)</signature>
              <docrelurl>node_save/7</docrelurl>
            </item>
            <item name= "node_save_action">
              <description>Saves a node.</description>
              <signature>node_save_action($node)</signature>
              <docrelurl>node_save_action/7</docrelurl>
            </item>
            <item name= "node_schema">
              <description>Implements hook_schema().</description>
              <signature>node_schema()</signature>
              <docrelurl>node_schema/7</docrelurl>
            </item>
            <item name= "node_search_access">
              <description>Implements hook_search_access().</description>
              <signature>node_search_access()</signature>
              <docrelurl>node_search_access/7</docrelurl>
            </item>
            <item name= "node_search_admin">
              <description>Implements hook_search_admin().</description>
              <signature>node_search_admin()</signature>
              <docrelurl>node_search_admin/7</docrelurl>
            </item>
            <item name= "node_search_execute">
              <description>Implements hook_search_execute().</description>
              <signature>node_search_execute($keys = NULL)</signature>
              <docrelurl>node_search_execute/7</docrelurl>
            </item>
            <item name= "node_search_info">
              <description>Implements hook_search_info().</description>
              <signature>node_search_info()</signature>
              <docrelurl>node_search_info/7</docrelurl>
            </item>
            <item name= "node_search_reset">
              <description>Implements hook_search_reset().</description>
              <signature>node_search_reset()</signature>
              <docrelurl>node_search_reset/7</docrelurl>
            </item>
            <item name= "node_search_status">
              <description>Implements hook_search_status().</description>
              <signature>node_search_status()</signature>
              <docrelurl>node_search_status/7</docrelurl>
            </item>
            <item name= "node_search_validate">
              <description>Form API callback for the search form. Registered in node_form_alter().</description>
              <signature>node_search_validate($form, &amp;$form_state)</signature>
              <docrelurl>node_search_validate/7</docrelurl>
            </item>
            <item name= "node_show">
              <description>Generate an array which displays a node detail page.</description>
              <signature>node_show($node, $message = FALSE)</signature>
              <docrelurl>node_show/7</docrelurl>
            </item>
            <item name= "node_submit">
              <description>Prepare node for saving by populating author and creation date.</description>
              <signature>node_submit($node)</signature>
              <docrelurl>node_submit/7</docrelurl>
            </item>
            <item name= "node_tag_new">
              <description>Update the 'last viewed' timestamp of the specified node for current user.</description>
              <signature>node_tag_new($node)</signature>
              <docrelurl>node_tag_new/7</docrelurl>
            </item>
            <item name= "node_test_exception_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>node_test_exception_node_insert($node)</signature>
              <docrelurl>node_test_exception_node_insert/7</docrelurl>
            </item>
            <item name= "node_test_node_access_records">
              <description>Implements hook_node_access_records().</description>
              <signature>node_test_node_access_records($node)</signature>
              <docrelurl>node_test_node_access_records/7</docrelurl>
            </item>
            <item name= "node_test_node_access_records_alter">
              <description>Implements hook_node_access_records_alter().</description>
              <signature>node_test_node_access_records_alter(&amp;$grants, $node)</signature>
              <docrelurl>node_test_node_access_records_alter/7</docrelurl>
            </item>
            <item name= "node_test_node_grants">
              <description>Implements hook_node_grants().</description>
              <signature>node_test_node_grants($account, $op)</signature>
              <docrelurl>node_test_node_grants/7</docrelurl>
            </item>
            <item name= "node_test_node_grants_alter">
              <description>Implements hook_node_grants_alter().</description>
              <signature>node_test_node_grants_alter(&amp;$grants, $account, $op)</signature>
              <docrelurl>node_test_node_grants_alter/7</docrelurl>
            </item>
            <item name= "node_test_node_presave">
              <description>Implements hook_node_presave().</description>
              <signature>node_test_node_presave($node)</signature>
              <docrelurl>node_test_node_presave/7</docrelurl>
            </item>
            <item name= "node_test_node_view">
              <description>Implements hook_node_view().</description>
              <signature>node_test_node_view($node, $view_mode)</signature>
              <docrelurl>node_test_node_view/7</docrelurl>
            </item>
            <item name= "node_theme">
              <description>Implements hook_theme().</description>
              <signature>node_theme()</signature>
              <docrelurl>node_theme/7</docrelurl>
            </item>
            <item name= "node_title_list">
              <description>Gathers a listing of links to nodes.</description>
              <signature>node_title_list($result, $title = NULL)</signature>
              <docrelurl>node_title_list/7</docrelurl>
            </item>
            <item name= "node_tokens">
              <description>Implements hook_tokens().</description>
              <signature>node_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>node_tokens/7</docrelurl>
            </item>
            <item name= "node_token_info">
              <description>Implements hook_token_info().</description>
              <signature>node_token_info()</signature>
              <docrelurl>node_token_info/7</docrelurl>
            </item>
            <item name= "node_types_rebuild">
              <description>Updates the database cache of node types. All new module-defined node types are saved to the database via a call to node_type_save(), and obsolete ones are deleted via a call to node_type_delete(). See _node_types_build() for an explanation of the new and obsolete types.</description>
              <signature>node_types_rebuild()</signature>
              <docrelurl>node_types_rebuild/7</docrelurl>
            </item>
            <item name= "node_type_delete">
              <description>Deletes a node type from the database.</description>
              <signature>node_type_delete($type)</signature>
              <docrelurl>node_type_delete/7</docrelurl>
            </item>
            <item name= "node_type_delete_confirm">
              <description>Menu callback; delete a single content type.</description>
              <signature>node_type_delete_confirm($form, &amp;$form_state, $type)</signature>
              <docrelurl>node_type_delete_confirm/7</docrelurl>
            </item>
            <item name= "node_type_delete_confirm_submit">
              <description>Process content type delete confirm submissions.</description>
              <signature>node_type_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_type_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "node_type_form">
              <description>Generates the node type editing form.</description>
              <signature>node_type_form($form, &amp;$form_state, $type = NULL)</signature>
              <docrelurl>node_type_form/7</docrelurl>
            </item>
            <item name= "node_type_form_submit">
              <description>Implements hook_form_submit().</description>
              <signature>node_type_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>node_type_form_submit/7</docrelurl>
            </item>
            <item name= "node_type_form_validate">
              <description>Validates the content type submission form generated by node_type_form().</description>
              <signature>node_type_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>node_type_form_validate/7</docrelurl>
            </item>
            <item name= "node_type_get_base">
              <description>Returns the node type base of the passed node or node type string. The base indicates which module implements this node type and is used to execute node-type-specific hooks. For types defined in the user interface and managed by node.module, the base is 'node_content'.</description>
              <signature>node_type_get_base($node)</signature>
              <docrelurl>node_type_get_base/7</docrelurl>
            </item>
            <item name= "node_type_get_name">
              <description>Returns the node type name of the passed node or node type string.</description>
              <signature>node_type_get_name($node)</signature>
              <docrelurl>node_type_get_name/7</docrelurl>
            </item>
            <item name= "node_type_get_names">
              <description>Returns a list of available node type names. This list can include types that are queued for addition or deletion. See _node_types_build() for details.</description>
              <signature>node_type_get_names()</signature>
              <docrelurl>node_type_get_names/7</docrelurl>
            </item>
            <item name= "node_type_get_type">
              <description>Returns the node type of the passed node or node type string.</description>
              <signature>node_type_get_type($node)</signature>
              <docrelurl>node_type_get_type/7</docrelurl>
            </item>
            <item name= "node_type_get_types">
              <description>Returns a list of all the available node types. This list can include types that are queued for addition or deletion. See _node_types_build() for details.</description>
              <signature>node_type_get_types()</signature>
              <docrelurl>node_type_get_types/7</docrelurl>
            </item>
            <item name= "node_type_load">
              <description>Menu argument loader: loads a node type by string.</description>
              <signature>node_type_load($name)</signature>
              <docrelurl>node_type_load/7</docrelurl>
            </item>
            <item name= "node_type_page_title">
              <description>Title callback for a node type.</description>
              <signature>node_type_page_title($type)</signature>
              <docrelurl>node_type_page_title/7</docrelurl>
            </item>
            <item name= "node_type_reset">
              <description>Resets all of the relevant fields of a module-defined node type to their default values.</description>
              <signature>node_type_reset($type)</signature>
              <docrelurl>node_type_reset/7</docrelurl>
            </item>
            <item name= "node_type_save">
              <description>Saves a node type to the database.</description>
              <signature>node_type_save($info)</signature>
              <docrelurl>node_type_save/7</docrelurl>
            </item>
            <item name= "node_type_set_defaults">
              <description>Set the default values for a node type. The defaults are for a type defined through hook_node_info(). When populating a custom node type $info should have the 'custom' key set to 1.</description>
              <signature>node_type_set_defaults($info = array())</signature>
              <docrelurl>node_type_set_defaults/7</docrelurl>
            </item>
            <item name= "node_type_update_nodes">
              <description>Updates all nodes of one type to be of another type.</description>
              <signature>node_type_update_nodes($old_type, $type)</signature>
              <docrelurl>node_type_update_nodes/7</docrelurl>
            </item>
            <item name= "node_unpromote_action">
              <description>Sets the promote property of a node to 0.</description>
              <signature>node_unpromote_action($node, $context = array())</signature>
              <docrelurl>node_unpromote_action/7</docrelurl>
            </item>
            <item name= "node_unpublish_action">
              <description>Sets the status of a node to 0 (unpublished).</description>
              <signature>node_unpublish_action($node, $context = array())</signature>
              <docrelurl>node_unpublish_action/7</docrelurl>
            </item>
            <item name= "node_unpublish_by_keyword_action">
              <description>Unpublishes a node containing certain keywords.</description>
              <signature>node_unpublish_by_keyword_action($node, $context)</signature>
              <docrelurl>node_unpublish_by_keyword_action/7</docrelurl>
            </item>
            <item name= "node_unpublish_by_keyword_action_form">
              <description>Generates settings form for node_unpublish_by_keyword_action().</description>
              <signature>node_unpublish_by_keyword_action_form($context)</signature>
              <docrelurl>node_unpublish_by_keyword_action_form/7</docrelurl>
            </item>
            <item name= "node_unpublish_by_keyword_action_submit">
              <description>Saves settings form for node_unpublish_by_keyword_action().</description>
              <signature>node_unpublish_by_keyword_action_submit($form, $form_state)</signature>
              <docrelurl>node_unpublish_by_keyword_action_submit/7</docrelurl>
            </item>
            <item name= "node_update_7000">
              <description>Fix node type 'module' attribute to avoid name-space conflicts.</description>
              <signature>node_update_7000()</signature>
              <docrelurl>node_update_7000/7</docrelurl>
            </item>
            <item name= "node_update_7001">
              <description>Rename {node_revisions} table to {node_revision}.</description>
              <signature>node_update_7001()</signature>
              <docrelurl>node_update_7001/7</docrelurl>
            </item>
            <item name= "node_update_7002">
              <description>Extend the node_promote_status index to include all fields required for the node page query.</description>
              <signature>node_update_7002()</signature>
              <docrelurl>node_update_7002/7</docrelurl>
            </item>
            <item name= "node_update_7003">
              <description>Remove the node_counter if the statistics module is uninstalled.</description>
              <signature>node_update_7003()</signature>
              <docrelurl>node_update_7003/7</docrelurl>
            </item>
            <item name= "node_update_7004">
              <description>Extend the existing default preview and teaser settings to all node types.</description>
              <signature>node_update_7004()</signature>
              <docrelurl>node_update_7004/7</docrelurl>
            </item>
            <item name= "node_update_7005">
              <description>Add status/comment/promote and sticky columns to the {node_revision} table.</description>
              <signature>node_update_7005()</signature>
              <docrelurl>node_update_7005/7</docrelurl>
            </item>
            <item name= "node_update_7006">
              <description>Convert body and teaser from node properties to fields, and migrate status/comment/promote and sticky columns to the {node_revision} table.</description>
              <signature>node_update_7006(&amp;$sandbox)</signature>
              <docrelurl>node_update_7006/7</docrelurl>
            </item>
            <item name= "node_update_7007">
              <description>Remove column min_word_count.</description>
              <signature>node_update_7007()</signature>
              <docrelurl>node_update_7007/7</docrelurl>
            </item>
            <item name= "node_update_7008">
              <description>Split the 'administer nodes' permission from 'access content overview'.</description>
              <signature>node_update_7008()</signature>
              <docrelurl>node_update_7008/7</docrelurl>
            </item>
            <item name= "node_update_7009">
              <description>Convert node languages from the empty string to LANGUAGE_NONE.</description>
              <signature>node_update_7009()</signature>
              <docrelurl>node_update_7009/7</docrelurl>
            </item>
            <item name= "node_update_7010">
              <description>Add the {block_node_type} table.</description>
              <signature>node_update_7010()</signature>
              <docrelurl>node_update_7010/7</docrelurl>
            </item>
            <item name= "node_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>node_update_dependencies()</signature>
              <docrelurl>node_update_dependencies/7</docrelurl>
            </item>
            <item name= "node_update_index">
              <description>Implements hook_update_index().</description>
              <signature>node_update_index()</signature>
              <docrelurl>node_update_index/7</docrelurl>
            </item>
            <item name= "node_uri">
              <description>Entity uri callback.</description>
              <signature>node_uri($node)</signature>
              <docrelurl>node_uri/7</docrelurl>
            </item>
            <item name= "node_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>node_user_cancel($edit, $account, $method)</signature>
              <docrelurl>node_user_cancel/7</docrelurl>
            </item>
            <item name= "node_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>node_user_delete($account)</signature>
              <docrelurl>node_user_delete/7</docrelurl>
            </item>
            <item name= "node_validate">
              <description>Perform validation checks on the given node.</description>
              <signature>node_validate($node, $form = array())</signature>
              <docrelurl>node_validate/7</docrelurl>
            </item>
            <item name= "node_view">
              <description>Generate an array for rendering the given node.</description>
              <signature>node_view($node, $view_mode = 'full')</signature>
              <docrelurl>node_view/7</docrelurl>
            </item>
            <item name= "node_view_multiple">
              <description>Construct a drupal_render() style array from an array of loaded nodes.</description>
              <signature>node_view_multiple($nodes, $view_mode = 'teaser', $weight = 0)</signature>
              <docrelurl>node_view_multiple/7</docrelurl>
            </item>
            <item name= "number_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>number_field_formatter_info()</signature>
              <docrelurl>number_field_formatter_info/7</docrelurl>
            </item>
            <item name= "number_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>number_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>number_field_formatter_view/7</docrelurl>
            </item>
            <item name= "number_field_info">
              <description>Implements hook_field_info().</description>
              <signature>number_field_info()</signature>
              <docrelurl>number_field_info/7</docrelurl>
            </item>
            <item name= "number_field_instance_settings_form">
              <description>Implements hook_field_instance_settings_form().</description>
              <signature>number_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>number_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "number_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>number_field_is_empty($item, $field)</signature>
              <docrelurl>number_field_is_empty/7</docrelurl>
            </item>
            <item name= "number_field_presave">
              <description>Implements hook_field_presave().</description>
              <signature>number_field_presave($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>number_field_presave/7</docrelurl>
            </item>
            <item name= "number_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>number_field_schema($field)</signature>
              <docrelurl>number_field_schema/7</docrelurl>
            </item>
            <item name= "number_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>number_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>number_field_settings_form/7</docrelurl>
            </item>
            <item name= "number_field_validate">
              <description>Implements hook_field_validate(). Possible error codes:</description>
              <signature>number_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>number_field_validate/7</docrelurl>
            </item>
            <item name= "number_field_widget_error">
              <description>Implements hook_field_widget_error().</description>
              <signature>number_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>number_field_widget_error/7</docrelurl>
            </item>
            <item name= "number_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>number_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>number_field_widget_form/7</docrelurl>
            </item>
            <item name= "number_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>number_field_widget_info()</signature>
              <docrelurl>number_field_widget_info/7</docrelurl>
            </item>
            <item name= "number_field_widget_validate">
              <description>FAPI validation of an individual number element.</description>
              <signature>number_field_widget_validate($element, &amp;$form_state)</signature>
              <docrelurl>number_field_widget_validate/7</docrelurl>
            </item>
            <item name= "number_help">
              <description>Implements hook_help().</description>
              <signature>number_help($path, $arg)</signature>
              <docrelurl>number_help/7</docrelurl>
            </item>
            <item name= "openid_association">
              <description>Attempt to create a shared secret with the OpenID Provider.</description>
              <signature>openid_association($op_endpoint)</signature>
              <docrelurl>openid_association/7</docrelurl>
            </item>
            <item name= "openid_association_request">
              <description>
                ▸ 1 function calls openid_association_request()
                ▾ 1 function calls openid_association_request()
                openid_association in modules/openid/openid.module
                Attempt to create a shared secret with the OpenID Provider.
              </description>
              <signature>openid_association_request($public)</signature>
              <docrelurl>openid_association_request/7</docrelurl>
            </item>
            <item name= "openid_authentication">
              <description>Authenticate a user or attempt registration.</description>
              <signature>openid_authentication($response)</signature>
              <docrelurl>openid_authentication/7</docrelurl>
            </item>
            <item name= "openid_authentication_page">
              <description>Menu callback; Process an OpenID authentication.</description>
              <signature>openid_authentication_page()</signature>
              <docrelurl>openid_authentication_page/7</docrelurl>
            </item>
            <item name= "openid_authentication_request">
              <description>
                ▸ 1 function calls openid_authentication_request()
                ▾ 1 function calls openid_authentication_request()
                openid_begin in modules/openid/openid.module
                The initial step of OpenID authentication responsible for the following:
              </description>
              <signature>openid_authentication_request($claimed_id, $identity, $return_to = '', $assoc_handle = '', $service)</signature>
              <docrelurl>openid_authentication_request/7</docrelurl>
            </item>
            <item name= "openid_begin">
              <description>The initial step of OpenID authentication responsible for the following:</description>
              <signature>openid_begin($claimed_id, $return_to = '', $form_values = array())</signature>
              <docrelurl>openid_begin/7</docrelurl>
            </item>
            <item name= "openid_complete">
              <description>Completes OpenID authentication by validating returned data from the OpenID Provider.</description>
              <signature>openid_complete($response = array())</signature>
              <docrelurl>openid_complete/7</docrelurl>
            </item>
            <item name= "openid_discovery">
              <description>Perform discovery on a claimed ID to determine the OpenID provider endpoint.</description>
              <signature>openid_discovery($claimed_id)</signature>
              <docrelurl>openid_discovery/7</docrelurl>
            </item>
            <item name= "openid_extract_ax_values">
              <description>Extracts values from an OpenID AX Response. The values can be returned in two forms:</description>
              <signature>openid_extract_ax_values($values, $aliases)</signature>
              <docrelurl>openid_extract_ax_values/7</docrelurl>
            </item>
            <item name= "openid_extract_namespace">
              <description>Extract all the parameters belonging to an extension in a response message. OpenID 2.0 defines a simple extension mechanism, based on a namespace prefix.</description>
              <signature>openid_extract_namespace($response, $extension_namespace, $fallback_prefix = NULL)</signature>
              <docrelurl>openid_extract_namespace/7</docrelurl>
            </item>
            <item name= "openid_form_user_login_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>openid_form_user_login_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>openid_form_user_login_alter/7</docrelurl>
            </item>
            <item name= "openid_form_user_login_block_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>openid_form_user_login_block_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>openid_form_user_login_block_alter/7</docrelurl>
            </item>
            <item name= "openid_form_user_register_form_alter">
              <description>Implements hook_form_FORM_ID_alter(). Prefills the login form with values acquired via OpenID.</description>
              <signature>openid_form_user_register_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>openid_form_user_register_form_alter/7</docrelurl>
            </item>
            <item name= "openid_help">
              <description>Implements hook_help().</description>
              <signature>openid_help($path, $arg)</signature>
              <docrelurl>openid_help/7</docrelurl>
            </item>
            <item name= "openid_login_validate">
              <description>Login form _validate hook</description>
              <signature>openid_login_validate($form, &amp;$form_state)</signature>
              <docrelurl>openid_login_validate/7</docrelurl>
            </item>
            <item name= "openid_menu">
              <description>Implements hook_menu().</description>
              <signature>openid_menu()</signature>
              <docrelurl>openid_menu/7</docrelurl>
            </item>
            <item name= "openid_normalize">
              <description>Normalize the given identifier. The procedure is described in OpenID Authentication 2.0, section 7.2.</description>
              <signature>openid_normalize($identifier)</signature>
              <docrelurl>openid_normalize/7</docrelurl>
            </item>
            <item name= "openid_openid_discovery_method_info">
              <description>Implementation of hook_openid_discovery_method_info(). Define standard discovery methods.</description>
              <signature>openid_openid_discovery_method_info()</signature>
              <docrelurl>openid_openid_discovery_method_info/7</docrelurl>
            </item>
            <item name= "openid_openid_normalization_method_info">
              <description>Implementation of hook_openid_normalization_method_info(). Define standard normalization methods.</description>
              <signature>openid_openid_normalization_method_info()</signature>
              <docrelurl>openid_openid_normalization_method_info/7</docrelurl>
            </item>
            <item name= "openid_redirect">
              <description>Creates a js auto-submit redirect for (for the 2.x protocol)</description>
              <signature>openid_redirect($url, $message)</signature>
              <docrelurl>openid_redirect/7</docrelurl>
            </item>
            <item name= "openid_redirect_form">
              <description>Code modules/openid/openid.inc, line 106</description>
              <signature>openid_redirect_form($form, &amp;$form_state, $url, $message)</signature>
              <docrelurl>openid_redirect_form/7</docrelurl>
            </item>
            <item name= "openid_redirect_http">
              <description>Performs an HTTP 302 redirect (for the 1.x protocol).</description>
              <signature>openid_redirect_http($url, $message)</signature>
              <docrelurl>openid_redirect_http/7</docrelurl>
            </item>
            <item name= "openid_requirements">
              <description>Implements hook_requirements().</description>
              <signature>openid_requirements($phase)</signature>
              <docrelurl>openid_requirements/7</docrelurl>
            </item>
            <item name= "openid_schema">
              <description>Implements hook_schema().</description>
              <signature>openid_schema()</signature>
              <docrelurl>openid_schema/7</docrelurl>
            </item>
            <item name= "openid_test_endpoint">
              <description>Menu callback; OpenID Provider Endpoint. It accepts "associate" requests directly from the Relying Party, and "checkid_setup" requests made by the user's browser based on HTTP redirects (in OpenID 1) or HTML forms (in OpenID 2) generated by the Relying Party.</description>
              <signature>openid_test_endpoint()</signature>
              <docrelurl>openid_test_endpoint/7</docrelurl>
            </item>
            <item name= "openid_test_html_openid1">
              <description>Menu callback; regular HTML page with OpenID 1.0 &lt;link&gt; element.</description>
              <signature>openid_test_html_openid1()</signature>
              <docrelurl>openid_test_html_openid1/7</docrelurl>
            </item>
            <item name= "openid_test_html_openid2">
              <description>Menu callback; regular HTML page with OpenID 2.0 &lt;link&gt; element.</description>
              <signature>openid_test_html_openid2()</signature>
              <docrelurl>openid_test_html_openid2/7</docrelurl>
            </item>
            <item name= "openid_test_install">
              <description>Implements hook_install().</description>
              <signature>openid_test_install()</signature>
              <docrelurl>openid_test_install/7</docrelurl>
            </item>
            <item name= "openid_test_menu">
              <description>Implements hook_menu().</description>
              <signature>openid_test_menu()</signature>
              <docrelurl>openid_test_menu/7</docrelurl>
            </item>
            <item name= "openid_test_yadis_http_equiv">
              <description>Menu callback; regular HTML page with &lt;meta&gt; element.</description>
              <signature>openid_test_yadis_http_equiv()</signature>
              <docrelurl>openid_test_yadis_http_equiv/7</docrelurl>
            </item>
            <item name= "openid_test_yadis_xrds">
              <description>Menu callback; XRDS document that references the OP Endpoint URL.</description>
              <signature>openid_test_yadis_xrds()</signature>
              <docrelurl>openid_test_yadis_xrds/7</docrelurl>
            </item>
            <item name= "openid_test_yadis_x_xrds_location">
              <description>Menu callback; regular HTML page with an X-XRDS-Location HTTP header.</description>
              <signature>openid_test_yadis_x_xrds_location()</signature>
              <docrelurl>openid_test_yadis_x_xrds_location/7</docrelurl>
            </item>
            <item name= "openid_user_add">
              <description>Form builder; Add an OpenID identity.</description>
              <signature>openid_user_add()</signature>
              <docrelurl>openid_user_add/7</docrelurl>
            </item>
            <item name= "openid_user_add_submit">
              <description>Code modules/openid/openid.pages.inc, line 89</description>
              <signature>openid_user_add_submit($form, &amp;$form_state)</signature>
              <docrelurl>openid_user_add_submit/7</docrelurl>
            </item>
            <item name= "openid_user_add_validate">
              <description>Code modules/openid/openid.pages.inc, line 81</description>
              <signature>openid_user_add_validate($form, &amp;$form_state)</signature>
              <docrelurl>openid_user_add_validate/7</docrelurl>
            </item>
            <item name= "openid_user_delete_form">
              <description>Menu callback; Delete the specified OpenID identity from the system.</description>
              <signature>openid_user_delete_form($form, $form_state, $account, $aid = 0)</signature>
              <docrelurl>openid_user_delete_form/7</docrelurl>
            </item>
            <item name= "openid_user_delete_form_submit">
              <description>Code modules/openid/openid.pages.inc, line 106</description>
              <signature>openid_user_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>openid_user_delete_form_submit/7</docrelurl>
            </item>
            <item name= "openid_user_identities">
              <description>Menu callback; Manage OpenID identities for the specified user.</description>
              <signature>openid_user_identities($account)</signature>
              <docrelurl>openid_user_identities/7</docrelurl>
            </item>
            <item name= "openid_user_insert">
              <description>Implements hook_user_insert().</description>
              <signature>openid_user_insert(&amp;$edit, $account, $category)</signature>
              <docrelurl>openid_user_insert/7</docrelurl>
            </item>
            <item name= "openid_user_login">
              <description>Implements hook_user_login(). Save openid_identifier to visitor cookie.</description>
              <signature>openid_user_login(&amp;$edit, $account)</signature>
              <docrelurl>openid_user_login/7</docrelurl>
            </item>
            <item name= "openid_user_logout">
              <description>Implements hook_user_logout(). Delete any openid_identifier in visitor cookie.</description>
              <signature>openid_user_logout($account)</signature>
              <docrelurl>openid_user_logout/7</docrelurl>
            </item>
            <item name= "openid_verify_assertion">
              <description>Attempt to verify the response received from the OpenID Provider.</description>
              <signature>openid_verify_assertion($op_endpoint, $response)</signature>
              <docrelurl>openid_verify_assertion/7</docrelurl>
            </item>
            <item name= "options_array_flatten">
              <description>Flattens an array of allowed values.</description>
              <signature>options_array_flatten($array)</signature>
              <docrelurl>options_array_flatten/7</docrelurl>
            </item>
            <item name= "options_array_transpose">
              <description>Manipulates a 2D array to reverse rows and columns. The default data storage for fields is delta first, column names second. This is sometimes inconvenient for field modules, so this function can be used to present the data in an alternate format.</description>
              <signature>options_array_transpose($array)</signature>
              <docrelurl>options_array_transpose/7</docrelurl>
            </item>
            <item name= "options_field_widget_error">
              <description>Implements hook_field_widget_error().</description>
              <signature>options_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>options_field_widget_error/7</docrelurl>
            </item>
            <item name= "options_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>options_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>options_field_widget_form/7</docrelurl>
            </item>
            <item name= "options_field_widget_info">
              <description>Implements hook_field_widget_info(). Field type modules willing to use those widgets should:</description>
              <signature>options_field_widget_info()</signature>
              <docrelurl>options_field_widget_info/7</docrelurl>
            </item>
            <item name= "options_field_widget_validate">
              <description>Form element validation handler for options element.</description>
              <signature>options_field_widget_validate($element, &amp;$form_state)</signature>
              <docrelurl>options_field_widget_validate/7</docrelurl>
            </item>
            <item name= "options_help">
              <description>Implements hook_help().</description>
              <signature>options_help($path, $arg)</signature>
              <docrelurl>options_help/7</docrelurl>
            </item>
            <item name= "options_theme">
              <description>Implements hook_theme().</description>
              <signature>options_theme()</signature>
              <docrelurl>options_theme/7</docrelurl>
            </item>
            <item name= "overlay_ajax_render_region">
              <description>Prints the markup obtained by rendering a single region of the page. This function is intended to be called via AJAX.</description>
              <signature>overlay_ajax_render_region($region)</signature>
              <docrelurl>overlay_ajax_render_region/7</docrelurl>
            </item>
            <item name= "overlay_batch_alter">
              <description>Implements hook_batch_alter(). If the current page request is inside the overlay, add ?render=overlay to the success callback URL, so that it appears correctly within the overlay.</description>
              <signature>overlay_batch_alter(&amp;$batch)</signature>
              <docrelurl>overlay_batch_alter/7</docrelurl>
            </item>
            <item name= "overlay_block_list_alter">
              <description>Implements hook_block_list_alter().</description>
              <signature>overlay_block_list_alter(&amp;$blocks)</signature>
              <docrelurl>overlay_block_list_alter/7</docrelurl>
            </item>
            <item name= "overlay_close_dialog">
              <description>Callback to request that the overlay close as soon as the page is displayed.</description>
              <signature>overlay_close_dialog($redirect = NULL, $redirect_options = array())</signature>
              <docrelurl>overlay_close_dialog/7</docrelurl>
            </item>
            <item name= "overlay_deliver_empty_page">
              <description>Delivery callback to display an empty page. This function is used to print out a bare minimum empty page which still has the scripts and styles necessary in order to trigger the overlay to close.</description>
              <signature>overlay_deliver_empty_page()</signature>
              <docrelurl>overlay_deliver_empty_page/7</docrelurl>
            </item>
            <item name= "overlay_display_empty_page">
              <description>Callback to request that the overlay display an empty page. This is used to prevent a page request which closes the overlay (for example, a form submission) from being fully re-rendered before the overlay is closed. Instead, we store a variable which will cause the page to be rendered by a delivery callback function that does not actually print visible HTML (but rather only the bare minimum scripts and styles necessary to trigger the overlay to close), thereby allowing the dialog to be closed faster and with less interruption, and also allowing the display of messages to be deferred to the parent window (rather than displaying them in the child window, which will close before the user has had a chance to read them).</description>
              <signature>overlay_display_empty_page($value = NULL)</signature>
              <docrelurl>overlay_display_empty_page/7</docrelurl>
            </item>
            <item name= "overlay_drupal_goto_alter">
              <description>Implements hook_drupal_goto_alter(). If the current page request is inside the overlay, add ?render=overlay to the new path, so that it appears correctly inside the overlay.</description>
              <signature>overlay_drupal_goto_alter(&amp;$path, &amp;$options, &amp;$http_response_code)</signature>
              <docrelurl>overlay_drupal_goto_alter/7</docrelurl>
            </item>
            <item name= "overlay_element_info_alter">
              <description>Implements hook_element_info_alter().</description>
              <signature>overlay_element_info_alter(&amp;$types)</signature>
              <docrelurl>overlay_element_info_alter/7</docrelurl>
            </item>
            <item name= "overlay_enable">
              <description>Implements hook_enable(). If the module is being enabled through the admin UI, and not from an install profile, reopen the modules page in an overlay.</description>
              <signature>overlay_enable()</signature>
              <docrelurl>overlay_enable/7</docrelurl>
            </item>
            <item name= "overlay_exit">
              <description>Implements hook_exit(). When viewing an overlay child page, check if we need to trigger a refresh of the supplemental regions of the overlay on the next page request.</description>
              <signature>overlay_exit()</signature>
              <docrelurl>overlay_exit/7</docrelurl>
            </item>
            <item name= "overlay_form_after_build">
              <description>Form after_build callback. After all hook_form_alter() implementations have been processed, we look at the list of submit handlers and add our own at the end. The added handler determines whether or not the user is redirected done at the end of form processing, so that it's possible to close the overlay after submitting a form.</description>
              <signature>overlay_form_after_build($form, &amp;$form_state)</signature>
              <docrelurl>overlay_form_after_build/7</docrelurl>
            </item>
            <item name= "overlay_form_submit">
              <description>Generic form submit handler. When we are requested to close an overlay, we don't want Form API to perform any redirection once the submitted form has been processed. Instead, we set $form_state['redirect'] to FALSE so that Form API will simply re-render the current page, and pass the redirect information on to the overlay JavaScript so that the redirection can be performed there.</description>
              <signature>overlay_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>overlay_form_submit/7</docrelurl>
            </item>
            <item name= "overlay_get_mode">
              <description>Get the current overlay mode.</description>
              <signature>overlay_get_mode()</signature>
              <docrelurl>overlay_get_mode/7</docrelurl>
            </item>
            <item name= "overlay_get_regions_to_render">
              <description>Returns a list of page regions that rendering should be limited to.</description>
              <signature>overlay_get_regions_to_render()</signature>
              <docrelurl>overlay_get_regions_to_render/7</docrelurl>
            </item>
            <item name= "overlay_get_rendered_content">
              <description>Returns any rendered content that was stored earlier in the page request.</description>
              <signature>overlay_get_rendered_content()</signature>
              <docrelurl>overlay_get_rendered_content/7</docrelurl>
            </item>
            <item name= "overlay_help">
              <description>Implements hook_help().</description>
              <signature>overlay_help($path, $arg)</signature>
              <docrelurl>overlay_help/7</docrelurl>
            </item>
            <item name= "overlay_init">
              <description>Implements hook_init(). Determine whether the current page request is destined to appear in the parent window or in the overlay window, and format the page accordingly.</description>
              <signature>overlay_init()</signature>
              <docrelurl>overlay_init/7</docrelurl>
            </item>
            <item name= "overlay_library">
              <description>Implements hook_library().</description>
              <signature>overlay_library()</signature>
              <docrelurl>overlay_library/7</docrelurl>
            </item>
            <item name= "overlay_menu">
              <description>Implements hook_menu().</description>
              <signature>overlay_menu()</signature>
              <docrelurl>overlay_menu/7</docrelurl>
            </item>
            <item name= "overlay_overlay_child_initialize">
              <description>Implements hook_overlay_child_initialize().</description>
              <signature>overlay_overlay_child_initialize()</signature>
              <docrelurl>overlay_overlay_child_initialize/7</docrelurl>
            </item>
            <item name= "overlay_overlay_parent_initialize">
              <description>Implements hook_overlay_parent_initialize().</description>
              <signature>overlay_overlay_parent_initialize()</signature>
              <docrelurl>overlay_overlay_parent_initialize/7</docrelurl>
            </item>
            <item name= "overlay_page_alter">
              <description>Implements hook_page_alter().</description>
              <signature>overlay_page_alter(&amp;$page)</signature>
              <docrelurl>overlay_page_alter/7</docrelurl>
            </item>
            <item name= "overlay_page_delivery_callback_alter">
              <description>Implements hook_page_delivery_callback_alter().</description>
              <signature>overlay_page_delivery_callback_alter(&amp;$callback)</signature>
              <docrelurl>overlay_page_delivery_callback_alter/7</docrelurl>
            </item>
            <item name= "overlay_permission">
              <description>Implements hook_permission().</description>
              <signature>overlay_permission()</signature>
              <docrelurl>overlay_permission/7</docrelurl>
            </item>
            <item name= "overlay_preprocess_html">
              <description>Implements hook_preprocess_html(). If the current page request is inside the overlay, add appropriate classes to the &lt;body&gt; element, and simplify the page title.</description>
              <signature>overlay_preprocess_html(&amp;$variables)</signature>
              <docrelurl>overlay_preprocess_html/7</docrelurl>
            </item>
            <item name= "overlay_preprocess_maintenance_page">
              <description>Implements hook_preprocess_maintenance_page(). If the current page request is inside the overlay, add appropriate classes to the &lt;body&gt; element, and simplify the page title.</description>
              <signature>overlay_preprocess_maintenance_page(&amp;$variables)</signature>
              <docrelurl>overlay_preprocess_maintenance_page/7</docrelurl>
            </item>
            <item name= "overlay_preprocess_page">
              <description>Implements hook_preprocess_page(). Display breadcrumbs correctly inside the overlay.</description>
              <signature>overlay_preprocess_page(&amp;$variables)</signature>
              <docrelurl>overlay_preprocess_page/7</docrelurl>
            </item>
            <item name= "overlay_regions">
              <description>Returns a list of page regions that appear in the overlay. Overlay regions correspond to the entire contents of the overlay child window and are refreshed each time a new page request is made within the overlay.</description>
              <signature>overlay_regions()</signature>
              <docrelurl>overlay_regions/7</docrelurl>
            </item>
            <item name= "overlay_render_region">
              <description>Renders an individual page region. This function is primarily intended to be used for checking the content of supplemental overlay regions (e.g., a region containing a toolbar). Passing in a region that is intended to display the main page content is not supported; the region will be rendered by this function, but the main page content will not appear in it.</description>
              <signature>overlay_render_region($region)</signature>
              <docrelurl>overlay_render_region/7</docrelurl>
            </item>
            <item name= "overlay_request_refresh">
              <description>Request that the parent window refresh a particular page region.</description>
              <signature>overlay_request_refresh($region)</signature>
              <docrelurl>overlay_request_refresh/7</docrelurl>
            </item>
            <item name= "overlay_set_mode">
              <description>Sets the overlay mode and adds proper JavaScript and styles to the page. Note that since setting the overlay mode triggers a variety of behaviors (including hooks being invoked), it can only be done once per page request. Therefore, the first call to this function which passes along a value of the $mode parameter controls the overlay mode that will be used.</description>
              <signature>overlay_set_mode($mode = NULL)</signature>
              <docrelurl>overlay_set_mode/7</docrelurl>
            </item>
            <item name= "overlay_set_regions_to_render">
              <description>Sets the regions of the page that rendering will be limited to.</description>
              <signature>overlay_set_regions_to_render($regions = NULL)</signature>
              <docrelurl>overlay_set_regions_to_render/7</docrelurl>
            </item>
            <item name= "overlay_store_rendered_content">
              <description>Stores strings representing rendered HTML content. This function is used to keep a static cache of rendered content that can be referred to later in the page request.</description>
              <signature>overlay_store_rendered_content($id = NULL, $content = NULL)</signature>
              <docrelurl>overlay_store_rendered_content/7</docrelurl>
            </item>
            <item name= "overlay_supplemental_regions">
              <description>Returns a list of supplemental page regions for the overlay. Supplemental overlay regions are those which are technically part of the parent window, but appear to the user as being related to the overlay (usually because they are displayed next to, rather than underneath, the main overlay regions) and therefore need to be dynamically refreshed if any administrative actions taken within the overlay change their contents.</description>
              <signature>overlay_supplemental_regions()</signature>
              <docrelurl>overlay_supplemental_regions/7</docrelurl>
            </item>
            <item name= "overlay_system_info_alter">
              <description>Implements hook_system_info_alter(). Add default regions for the overlay.</description>
              <signature>overlay_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>overlay_system_info_alter/7</docrelurl>
            </item>
            <item name= "overlay_theme">
              <description>Implements hook_theme().</description>
              <signature>overlay_theme()</signature>
              <docrelurl>overlay_theme/7</docrelurl>
            </item>
            <item name= "overlay_trigger_regions_to_refresh">
              <description>Check if the parent window needs to refresh any regions on this page load. If the previous page load requested that any page regions be refreshed, pass that request via JavaScript to the child window, so it can in turn pass the request to the parent window.</description>
              <signature>overlay_trigger_regions_to_refresh()</signature>
              <docrelurl>overlay_trigger_regions_to_refresh/7</docrelurl>
            </item>
            <item name= "pager_get_query_parameters">
              <description>Compose a URL query parameter array for pager links.</description>
              <signature>pager_get_query_parameters()</signature>
              <docrelurl>pager_get_query_parameters/7</docrelurl>
            </item>
            <item name= "pager_load_array">
              <description>Helper function Copies $old_array to $new_array and sets $new_array[$element] = $value Fills in $new_array[0 .. $element - 1] = 0</description>
              <signature>pager_load_array($value, $element, $old_array)</signature>
              <docrelurl>pager_load_array/7</docrelurl>
            </item>
            <item name= "parse_size">
              <description>Parse a given byte count.</description>
              <signature>parse_size($size)</signature>
              <docrelurl>parse_size/7</docrelurl>
            </item>
            <item name= "password_confirm_validate">
              <description>Validate password_confirm element.</description>
              <signature>password_confirm_validate($element, &amp;$element_state)</signature>
              <docrelurl>password_confirm_validate/7</docrelurl>
            </item>
            <item name= "path_admin_delete_confirm">
              <description>Menu callback; confirms deleting an URL alias</description>
              <signature>path_admin_delete_confirm($form, &amp;$form_state, $path)</signature>
              <docrelurl>path_admin_delete_confirm/7</docrelurl>
            </item>
            <item name= "path_admin_delete_confirm_submit">
              <description>Execute URL alias deletion</description>
              <signature>path_admin_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "path_admin_edit">
              <description>Menu callback; handles pages for creating and editing URL aliases.</description>
              <signature>path_admin_edit($path = array())</signature>
              <docrelurl>path_admin_edit/7</docrelurl>
            </item>
            <item name= "path_admin_filter_form">
              <description>Return a form to filter URL aliases.</description>
              <signature>path_admin_filter_form($form, &amp;$form_state, $keys = '')</signature>
              <docrelurl>path_admin_filter_form/7</docrelurl>
            </item>
            <item name= "path_admin_filter_form_submit_filter">
              <description>Process filter form submission when the Filter button is pressed.</description>
              <signature>path_admin_filter_form_submit_filter($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_filter_form_submit_filter/7</docrelurl>
            </item>
            <item name= "path_admin_filter_form_submit_reset">
              <description>Process filter form submission when the Reset button is pressed.</description>
              <signature>path_admin_filter_form_submit_reset($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_filter_form_submit_reset/7</docrelurl>
            </item>
            <item name= "path_admin_form">
              <description>Return a form for editing or creating an individual URL alias.</description>
              <signature>path_admin_form($form, &amp;$form_state, $path = array('source' => '', 'alias' => '', 'language' => LANGUAGE_NONE, 'pid' => NULL))</signature>
              <docrelurl>path_admin_form/7</docrelurl>
            </item>
            <item name= "path_admin_form_delete_submit">
              <description>Submit function for the 'Delete' button on the URL alias editing form.</description>
              <signature>path_admin_form_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_form_delete_submit/7</docrelurl>
            </item>
            <item name= "path_admin_form_submit">
              <description>Save a URL alias to the database.</description>
              <signature>path_admin_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_form_submit/7</docrelurl>
            </item>
            <item name= "path_admin_form_validate">
              <description>Verify that a URL alias is valid</description>
              <signature>path_admin_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>path_admin_form_validate/7</docrelurl>
            </item>
            <item name= "path_admin_overview">
              <description>Return a listing of all defined URL aliases. When filter key passed, perform a standard search on the given key, and return the list of matching URL aliases.</description>
              <signature>path_admin_overview($keys = NULL)</signature>
              <docrelurl>path_admin_overview/7</docrelurl>
            </item>
            <item name= "path_delete">
              <description>Delete a URL alias.</description>
              <signature>path_delete($criteria)</signature>
              <docrelurl>path_delete/7</docrelurl>
            </item>
            <item name= "path_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>path_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>path_form_alter/7</docrelurl>
            </item>
            <item name= "path_form_element_validate">
              <description>Form element validation handler for URL alias form element.</description>
              <signature>path_form_element_validate($element, &amp;$form_state, $complete_form)</signature>
              <docrelurl>path_form_element_validate/7</docrelurl>
            </item>
            <item name= "path_form_taxonomy_form_term_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>path_form_taxonomy_form_term_alter(&amp;$form, $form_state)</signature>
              <docrelurl>path_form_taxonomy_form_term_alter/7</docrelurl>
            </item>
            <item name= "path_get_admin_paths">
              <description>Get a list of administrative and non-administrative paths.</description>
              <signature>path_get_admin_paths()</signature>
              <docrelurl>path_get_admin_paths/7</docrelurl>
            </item>
            <item name= "path_help">
              <description>Implements hook_help().</description>
              <signature>path_help($path, $arg)</signature>
              <docrelurl>path_help/7</docrelurl>
            </item>
            <item name= "path_is_admin">
              <description>Determine whether a path is in the administrative section of the site. By default, paths are considered to be non-administrative. If a path does not match any of the patterns in path_get_admin_paths(), or if it matches both administrative and non-administrative patterns, it is considered non-administrative.</description>
              <signature>path_is_admin($path)</signature>
              <docrelurl>path_is_admin/7</docrelurl>
            </item>
            <item name= "path_load">
              <description>Fetch a specific URL alias from the database.</description>
              <signature>path_load($conditions)</signature>
              <docrelurl>path_load/7</docrelurl>
            </item>
            <item name= "path_menu">
              <description>Implements hook_menu().</description>
              <signature>path_menu()</signature>
              <docrelurl>path_menu/7</docrelurl>
            </item>
            <item name= "path_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>path_node_delete($node)</signature>
              <docrelurl>path_node_delete/7</docrelurl>
            </item>
            <item name= "path_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>path_node_insert($node)</signature>
              <docrelurl>path_node_insert/7</docrelurl>
            </item>
            <item name= "path_node_update">
              <description>Implements hook_node_update().</description>
              <signature>path_node_update($node)</signature>
              <docrelurl>path_node_update/7</docrelurl>
            </item>
            <item name= "path_permission">
              <description>Implements hook_permission().</description>
              <signature>path_permission()</signature>
              <docrelurl>path_permission/7</docrelurl>
            </item>
            <item name= "path_save">
              <description>Save a path alias to the database.</description>
              <signature>path_save(&amp;$path)</signature>
              <docrelurl>path_save/7</docrelurl>
            </item>
            <item name= "path_taxonomy_term_delete">
              <description>Implements hook_taxonomy_term_delete().</description>
              <signature>path_taxonomy_term_delete($term)</signature>
              <docrelurl>path_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "path_taxonomy_term_insert">
              <description>Implements hook_taxonomy_term_insert().</description>
              <signature>path_taxonomy_term_insert($term)</signature>
              <docrelurl>path_taxonomy_term_insert/7</docrelurl>
            </item>
            <item name= "path_taxonomy_term_update">
              <description>Implements hook_taxonomy_term_update().</description>
              <signature>path_taxonomy_term_update($term)</signature>
              <docrelurl>path_taxonomy_term_update/7</docrelurl>
            </item>
            <item name= "path_to_theme">
              <description>Return the path to the current themed element. It can point to the active theme or the module handling a themed implementation. For example, when invoked within the scope of a theming call it will depend on where the theming function is handled. If implemented from a module, it will point to the module. If implemented from the active theme, it will point to the active theme. When called outside the scope of a theming call, it will always point to the active theme.</description>
              <signature>path_to_theme()</signature>
              <docrelurl>path_to_theme/7</docrelurl>
            </item>
            <item name= "phptemplate_init">
              <description>Implements hook_init().</description>
              <signature>phptemplate_init($template)</signature>
              <docrelurl>phptemplate_init/7</docrelurl>
            </item>
            <item name= "phptemplate_theme">
              <description>Implements hook_theme().</description>
              <signature>phptemplate_theme($existing, $type, $theme, $path)</signature>
              <docrelurl>phptemplate_theme/7</docrelurl>
            </item>
            <item name= "php_disable">
              <description>Implements hook_disable().</description>
              <signature>php_disable()</signature>
              <docrelurl>php_disable/7</docrelurl>
            </item>
            <item name= "php_enable">
              <description>Implements hook_enable().</description>
              <signature>php_enable()</signature>
              <docrelurl>php_enable/7</docrelurl>
            </item>
            <item name= "php_eval">
              <description>
                Evaluate a string of PHP code. This is a wrapper around PHP's eval(). It uses output buffering to capture both returned and printed text. Unlike eval(), we require code to be surrounded by <?php ?> tags; in other words, we evaluate the code as if it were a stand-alone PHP file.
              </description>
              <signature>php_eval($code)</signature>
              <docrelurl>php_eval/7</docrelurl>
            </item>
            <item name= "php_filter_info">
              <description>Implements hook_filter_info(). Provide PHP code filter. Use with care.</description>
              <signature>php_filter_info()</signature>
              <docrelurl>php_filter_info/7</docrelurl>
            </item>
            <item name= "php_help">
              <description>Implements hook_help().</description>
              <signature>php_help($path, $arg)</signature>
              <docrelurl>php_help/7</docrelurl>
            </item>
            <item name= "php_permission">
              <description>Implements hook_permission().</description>
              <signature>php_permission()</signature>
              <docrelurl>php_permission/7</docrelurl>
            </item>
            <item name= "poll_block_info">
              <description>Implements hook_block_info().</description>
              <signature>poll_block_info()</signature>
              <docrelurl>poll_block_info/7</docrelurl>
            </item>
            <item name= "poll_block_latest_poll_view">
              <description>Return content for 'latest poll' block.</description>
              <signature>poll_block_latest_poll_view($node)</signature>
              <docrelurl>poll_block_latest_poll_view/7</docrelurl>
            </item>
            <item name= "poll_block_view">
              <description>Implements hook_block_view(). Generates a block containing the latest poll.</description>
              <signature>poll_block_view($delta = '')</signature>
              <docrelurl>poll_block_view/7</docrelurl>
            </item>
            <item name= "poll_cancel">
              <description>Submit callback for poll_cancel_form().</description>
              <signature>poll_cancel($form, &amp;$form_state)</signature>
              <docrelurl>poll_cancel/7</docrelurl>
            </item>
            <item name= "poll_cancel_form">
              <description>Builds the cancel form for a poll.</description>
              <signature>poll_cancel_form($form, &amp;$form_state, $nid)</signature>
              <docrelurl>poll_cancel_form/7</docrelurl>
            </item>
            <item name= "poll_choice_js">
              <description>Ajax callback in response to new choices being added to the form. This returns the new page content to replace the page content made obsolete by the form submission.</description>
              <signature>poll_choice_js($form, $form_state)</signature>
              <docrelurl>poll_choice_js/7</docrelurl>
            </item>
            <item name= "poll_cron">
              <description>Implements hook_cron(). Closes polls that have exceeded their allowed runtime.</description>
              <signature>poll_cron()</signature>
              <docrelurl>poll_cron/7</docrelurl>
            </item>
            <item name= "poll_delete">
              <description>Implements hook_delete().</description>
              <signature>poll_delete($node)</signature>
              <docrelurl>poll_delete/7</docrelurl>
            </item>
            <item name= "poll_field_attach_prepare_translation_alter">
              <description>Implements hook_field_attach_prepare_translation_alter().</description>
              <signature>poll_field_attach_prepare_translation_alter(&amp;$entity, $context)</signature>
              <docrelurl>poll_field_attach_prepare_translation_alter/7</docrelurl>
            </item>
            <item name= "poll_field_extra_fields">
              <description>Implements hook_field_extra_fields().</description>
              <signature>poll_field_extra_fields()</signature>
              <docrelurl>poll_field_extra_fields/7</docrelurl>
            </item>
            <item name= "poll_form">
              <description>Implements hook_form().</description>
              <signature>poll_form($node, &amp;$form_state)</signature>
              <docrelurl>poll_form/7</docrelurl>
            </item>
            <item name= "poll_help">
              <description>Implements hook_help().</description>
              <signature>poll_help($path, $arg)</signature>
              <docrelurl>poll_help/7</docrelurl>
            </item>
            <item name= "poll_init">
              <description>Implements hook_init().</description>
              <signature>poll_init()</signature>
              <docrelurl>poll_init/7</docrelurl>
            </item>
            <item name= "poll_insert">
              <description>Implements hook_insert().</description>
              <signature>poll_insert($node)</signature>
              <docrelurl>poll_insert/7</docrelurl>
            </item>
            <item name= "poll_load">
              <description>Implements hook_load().</description>
              <signature>poll_load($nodes)</signature>
              <docrelurl>poll_load/7</docrelurl>
            </item>
            <item name= "poll_menu">
              <description>Implements hook_menu().</description>
              <signature>poll_menu()</signature>
              <docrelurl>poll_menu/7</docrelurl>
            </item>
            <item name= "poll_more_choices_submit">
              <description>Submit handler to add more choices to a poll form. This handler is run regardless of whether JS is enabled or not. It makes changes to the form state. If the button was clicked with JS disabled, then the page is reloaded with the complete rebuilt form. If the button was clicked with JS enabled, then ajax_form_callback() calls poll_choice_js() to return just the changed part of the form.</description>
              <signature>poll_more_choices_submit($form, &amp;$form_state)</signature>
              <docrelurl>poll_more_choices_submit/7</docrelurl>
            </item>
            <item name= "poll_node_form_submit">
              <description>Renumber fields and create a teaser when a poll node is submitted.</description>
              <signature>poll_node_form_submit(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>poll_node_form_submit/7</docrelurl>
            </item>
            <item name= "poll_node_info">
              <description>Implements hook_node_info().</description>
              <signature>poll_node_info()</signature>
              <docrelurl>poll_node_info/7</docrelurl>
            </item>
            <item name= "poll_page">
              <description>Menu callback to provide a simple list of all polls available.</description>
              <signature>poll_page()</signature>
              <docrelurl>poll_page/7</docrelurl>
            </item>
            <item name= "poll_permission">
              <description>Implements hook_permission().</description>
              <signature>poll_permission()</signature>
              <docrelurl>poll_permission/7</docrelurl>
            </item>
            <item name= "poll_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>poll_rdf_mapping()</signature>
              <docrelurl>poll_rdf_mapping/7</docrelurl>
            </item>
            <item name= "poll_results">
              <description>Callback for the 'results' tab for polls you can vote on</description>
              <signature>poll_results($node)</signature>
              <docrelurl>poll_results/7</docrelurl>
            </item>
            <item name= "poll_schema">
              <description>Implements hook_schema().</description>
              <signature>poll_schema()</signature>
              <docrelurl>poll_schema/7</docrelurl>
            </item>
            <item name= "poll_teaser">
              <description>Creates a simple teaser that lists all the choices. This is primarily used for RSS.</description>
              <signature>poll_teaser($node)</signature>
              <docrelurl>poll_teaser/7</docrelurl>
            </item>
            <item name= "poll_theme">
              <description>Implements hook_theme().</description>
              <signature>poll_theme()</signature>
              <docrelurl>poll_theme/7</docrelurl>
            </item>
            <item name= "poll_tokens">
              <description>Implements hook_tokens().</description>
              <signature>poll_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>poll_tokens/7</docrelurl>
            </item>
            <item name= "poll_token_info">
              <description>Implements hook_token_info().</description>
              <signature>poll_token_info()</signature>
              <docrelurl>poll_token_info/7</docrelurl>
            </item>
            <item name= "poll_update">
              <description>Implements hook_update().</description>
              <signature>poll_update($node)</signature>
              <docrelurl>poll_update/7</docrelurl>
            </item>
            <item name= "poll_update_7001">
              <description>Rename {poll_choices} table to {poll_choice} and {poll_votes} to {poll_vote}.</description>
              <signature>poll_update_7001()</signature>
              <docrelurl>poll_update_7001/7</docrelurl>
            </item>
            <item name= "poll_update_7002">
              <description>Add timestamp field to {poll_vote}.</description>
              <signature>poll_update_7002()</signature>
              <docrelurl>poll_update_7002/7</docrelurl>
            </item>
            <item name= "poll_update_7003">
              <description>Change the weight column to normal int.</description>
              <signature>poll_update_7003()</signature>
              <docrelurl>poll_update_7003/7</docrelurl>
            </item>
            <item name= "poll_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>poll_user_cancel($edit, $account, $method)</signature>
              <docrelurl>poll_user_cancel/7</docrelurl>
            </item>
            <item name= "poll_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>poll_user_delete($account)</signature>
              <docrelurl>poll_user_delete/7</docrelurl>
            </item>
            <item name= "poll_validate">
              <description>Implements hook_validate().</description>
              <signature>poll_validate($node, $form)</signature>
              <docrelurl>poll_validate/7</docrelurl>
            </item>
            <item name= "poll_view">
              <description>Implements hook_view().</description>
              <signature>poll_view($node, $view_mode)</signature>
              <docrelurl>poll_view/7</docrelurl>
            </item>
            <item name= "poll_view_results">
              <description>Generates a graphical representation of the results of a poll.</description>
              <signature>poll_view_results($node, $view_mode, $block = FALSE)</signature>
              <docrelurl>poll_view_results/7</docrelurl>
            </item>
            <item name= "poll_view_voting">
              <description>Generates the voting form for a poll.</description>
              <signature>poll_view_voting($form, &amp;$form_state, $node, $block = FALSE)</signature>
              <docrelurl>poll_view_voting/7</docrelurl>
            </item>
            <item name= "poll_view_voting_validate">
              <description>Validation function for processing votes</description>
              <signature>poll_view_voting_validate($form, &amp;$form_state)</signature>
              <docrelurl>poll_view_voting_validate/7</docrelurl>
            </item>
            <item name= "poll_vote">
              <description>Submit handler for processing a vote.</description>
              <signature>poll_vote($form, &amp;$form_state)</signature>
              <docrelurl>poll_vote/7</docrelurl>
            </item>
            <item name= "poll_votes">
              <description>Callback for the 'votes' tab for polls you can see other votes on</description>
              <signature>poll_votes($node)</signature>
              <docrelurl>poll_votes/7</docrelurl>
            </item>
            <item name= "profile_admin_overview">
              <description>Form builder to display a listing of all editable profile fields.</description>
              <signature>profile_admin_overview($form)</signature>
              <docrelurl>profile_admin_overview/7</docrelurl>
            </item>
            <item name= "profile_admin_overview_submit">
              <description>Submit handler to update changed profile field weights and categories.</description>
              <signature>profile_admin_overview_submit($form, &amp;$form_state)</signature>
              <docrelurl>profile_admin_overview_submit/7</docrelurl>
            </item>
            <item name= "profile_admin_settings_autocomplete">
              <description>Retrieve a pipe delimited string of autocomplete suggestions for profile categories</description>
              <signature>profile_admin_settings_autocomplete($string)</signature>
              <docrelurl>profile_admin_settings_autocomplete/7</docrelurl>
            </item>
            <item name= "profile_autocomplete">
              <description>Callback to allow autocomplete of profile text fields.</description>
              <signature>profile_autocomplete($field, $string)</signature>
              <docrelurl>profile_autocomplete/7</docrelurl>
            </item>
            <item name= "profile_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>profile_block_configure($delta = '')</signature>
              <docrelurl>profile_block_configure/7</docrelurl>
            </item>
            <item name= "profile_block_info">
              <description>Implements hook_block_info().</description>
              <signature>profile_block_info()</signature>
              <docrelurl>profile_block_info/7</docrelurl>
            </item>
            <item name= "profile_block_save">
              <description>Implements hook_block_save().</description>
              <signature>profile_block_save($delta = '', $edit = array())</signature>
              <docrelurl>profile_block_save/7</docrelurl>
            </item>
            <item name= "profile_block_view">
              <description>Implements hook_block_view().</description>
              <signature>profile_block_view($delta = '')</signature>
              <docrelurl>profile_block_view/7</docrelurl>
            </item>
            <item name= "profile_browse">
              <description>Menu callback; display a list of user information.</description>
              <signature>profile_browse()</signature>
              <docrelurl>profile_browse/7</docrelurl>
            </item>
            <item name= "profile_category_access">
              <description>Menu item access callback - check if a user has access to a profile category.</description>
              <signature>profile_category_access($account, $category)</signature>
              <docrelurl>profile_category_access/7</docrelurl>
            </item>
            <item name= "profile_field_delete">
              <description>Menu callback; deletes a field from all user profiles.</description>
              <signature>profile_field_delete($form, &amp;$form_state, $fid)</signature>
              <docrelurl>profile_field_delete/7</docrelurl>
            </item>
            <item name= "profile_field_delete_submit">
              <description>Process a field delete form submission.</description>
              <signature>profile_field_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>profile_field_delete_submit/7</docrelurl>
            </item>
            <item name= "profile_field_form">
              <description>Menu callback: Generate a form to add/edit a user profile field.</description>
              <signature>profile_field_form($form, &amp;$form_state, $arg = NULL)</signature>
              <docrelurl>profile_field_form/7</docrelurl>
            </item>
            <item name= "profile_field_form_submit">
              <description>Process profile_field_form submissions.</description>
              <signature>profile_field_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>profile_field_form_submit/7</docrelurl>
            </item>
            <item name= "profile_field_form_validate">
              <description>Validate profile_field_form submissions.</description>
              <signature>profile_field_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>profile_field_form_validate/7</docrelurl>
            </item>
            <item name= "profile_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>profile_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>profile_form_alter/7</docrelurl>
            </item>
            <item name= "profile_help">
              <description>Implements hook_help().</description>
              <signature>profile_help($path, $arg)</signature>
              <docrelurl>profile_help/7</docrelurl>
            </item>
            <item name= "profile_menu">
              <description>Implements hook_menu().</description>
              <signature>profile_menu()</signature>
              <docrelurl>profile_menu/7</docrelurl>
            </item>
            <item name= "profile_save_profile">
              <description>
                ▸ 2 functions call profile_save_profile()
                ▾ 2 functions call profile_save_profile()
                profile_user_insert in modules/profile/profile.module
                Implements hook_user_insert().
                profile_user_presave in modules/profile/profile.module
                Implements hook_user_presave().
              </description>
              <signature>profile_save_profile(&amp;$edit, $account, $category, $register = FALSE)</signature>
              <docrelurl>profile_save_profile/7</docrelurl>
            </item>
            <item name= "profile_schema">
              <description>Implements hook_schema().</description>
              <signature>profile_schema()</signature>
              <docrelurl>profile_schema/7</docrelurl>
            </item>
            <item name= "profile_theme">
              <description>Implements hook_theme().</description>
              <signature>profile_theme()</signature>
              <docrelurl>profile_theme/7</docrelurl>
            </item>
            <item name= "profile_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>profile_uninstall()</signature>
              <docrelurl>profile_uninstall/7</docrelurl>
            </item>
            <item name= "profile_update_7001">
              <description>Rename {profile_fields} table to {profile_field} and {profile_values} to {profile_value}.</description>
              <signature>profile_update_7001()</signature>
              <docrelurl>profile_update_7001/7</docrelurl>
            </item>
            <item name= "profile_update_7002">
              <description>Change the weight column to normal int.</description>
              <signature>profile_update_7002()</signature>
              <docrelurl>profile_update_7002/7</docrelurl>
            </item>
            <item name= "profile_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>profile_user_cancel(&amp;$edit, $account, $method)</signature>
              <docrelurl>profile_user_cancel/7</docrelurl>
            </item>
            <item name= "profile_user_categories">
              <description>Implements hook_user_categories().</description>
              <signature>profile_user_categories()</signature>
              <docrelurl>profile_user_categories/7</docrelurl>
            </item>
            <item name= "profile_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>profile_user_delete($account)</signature>
              <docrelurl>profile_user_delete/7</docrelurl>
            </item>
            <item name= "profile_user_form_validate">
              <description>Form validation handler for the user register/profile form.</description>
              <signature>profile_user_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>profile_user_form_validate/7</docrelurl>
            </item>
            <item name= "profile_user_insert">
              <description>Implements hook_user_insert().</description>
              <signature>profile_user_insert(&amp;$edit, $account, $category)</signature>
              <docrelurl>profile_user_insert/7</docrelurl>
            </item>
            <item name= "profile_user_load">
              <description>Implements hook_user_load().</description>
              <signature>profile_user_load($users)</signature>
              <docrelurl>profile_user_load/7</docrelurl>
            </item>
            <item name= "profile_user_presave">
              <description>Implements hook_user_presave().</description>
              <signature>profile_user_presave(&amp;$edit, $account, $category)</signature>
              <docrelurl>profile_user_presave/7</docrelurl>
            </item>
            <item name= "profile_user_view">
              <description>Implements hook_user_view().</description>
              <signature>profile_user_view($account)</signature>
              <docrelurl>profile_user_view/7</docrelurl>
            </item>
            <item name= "profile_view_field">
              <description>
                ▸ 2 functions call profile_view_field()
                ▾ 2 functions call profile_view_field()
                profile_user_view in modules/profile/profile.module
                Implements hook_user_view().
                _profile_update_user_fields in modules/profile/profile.module
                Helper function: update an array of user fields by calling profile_view_field
              </description>
              <signature>profile_view_field($account, $field)</signature>
              <docrelurl>profile_view_field/7</docrelurl>
            </item>
            <item name= "rdf_comment_load">
              <description>Implements hook_comment_load().</description>
              <signature>rdf_comment_load($comments)</signature>
              <docrelurl>rdf_comment_load/7</docrelurl>
            </item>
            <item name= "rdf_entity_info_alter">
              <description>Implements hook_entity_info_alter(). Adds the proper RDF mapping to each entity type, bundle pair.</description>
              <signature>rdf_entity_info_alter(&amp;$entity_info)</signature>
              <docrelurl>rdf_entity_info_alter/7</docrelurl>
            </item>
            <item name= "rdf_entity_load">
              <description>Implements hook_entity_load().</description>
              <signature>rdf_entity_load($entities, $type)</signature>
              <docrelurl>rdf_entity_load/7</docrelurl>
            </item>
            <item name= "rdf_field_attach_view_alter">
              <description>Implements hook_field_attach_view_alter().</description>
              <signature>rdf_field_attach_view_alter(&amp;$output, $context)</signature>
              <docrelurl>rdf_field_attach_view_alter/7</docrelurl>
            </item>
            <item name= "rdf_get_namespaces">
              <description>Returns an array of RDF namespaces defined via hook_rdf_namespaces().</description>
              <signature>rdf_get_namespaces()</signature>
              <docrelurl>rdf_get_namespaces/7</docrelurl>
            </item>
            <item name= "rdf_help">
              <description>Implements hook_help().</description>
              <signature>rdf_help($path, $arg)</signature>
              <docrelurl>rdf_help/7</docrelurl>
            </item>
            <item name= "rdf_install">
              <description>Implements hook_install().</description>
              <signature>rdf_install()</signature>
              <docrelurl>rdf_install/7</docrelurl>
            </item>
            <item name= "rdf_mapping_delete">
              <description>Deletes the mapping for the given bundle from the database.</description>
              <signature>rdf_mapping_delete($type, $bundle)</signature>
              <docrelurl>rdf_mapping_delete/7</docrelurl>
            </item>
            <item name= "rdf_mapping_load">
              <description>Returns the mapping for attributes of a given type/bundle pair.</description>
              <signature>rdf_mapping_load($type, $bundle = RDF_DEFAULT_BUNDLE)</signature>
              <docrelurl>rdf_mapping_load/7</docrelurl>
            </item>
            <item name= "rdf_mapping_save">
              <description>Saves an RDF mapping to the database. Takes a mapping structure returned by hook_rdf_mapping() implementations and creates or updates a record mapping for each encountered type, bundle pair. If available, adds default values for non-existent mapping keys.</description>
              <signature>rdf_mapping_save(&amp;$mapping)</signature>
              <docrelurl>rdf_mapping_save/7</docrelurl>
            </item>
            <item name= "rdf_modules_installed">
              <description>Implements hook_modules_installed(). Checks if the installed modules have any RDF mapping definitions to declare and stores them in the rdf_mapping table.</description>
              <signature>rdf_modules_installed($modules)</signature>
              <docrelurl>rdf_modules_installed/7</docrelurl>
            </item>
            <item name= "rdf_modules_uninstalled">
              <description>Implements hook_modules_uninstalled().</description>
              <signature>rdf_modules_uninstalled($modules)</signature>
              <docrelurl>rdf_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_comment">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_comment(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_comment/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_field">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_field(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_field/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_image">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_image(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_image/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_node">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_node(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_node/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_taxonomy_term">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_taxonomy_term(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_taxonomy_term/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_username">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_username(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_username/7</docrelurl>
            </item>
            <item name= "rdf_preprocess_user_profile">
              <description>Implements MODULE_preprocess_HOOK().</description>
              <signature>rdf_preprocess_user_profile(&amp;$variables)</signature>
              <docrelurl>rdf_preprocess_user_profile/7</docrelurl>
            </item>
            <item name= "rdf_process">
              <description>Template process function for adding extra tags to hold RDFa attributes. Since template files already have built-in support for $attributes, $title_attributes, and $content_attributes, and field templates have support for $item_attributes, we try to leverage those as much as possible. However, in some cases additional attributes are needed not covered by these. We deal with those here.</description>
              <signature>rdf_process(&amp;$variables, $hook)</signature>
              <docrelurl>rdf_process/7</docrelurl>
            </item>
            <item name= "rdf_rdfa_attributes">
              <description>Builds an array of RDFa attributes for a given mapping. This array will typically be passed through drupal_attributes() to create the attributes variables that are available to tpl.php template files. These include $attributes, $title_attributes, $content_attributes and the field specific $item_attributes variables. For more information, see theme_rdf_template_variable_wrapper().</description>
              <signature>rdf_rdfa_attributes($mapping, $data = NULL)</signature>
              <docrelurl>rdf_rdfa_attributes/7</docrelurl>
            </item>
            <item name= "rdf_rdf_namespaces">
              <description>Implements hook_rdf_namespaces().</description>
              <signature>rdf_rdf_namespaces()</signature>
              <docrelurl>rdf_rdf_namespaces/7</docrelurl>
            </item>
            <item name= "rdf_schema">
              <description>Implements hook_schema().</description>
              <signature>rdf_schema()</signature>
              <docrelurl>rdf_schema/7</docrelurl>
            </item>
            <item name= "rdf_test_install">
              <description>Implements hook_install().</description>
              <signature>rdf_test_install()</signature>
              <docrelurl>rdf_test_install/7</docrelurl>
            </item>
            <item name= "rdf_test_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>rdf_test_rdf_mapping()</signature>
              <docrelurl>rdf_test_rdf_mapping/7</docrelurl>
            </item>
            <item name= "rdf_test_rdf_namespaces">
              <description>Implements hook_rdf_namespaces().</description>
              <signature>rdf_test_rdf_namespaces()</signature>
              <docrelurl>rdf_test_rdf_namespaces/7</docrelurl>
            </item>
            <item name= "rdf_theme">
              <description>Implements hook_theme().</description>
              <signature>rdf_theme()</signature>
              <docrelurl>rdf_theme/7</docrelurl>
            </item>
            <item name= "registry_get_parsed_files">
              <description>Return the list of files in registry_file</description>
              <signature>registry_get_parsed_files()</signature>
              <docrelurl>registry_get_parsed_files/7</docrelurl>
            </item>
            <item name= "registry_rebuild">
              <description>Rescan all enabled modules and rebuild the registry. Rescans all code in modules or includes directories, storing the location of each interface or class in the database.</description>
              <signature>registry_rebuild()</signature>
              <docrelurl>registry_rebuild/7</docrelurl>
            </item>
            <item name= "registry_update">
              <description>Update the registry based on the latest files listed in the database. This function should be used when system_rebuild_module_data() does not need to be called, because it is already known that the list of files in the {system} table matches those in the file system.</description>
              <signature>registry_update()</signature>
              <docrelurl>registry_update/7</docrelurl>
            </item>
            <item name= "render">
              <description>Render and print an element. This function renders an element using drupal_render(). The top level element is always rendered even if hide() had been previously used on it.</description>
              <signature>render(&amp;$element)</signature>
              <docrelurl>render/7</docrelurl>
            </item>
            <item name= "request_path">
              <description>Returns the requested URL path of the page being viewed. Examples:</description>
              <signature>request_path()</signature>
              <docrelurl>request_path/7</docrelurl>
            </item>
            <item name= "request_uri">
              <description>Since $_SERVER['REQUEST_URI'] is only available on Apache, we generate an equivalent using other environment variables.</description>
              <signature>request_uri()</signature>
              <docrelurl>request_uri/7</docrelurl>
            </item>
            <item name= "requirements1_test_requirements">
              <description>Implements hook_requirements().</description>
              <signature>requirements1_test_requirements($phase)</signature>
              <docrelurl>requirements1_test_requirements/7</docrelurl>
            </item>
            <item name= "search_admin_reindex_submit">
              <description>Submit callback.</description>
              <signature>search_admin_reindex_submit($form, &amp;$form_state)</signature>
              <docrelurl>search_admin_reindex_submit/7</docrelurl>
            </item>
            <item name= "search_admin_settings">
              <description>Menu callback; displays the search module settings page.</description>
              <signature>search_admin_settings($form)</signature>
              <docrelurl>search_admin_settings/7</docrelurl>
            </item>
            <item name= "search_admin_settings_submit">
              <description>Submit callback.</description>
              <signature>search_admin_settings_submit($form, &amp;$form_state)</signature>
              <docrelurl>search_admin_settings_submit/7</docrelurl>
            </item>
            <item name= "search_block_info">
              <description>Implements hook_block_info().</description>
              <signature>search_block_info()</signature>
              <docrelurl>search_block_info/7</docrelurl>
            </item>
            <item name= "search_block_view">
              <description>Implements hook_block_view().</description>
              <signature>search_block_view($delta = '')</signature>
              <docrelurl>search_block_view/7</docrelurl>
            </item>
            <item name= "search_box">
              <description>Form builder; Output a search form for the search block's search box.</description>
              <signature>search_box($form, &amp;$form_state, $form_id)</signature>
              <docrelurl>search_box/7</docrelurl>
            </item>
            <item name= "search_box_form_submit">
              <description>Process a block search form submission.</description>
              <signature>search_box_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>search_box_form_submit/7</docrelurl>
            </item>
            <item name= "search_comment_delete">
              <description>Implements hook_comment_delete().</description>
              <signature>search_comment_delete($comment)</signature>
              <docrelurl>search_comment_delete/7</docrelurl>
            </item>
            <item name= "search_comment_insert">
              <description>Implements hook_comment_insert().</description>
              <signature>search_comment_insert($comment)</signature>
              <docrelurl>search_comment_insert/7</docrelurl>
            </item>
            <item name= "search_comment_publish">
              <description>Implements hook_comment_publish().</description>
              <signature>search_comment_publish($comment)</signature>
              <docrelurl>search_comment_publish/7</docrelurl>
            </item>
            <item name= "search_comment_unpublish">
              <description>Implements hook_comment_unpublish().</description>
              <signature>search_comment_unpublish($comment)</signature>
              <docrelurl>search_comment_unpublish/7</docrelurl>
            </item>
            <item name= "search_comment_update">
              <description>Implements hook_comment_update().</description>
              <signature>search_comment_update($comment)</signature>
              <docrelurl>search_comment_update/7</docrelurl>
            </item>
            <item name= "search_cron">
              <description>Implements hook_cron(). Fires hook_update_index() in all modules and cleans up dirty words (see search_dirty).</description>
              <signature>search_cron()</signature>
              <docrelurl>search_cron/7</docrelurl>
            </item>
            <item name= "search_data">
              <description>Perform a standard search on the given keys, and return the formatted results.</description>
              <signature>search_data($keys = NULL, $type = 'node')</signature>
              <docrelurl>search_data/7</docrelurl>
            </item>
            <item name= "search_dirty">
              <description>Marks a word as dirty (or retrieves the list of dirty words). This is used during indexing (cron). Words which are dirty have outdated total counts in the search_total table, and need to be recounted.</description>
              <signature>search_dirty($word = NULL)</signature>
              <docrelurl>search_dirty/7</docrelurl>
            </item>
            <item name= "search_excerpt">
              <description>Returns snippets from a piece of text, with certain keywords highlighted. Used for formatting search results.</description>
              <signature>search_excerpt($keys, $text)</signature>
              <docrelurl>search_excerpt/7</docrelurl>
            </item>
            <item name= "search_expand_cjk">
              <description>Splits CJK (Chinese, Japanese, Korean) text into tokens. The Search module matches exact words, where a word is defined to be a sequence of characters delimited by spaces or punctuation. CJK languages are written in long strings of characters, though, not split up into words. So in order to allow search matching, we split up CJK text into tokens consisting of consecutive, overlapping sequences of characters whose length is equal to the 'minimum_word_size' variable. This tokenizing is only done if the 'overlap_cjk' variable is TRUE.</description>
              <signature>search_expand_cjk($matches)</signature>
              <docrelurl>search_expand_cjk/7</docrelurl>
            </item>
            <item name= "search_expression_extract">
              <description>Extract a module-specific search option from a search query. e.g. 'type:book'</description>
              <signature>search_expression_extract($keys, $option)</signature>
              <docrelurl>search_expression_extract/7</docrelurl>
            </item>
            <item name= "search_expression_insert">
              <description>Return a query with the given module-specific search option inserted in. e.g. 'type:book'.</description>
              <signature>search_expression_insert($keys, $option, $value = '')</signature>
              <docrelurl>search_expression_insert/7</docrelurl>
            </item>
            <item name= "search_form">
              <description>Render a search form.</description>
              <signature>search_form($form, &amp;$form_state, $action = '', $keys = '', $type = NULL, $prompt = NULL)</signature>
              <docrelurl>search_form/7</docrelurl>
            </item>
            <item name= "search_forms">
              <description>Code modules/search/search.module, line 1124</description>
              <signature>search_forms()</signature>
              <docrelurl>search_forms/7</docrelurl>
            </item>
            <item name= "search_form_submit">
              <description>Process a search form submission.</description>
              <signature>search_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>search_form_submit/7</docrelurl>
            </item>
            <item name= "search_form_validate">
              <description>As the search form collates keys from other modules hooked in via hook_form_alter, the validation takes place in _submit. search_form_validate() is used solely to set the 'processed_keys' form value for the basic search form.</description>
              <signature>search_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>search_form_validate/7</docrelurl>
            </item>
            <item name= "search_get_info">
              <description>Get information about all available search hooks.</description>
              <signature>search_get_info()</signature>
              <docrelurl>search_get_info/7</docrelurl>
            </item>
            <item name= "search_get_keys">
              <description>Helper function for grabbing search keys.</description>
              <signature>search_get_keys()</signature>
              <docrelurl>search_get_keys/7</docrelurl>
            </item>
            <item name= "search_help">
              <description>Implements hook_help().</description>
              <signature>search_help($path, $arg)</signature>
              <docrelurl>search_help/7</docrelurl>
            </item>
            <item name= "search_index">
              <description>Update the full-text search index for a particular item.</description>
              <signature>search_index($sid, $type, $text)</signature>
              <docrelurl>search_index/7</docrelurl>
            </item>
            <item name= "search_index_split">
              <description>Splits a string into tokens for indexing.</description>
              <signature>search_index_split($text)</signature>
              <docrelurl>search_index_split/7</docrelurl>
            </item>
            <item name= "search_invoke_preprocess">
              <description>Invokes hook_search_preprocess() in modules.</description>
              <signature>search_invoke_preprocess(&amp;$text)</signature>
              <docrelurl>search_invoke_preprocess/7</docrelurl>
            </item>
            <item name= "search_menu">
              <description>Implements hook_menu().</description>
              <signature>search_menu()</signature>
              <docrelurl>search_menu/7</docrelurl>
            </item>
            <item name= "search_node_update">
              <description>Implements hook_node_update().</description>
              <signature>search_node_update($node)</signature>
              <docrelurl>search_node_update/7</docrelurl>
            </item>
            <item name= "search_node_update_index">
              <description>Implements hook_node_update_index().</description>
              <signature>search_node_update_index($node)</signature>
              <docrelurl>search_node_update_index/7</docrelurl>
            </item>
            <item name= "search_permission">
              <description>Implements hook_permission().</description>
              <signature>search_permission()</signature>
              <docrelurl>search_permission/7</docrelurl>
            </item>
            <item name= "search_reindex">
              <description>Wipes a part of or the entire search index.</description>
              <signature>search_reindex($sid = NULL, $type = NULL, $reindex = FALSE)</signature>
              <docrelurl>search_reindex/7</docrelurl>
            </item>
            <item name= "search_reindex_confirm">
              <description>Menu callback: confirm wiping of the index.</description>
              <signature>search_reindex_confirm()</signature>
              <docrelurl>search_reindex_confirm/7</docrelurl>
            </item>
            <item name= "search_reindex_confirm_submit">
              <description>Handler for wipe confirmation</description>
              <signature>search_reindex_confirm_submit(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>search_reindex_confirm_submit/7</docrelurl>
            </item>
            <item name= "search_schema">
              <description>Implements hook_schema().</description>
              <signature>search_schema()</signature>
              <docrelurl>search_schema/7</docrelurl>
            </item>
            <item name= "search_simplify">
              <description>Simplifies a string according to indexing rules.</description>
              <signature>search_simplify($text)</signature>
              <docrelurl>search_simplify/7</docrelurl>
            </item>
            <item name= "search_theme">
              <description>Implements hook_theme().</description>
              <signature>search_theme()</signature>
              <docrelurl>search_theme/7</docrelurl>
            </item>
            <item name= "search_touch_node">
              <description>Change a node's changed timestamp to 'now' to force reindexing.</description>
              <signature>search_touch_node($nid)</signature>
              <docrelurl>search_touch_node/7</docrelurl>
            </item>
            <item name= "search_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>search_uninstall()</signature>
              <docrelurl>search_uninstall/7</docrelurl>
            </item>
            <item name= "search_update_7000">
              <description>Replace unique keys in 'search_dataset' and 'search_index' by primary keys.</description>
              <signature>search_update_7000()</signature>
              <docrelurl>search_update_7000/7</docrelurl>
            </item>
            <item name= "search_update_totals">
              <description>This function is called on shutdown to ensure that search_total is always up to date (even if cron times out or otherwise fails).</description>
              <signature>search_update_totals()</signature>
              <docrelurl>search_update_totals/7</docrelurl>
            </item>
            <item name= "search_view">
              <description>Menu callback; presents the search form and/or search results.</description>
              <signature>search_view($type = 'node')</signature>
              <docrelurl>search_view/7</docrelurl>
            </item>
            <item name= "session_test_boot">
              <description>Implements hook_boot().</description>
              <signature>session_test_boot()</signature>
              <docrelurl>session_test_boot/7</docrelurl>
            </item>
            <item name= "session_test_drupal_goto_alter">
              <description>Implements hook_drupal_goto_alter(). Force the redirection to go to a non-secure page after being on a secure page through https.php.</description>
              <signature>session_test_drupal_goto_alter(&amp;$path, &amp;$options, &amp;$http_response_code)</signature>
              <docrelurl>session_test_drupal_goto_alter/7</docrelurl>
            </item>
            <item name= "session_test_form_user_login_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>session_test_form_user_login_alter(&amp;$form)</signature>
              <docrelurl>session_test_form_user_login_alter/7</docrelurl>
            </item>
            <item name= "session_test_menu">
              <description>Implements hook_menu().</description>
              <signature>session_test_menu()</signature>
              <docrelurl>session_test_menu/7</docrelurl>
            </item>
            <item name= "session_test_user_login">
              <description>Implements hook_user().</description>
              <signature>session_test_user_login($edit = array(), $user = NULL)</signature>
              <docrelurl>session_test_user_login/7</docrelurl>
            </item>
            <item name= "seven_admin_block_content">
              <description>Override of theme_admin_block_content(). Use unordered list markup in both compact and extended move.</description>
              <signature>seven_admin_block_content($variables)</signature>
              <docrelurl>seven_admin_block_content/7</docrelurl>
            </item>
            <item name= "seven_css_alter">
              <description>Implements hook_css_alter().</description>
              <signature>seven_css_alter(&amp;$css)</signature>
              <docrelurl>seven_css_alter/7</docrelurl>
            </item>
            <item name= "seven_node_add_list">
              <description>Display the list of available node types for node creation.</description>
              <signature>seven_node_add_list($variables)</signature>
              <docrelurl>seven_node_add_list/7</docrelurl>
            </item>
            <item name= "seven_preprocess_html">
              <description>Override or insert variables into the html template.</description>
              <signature>seven_preprocess_html(&amp;$vars)</signature>
              <docrelurl>seven_preprocess_html/7</docrelurl>
            </item>
            <item name= "seven_preprocess_maintenance_page">
              <description>Override or insert variables into the maintenance page template.</description>
              <signature>seven_preprocess_maintenance_page(&amp;$vars)</signature>
              <docrelurl>seven_preprocess_maintenance_page/7</docrelurl>
            </item>
            <item name= "seven_preprocess_page">
              <description>Override or insert variables into the page template.</description>
              <signature>seven_preprocess_page(&amp;$vars)</signature>
              <docrelurl>seven_preprocess_page/7</docrelurl>
            </item>
            <item name= "seven_tablesort_indicator">
              <description>Override of theme_tablesort_indicator(). Use our own image versions, so they show up as black and not gray on gray.</description>
              <signature>seven_tablesort_indicator($variables)</signature>
              <docrelurl>seven_tablesort_indicator/7</docrelurl>
            </item>
            <item name= "shortcut_admin_add_link">
              <description>Adds a link to the end of a shortcut set, keeping within a prescribed limit.</description>
              <signature>shortcut_admin_add_link($shortcut_link, &amp;$shortcut_set, $limit = NULL)</signature>
              <docrelurl>shortcut_admin_add_link/7</docrelurl>
            </item>
            <item name= "shortcut_block_info">
              <description>Implements hook_block_info().</description>
              <signature>shortcut_block_info()</signature>
              <docrelurl>shortcut_block_info/7</docrelurl>
            </item>
            <item name= "shortcut_block_view">
              <description>Implements hook_block_view().</description>
              <signature>shortcut_block_view($delta = '')</signature>
              <docrelurl>shortcut_block_view/7</docrelurl>
            </item>
            <item name= "shortcut_current_displayed_set">
              <description>Returns the current displayed shortcut set for the provided user account.</description>
              <signature>shortcut_current_displayed_set($account = NULL)</signature>
              <docrelurl>shortcut_current_displayed_set/7</docrelurl>
            </item>
            <item name= "shortcut_default_set">
              <description>Returns the default shortcut set for a given user account.</description>
              <signature>shortcut_default_set($account = NULL)</signature>
              <docrelurl>shortcut_default_set/7</docrelurl>
            </item>
            <item name= "shortcut_help">
              <description>Implements hook_help().</description>
              <signature>shortcut_help($path, $arg)</signature>
              <docrelurl>shortcut_help/7</docrelurl>
            </item>
            <item name= "shortcut_install">
              <description>Implements hook_install().</description>
              <signature>shortcut_install()</signature>
              <docrelurl>shortcut_install/7</docrelurl>
            </item>
            <item name= "shortcut_link_access">
              <description>Access callback for editing a link in a shortcut set.</description>
              <signature>shortcut_link_access($menu_link)</signature>
              <docrelurl>shortcut_link_access/7</docrelurl>
            </item>
            <item name= "shortcut_link_add">
              <description>Form callback: builds the form for adding a new shortcut link.</description>
              <signature>shortcut_link_add($form, &amp;$form_state, $shortcut_set)</signature>
              <docrelurl>shortcut_link_add/7</docrelurl>
            </item>
            <item name= "shortcut_link_add_inline">
              <description>Menu page callback: creates a new link in the provided shortcut set. After completion, redirects the user back to where they came from.</description>
              <signature>shortcut_link_add_inline($shortcut_set)</signature>
              <docrelurl>shortcut_link_add_inline/7</docrelurl>
            </item>
            <item name= "shortcut_link_add_submit">
              <description>Submit handler for shortcut_link_add().</description>
              <signature>shortcut_link_add_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_link_add_submit/7</docrelurl>
            </item>
            <item name= "shortcut_link_delete">
              <description>Form callback: builds the confirmation form for deleting a shortcut link.</description>
              <signature>shortcut_link_delete($form, &amp;$form_state, $shortcut_link)</signature>
              <docrelurl>shortcut_link_delete/7</docrelurl>
            </item>
            <item name= "shortcut_link_delete_submit">
              <description>Submit handler for shortcut_link_delete_submit().</description>
              <signature>shortcut_link_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_link_delete_submit/7</docrelurl>
            </item>
            <item name= "shortcut_link_edit">
              <description>Form callback: builds the form for editing a shortcut link.</description>
              <signature>shortcut_link_edit($form, &amp;$form_state, $shortcut_link)</signature>
              <docrelurl>shortcut_link_edit/7</docrelurl>
            </item>
            <item name= "shortcut_link_edit_submit">
              <description>Submit handler for shortcut_link_edit().</description>
              <signature>shortcut_link_edit_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_link_edit_submit/7</docrelurl>
            </item>
            <item name= "shortcut_link_edit_validate">
              <description>Validation handler for the shortcut link add and edit forms.</description>
              <signature>shortcut_link_edit_validate($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_link_edit_validate/7</docrelurl>
            </item>
            <item name= "shortcut_max_slots">
              <description>Returns the maximum number of shortcut "slots" available per shortcut set. This is used as a limitation in the user interface only.</description>
              <signature>shortcut_max_slots()</signature>
              <docrelurl>shortcut_max_slots/7</docrelurl>
            </item>
            <item name= "shortcut_menu">
              <description>Implements hook_menu().</description>
              <signature>shortcut_menu()</signature>
              <docrelurl>shortcut_menu/7</docrelurl>
            </item>
            <item name= "shortcut_page_alter">
              <description>Implements hook_page_alter().</description>
              <signature>shortcut_page_alter(&amp;$page)</signature>
              <docrelurl>shortcut_page_alter/7</docrelurl>
            </item>
            <item name= "shortcut_permission">
              <description>Implements hook_permission().</description>
              <signature>shortcut_permission()</signature>
              <docrelurl>shortcut_permission/7</docrelurl>
            </item>
            <item name= "shortcut_preprocess_page">
              <description>Implements hook_preprocess_page().</description>
              <signature>shortcut_preprocess_page(&amp;$variables)</signature>
              <docrelurl>shortcut_preprocess_page/7</docrelurl>
            </item>
            <item name= "shortcut_renderable_links">
              <description>Returns an array of shortcut links, suitable for rendering.</description>
              <signature>shortcut_renderable_links($shortcut_set = NULL)</signature>
              <docrelurl>shortcut_renderable_links/7</docrelurl>
            </item>
            <item name= "shortcut_schema">
              <description>Implements hook_schema().</description>
              <signature>shortcut_schema()</signature>
              <docrelurl>shortcut_schema/7</docrelurl>
            </item>
            <item name= "shortcut_sets">
              <description>Returns an array of all shortcut sets, keyed by the set name.</description>
              <signature>shortcut_sets()</signature>
              <docrelurl>shortcut_sets/7</docrelurl>
            </item>
            <item name= "shortcut_set_add_form">
              <description>Form callback: builds the form for adding a shortcut set.</description>
              <signature>shortcut_set_add_form($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_add_form/7</docrelurl>
            </item>
            <item name= "shortcut_set_add_form_submit">
              <description>Submit handler for shortcut_set_add_form().</description>
              <signature>shortcut_set_add_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_add_form_submit/7</docrelurl>
            </item>
            <item name= "shortcut_set_admin">
              <description>Menu page callback: builds the page for administering shortcut sets.</description>
              <signature>shortcut_set_admin()</signature>
              <docrelurl>shortcut_set_admin/7</docrelurl>
            </item>
            <item name= "shortcut_set_assign_user">
              <description>Assigns a user to a particular shortcut set.</description>
              <signature>shortcut_set_assign_user($shortcut_set, $account)</signature>
              <docrelurl>shortcut_set_assign_user/7</docrelurl>
            </item>
            <item name= "shortcut_set_customize">
              <description>Form callback: builds the form for customizing shortcut sets.</description>
              <signature>shortcut_set_customize($form, &amp;$form_state, $shortcut_set)</signature>
              <docrelurl>shortcut_set_customize/7</docrelurl>
            </item>
            <item name= "shortcut_set_customize_submit">
              <description>Submit handler for shortcut_set_customize().</description>
              <signature>shortcut_set_customize_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_customize_submit/7</docrelurl>
            </item>
            <item name= "shortcut_set_delete">
              <description>Deletes a shortcut set. Note that the default set cannot be deleted.</description>
              <signature>shortcut_set_delete($shortcut_set)</signature>
              <docrelurl>shortcut_set_delete/7</docrelurl>
            </item>
            <item name= "shortcut_set_delete_access">
              <description>Access callback for deleting a shortcut set.</description>
              <signature>shortcut_set_delete_access($shortcut_set)</signature>
              <docrelurl>shortcut_set_delete_access/7</docrelurl>
            </item>
            <item name= "shortcut_set_delete_form">
              <description>Form callback: builds the confirmation form for deleting a shortcut set.</description>
              <signature>shortcut_set_delete_form($form, &amp;$form_state, $shortcut_set)</signature>
              <docrelurl>shortcut_set_delete_form/7</docrelurl>
            </item>
            <item name= "shortcut_set_delete_form_submit">
              <description>Submit handler for shortcut_set_delete_form().</description>
              <signature>shortcut_set_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_delete_form_submit/7</docrelurl>
            </item>
            <item name= "shortcut_set_edit_access">
              <description>Access callback for editing a shortcut set.</description>
              <signature>shortcut_set_edit_access($shortcut_set = NULL)</signature>
              <docrelurl>shortcut_set_edit_access/7</docrelurl>
            </item>
            <item name= "shortcut_set_edit_form">
              <description>Form callback: builds the form for editing the shortcut set name.</description>
              <signature>shortcut_set_edit_form($form, &amp;$form_state, $shortcut_set)</signature>
              <docrelurl>shortcut_set_edit_form/7</docrelurl>
            </item>
            <item name= "shortcut_set_edit_form_submit">
              <description>Submit handler for shortcut_set_edit_form().</description>
              <signature>shortcut_set_edit_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_edit_form_submit/7</docrelurl>
            </item>
            <item name= "shortcut_set_get_unique_name">
              <description>Returns a unique, machine-readable shortcut set name.</description>
              <signature>shortcut_set_get_unique_name()</signature>
              <docrelurl>shortcut_set_get_unique_name/7</docrelurl>
            </item>
            <item name= "shortcut_set_load">
              <description>Loads the data for a shortcut set.</description>
              <signature>shortcut_set_load($set_name)</signature>
              <docrelurl>shortcut_set_load/7</docrelurl>
            </item>
            <item name= "shortcut_set_name">
              <description>Returns the name of a shortcut set, based on a provided number. All shortcut sets have names like "shortcut-set-N" so that they can be matched with a properly-namespaced entry in the {menu_links} table.</description>
              <signature>shortcut_set_name($number)</signature>
              <docrelurl>shortcut_set_name/7</docrelurl>
            </item>
            <item name= "shortcut_set_reset_link_weights">
              <description>Resets the link weights in a shortcut set to match their current order. This function can be used, for example, when a new shortcut link is added to the set. If the link is added to the end of the array and this function is called, it will force that link to display at the end of the list.</description>
              <signature>shortcut_set_reset_link_weights(&amp;$shortcut_set)</signature>
              <docrelurl>shortcut_set_reset_link_weights/7</docrelurl>
            </item>
            <item name= "shortcut_set_save">
              <description>Saves a shortcut set.</description>
              <signature>shortcut_set_save(&amp;$shortcut_set)</signature>
              <docrelurl>shortcut_set_save/7</docrelurl>
            </item>
            <item name= "shortcut_set_switch">
              <description>Form callback: builds the form for switching shortcut sets.</description>
              <signature>shortcut_set_switch($form, &amp;$form_state, $account = NULL)</signature>
              <docrelurl>shortcut_set_switch/7</docrelurl>
            </item>
            <item name= "shortcut_set_switch_access">
              <description>Access callback for switching the shortcut set assigned to a user account.</description>
              <signature>shortcut_set_switch_access($account = NULL)</signature>
              <docrelurl>shortcut_set_switch_access/7</docrelurl>
            </item>
            <item name= "shortcut_set_switch_submit">
              <description>Submit handler for shortcut_set_switch().</description>
              <signature>shortcut_set_switch_submit($form, &amp;$form_state)</signature>
              <docrelurl>shortcut_set_switch_submit/7</docrelurl>
            </item>
            <item name= "shortcut_set_title">
              <description>Returns the title of a shortcut set. Title callback for the editing pages for shortcut sets.</description>
              <signature>shortcut_set_title($shortcut_set)</signature>
              <docrelurl>shortcut_set_title/7</docrelurl>
            </item>
            <item name= "shortcut_set_unassign_user">
              <description>Unassigns a user from any shortcut set they may have been assigned to. The user will go back to using whatever default set applies.</description>
              <signature>shortcut_set_unassign_user($account)</signature>
              <docrelurl>shortcut_set_unassign_user/7</docrelurl>
            </item>
            <item name= "shortcut_theme">
              <description>Implements hook_theme().</description>
              <signature>shortcut_theme()</signature>
              <docrelurl>shortcut_theme/7</docrelurl>
            </item>
            <item name= "shortcut_toolbar_pre_render">
              <description>Pre-render function for adding shortcuts to the toolbar drawer.</description>
              <signature>shortcut_toolbar_pre_render($toolbar)</signature>
              <docrelurl>shortcut_toolbar_pre_render/7</docrelurl>
            </item>
            <item name= "shortcut_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>shortcut_uninstall()</signature>
              <docrelurl>shortcut_uninstall/7</docrelurl>
            </item>
            <item name= "shortcut_valid_link">
              <description>Determines if a path corresponds to a valid shortcut link.</description>
              <signature>shortcut_valid_link($path)</signature>
              <docrelurl>shortcut_valid_link/7</docrelurl>
            </item>
            <item name= "show">
              <description>Show a hidden or already printed element from later rendering. Alternatively, render($element) could be used which automatically shows the element while rendering it.</description>
              <signature>show(&amp;$element)</signature>
              <docrelurl>show/7</docrelurl>
            </item>
            <item name= "simpletest_clean_database">
              <description>Removed prefixed tables from the database that are left over from crashed tests.</description>
              <signature>simpletest_clean_database()</signature>
              <docrelurl>simpletest_clean_database/7</docrelurl>
            </item>
            <item name= "simpletest_clean_environment">
              <description>Remove all temporary database tables and directories.</description>
              <signature>simpletest_clean_environment()</signature>
              <docrelurl>simpletest_clean_environment/7</docrelurl>
            </item>
            <item name= "simpletest_clean_results_table">
              <description>Clear the test result tables.</description>
              <signature>simpletest_clean_results_table($test_id = NULL)</signature>
              <docrelurl>simpletest_clean_results_table/7</docrelurl>
            </item>
            <item name= "simpletest_clean_temporary_directories">
              <description>Find all leftover temporary directories and remove them.</description>
              <signature>simpletest_clean_temporary_directories()</signature>
              <docrelurl>simpletest_clean_temporary_directories/7</docrelurl>
            </item>
            <item name= "simpletest_generate_file">
              <description>Generate test file.</description>
              <signature>simpletest_generate_file($filename, $width, $lines, $type = 'binary-text')</signature>
              <docrelurl>simpletest_generate_file/7</docrelurl>
            </item>
            <item name= "simpletest_help">
              <description>Implements hook_help().</description>
              <signature>simpletest_help($path, $arg)</signature>
              <docrelurl>simpletest_help/7</docrelurl>
            </item>
            <item name= "simpletest_js_alter">
              <description>Implements hook_js_alter().</description>
              <signature>simpletest_js_alter(&amp;$javascript)</signature>
              <docrelurl>simpletest_js_alter/7</docrelurl>
            </item>
            <item name= "simpletest_last_test_get">
              <description>
                ▸ 1 function calls simpletest_last_test_get()
                ▾ 1 function calls simpletest_last_test_get()
                _simpletest_batch_finished in modules/simpletest/simpletest.module
              </description>
              <signature>simpletest_last_test_get($test_id)</signature>
              <docrelurl>simpletest_last_test_get/7</docrelurl>
            </item>
            <item name= "simpletest_log_read">
              <description>Read the error log and report any errors as assertion failures. The errors in the log should only be fatal errors since any other errors will have been recorded by the error handler.</description>
              <signature>simpletest_log_read($test_id, $prefix, $test_class, $during_test = FALSE)</signature>
              <docrelurl>simpletest_log_read/7</docrelurl>
            </item>
            <item name= "simpletest_menu">
              <description>Implements hook_menu().</description>
              <signature>simpletest_menu()</signature>
              <docrelurl>simpletest_menu/7</docrelurl>
            </item>
            <item name= "simpletest_permission">
              <description>Implements hook_permission().</description>
              <signature>simpletest_permission()</signature>
              <docrelurl>simpletest_permission/7</docrelurl>
            </item>
            <item name= "simpletest_registry_files_alter">
              <description>Implements hook_registry_files_alter(). Add the test files for disabled modules so that we get a list containing all the avialable tests.</description>
              <signature>simpletest_registry_files_alter(&amp;$files, $modules)</signature>
              <docrelurl>simpletest_registry_files_alter/7</docrelurl>
            </item>
            <item name= "simpletest_requirements">
              <description>Check that the cURL extension exists for PHP.</description>
              <signature>simpletest_requirements($phase)</signature>
              <docrelurl>simpletest_requirements/7</docrelurl>
            </item>
            <item name= "simpletest_result_form">
              <description>Test results form for $test_id.</description>
              <signature>simpletest_result_form($form, &amp;$form_state, $test_id)</signature>
              <docrelurl>simpletest_result_form/7</docrelurl>
            </item>
            <item name= "simpletest_result_form_submit">
              <description>Re-run the tests that match the filter.</description>
              <signature>simpletest_result_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>simpletest_result_form_submit/7</docrelurl>
            </item>
            <item name= "simpletest_result_get">
              <description>Get test results for $test_id.</description>
              <signature>simpletest_result_get($test_id)</signature>
              <docrelurl>simpletest_result_get/7</docrelurl>
            </item>
            <item name= "simpletest_result_status_image">
              <description>Get the appropriate image for the status.</description>
              <signature>simpletest_result_status_image($status)</signature>
              <docrelurl>simpletest_result_status_image/7</docrelurl>
            </item>
            <item name= "simpletest_run_tests">
              <description>Actually runs tests.</description>
              <signature>simpletest_run_tests($test_list, $reporter = 'drupal')</signature>
              <docrelurl>simpletest_run_tests/7</docrelurl>
            </item>
            <item name= "simpletest_schema">
              <description>Code modules/simpletest/simpletest.install, line 84</description>
              <signature>simpletest_schema()</signature>
              <docrelurl>simpletest_schema/7</docrelurl>
            </item>
            <item name= "simpletest_settings_form">
              <description>Provides settings form for SimpleTest variables.</description>
              <signature>simpletest_settings_form($form, &amp;$form_state)</signature>
              <docrelurl>simpletest_settings_form/7</docrelurl>
            </item>
            <item name= "simpletest_test_form">
              <description>List tests arranged in groups that can be selected and run.</description>
              <signature>simpletest_test_form($form)</signature>
              <docrelurl>simpletest_test_form/7</docrelurl>
            </item>
            <item name= "simpletest_test_form_submit">
              <description>Run selected tests.</description>
              <signature>simpletest_test_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>simpletest_test_form_submit/7</docrelurl>
            </item>
            <item name= "simpletest_test_get_all">
              <description>Get a list of all of the tests provided by the system. The list of test classes is loaded from the registry where it looks for files ending in ".test". Once loaded the test list is cached and stored in a static variable. In order to list tests provided by disabled modules hook_registry_files_alter() is used to forcefully add them to the registry.</description>
              <signature>simpletest_test_get_all()</signature>
              <docrelurl>simpletest_test_get_all/7</docrelurl>
            </item>
            <item name= "simpletest_test_stream_wrappers">
              <description>Implements hook_stream_wrappers().</description>
              <signature>simpletest_test_stream_wrappers()</signature>
              <docrelurl>simpletest_test_stream_wrappers/7</docrelurl>
            </item>
            <item name= "simpletest_theme">
              <description>Implements hook_theme().</description>
              <signature>simpletest_theme()</signature>
              <docrelurl>simpletest_theme/7</docrelurl>
            </item>
            <item name= "simpletest_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>simpletest_uninstall()</signature>
              <docrelurl>simpletest_uninstall/7</docrelurl>
            </item>
            <item name= "simpletest_verbose">
              <description>Log verbose message in a text file. If verbose mode is enabled then page requests will be dumped to a file and presented on the test result screen. The messages will be placed in a file located in the simpletest directory in the original file system.</description>
              <signature>simpletest_verbose($message, $original_file_directory = NULL, $test_class = NULL)</signature>
              <docrelurl>simpletest_verbose/7</docrelurl>
            </item>
            <item name= "st">
              <description>Functional equivalent of t(), used when some systems are not available. Used during the install process, when database, theme, and localization system is possibly not yet available.</description>
              <signature>st($string, array $args = array(), array $options = array())</signature>
              <docrelurl>st/7</docrelurl>
            </item>
            <item name= "standard_form_alter">
              <description>Implements hook_form_alter(). Allows the profile to alter the site configuration form.</description>
              <signature>standard_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>standard_form_alter/7</docrelurl>
            </item>
            <item name= "standard_install">
              <description>Implements hook_install(). Perform actions to set up the site for this profile.</description>
              <signature>standard_install()</signature>
              <docrelurl>standard_install/7</docrelurl>
            </item>
            <item name= "statistics_access_log">
              <description>Menu callback; Displays recent page accesses.</description>
              <signature>statistics_access_log($aid)</signature>
              <docrelurl>statistics_access_log/7</docrelurl>
            </item>
            <item name= "statistics_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>statistics_block_configure($delta = '')</signature>
              <docrelurl>statistics_block_configure/7</docrelurl>
            </item>
            <item name= "statistics_block_info">
              <description>Implements hook_block_info().</description>
              <signature>statistics_block_info()</signature>
              <docrelurl>statistics_block_info/7</docrelurl>
            </item>
            <item name= "statistics_block_save">
              <description>Implements hook_block_save().</description>
              <signature>statistics_block_save($delta = '', $edit = array())</signature>
              <docrelurl>statistics_block_save/7</docrelurl>
            </item>
            <item name= "statistics_block_view">
              <description>Implements hook_block_view().</description>
              <signature>statistics_block_view($delta = '')</signature>
              <docrelurl>statistics_block_view/7</docrelurl>
            </item>
            <item name= "statistics_cron">
              <description>Implements hook_cron().</description>
              <signature>statistics_cron()</signature>
              <docrelurl>statistics_cron/7</docrelurl>
            </item>
            <item name= "statistics_exit">
              <description>Implements hook_exit(). This is where statistics are gathered on page accesses.</description>
              <signature>statistics_exit()</signature>
              <docrelurl>statistics_exit/7</docrelurl>
            </item>
            <item name= "statistics_get">
              <description>Retrieves a node's "view statistics".</description>
              <signature>statistics_get($nid)</signature>
              <docrelurl>statistics_get/7</docrelurl>
            </item>
            <item name= "statistics_help">
              <description>Implements hook_help().</description>
              <signature>statistics_help($path, $arg)</signature>
              <docrelurl>statistics_help/7</docrelurl>
            </item>
            <item name= "statistics_menu">
              <description>Implements hook_menu().</description>
              <signature>statistics_menu()</signature>
              <docrelurl>statistics_menu/7</docrelurl>
            </item>
            <item name= "statistics_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>statistics_node_delete($node)</signature>
              <docrelurl>statistics_node_delete/7</docrelurl>
            </item>
            <item name= "statistics_node_tracker">
              <description>Code modules/statistics/statistics.pages.inc, line 9</description>
              <signature>statistics_node_tracker()</signature>
              <docrelurl>statistics_node_tracker/7</docrelurl>
            </item>
            <item name= "statistics_node_view">
              <description>Implements hook_node_view().</description>
              <signature>statistics_node_view($node, $view_mode)</signature>
              <docrelurl>statistics_node_view/7</docrelurl>
            </item>
            <item name= "statistics_permission">
              <description>Implements hook_permission().</description>
              <signature>statistics_permission()</signature>
              <docrelurl>statistics_permission/7</docrelurl>
            </item>
            <item name= "statistics_ranking">
              <description>Implements hook_ranking().</description>
              <signature>statistics_ranking()</signature>
              <docrelurl>statistics_ranking/7</docrelurl>
            </item>
            <item name= "statistics_recent_hits">
              <description>Menu callback; presents the "recent hits" page.</description>
              <signature>statistics_recent_hits()</signature>
              <docrelurl>statistics_recent_hits/7</docrelurl>
            </item>
            <item name= "statistics_schema">
              <description>Implements hook_schema().</description>
              <signature>statistics_schema()</signature>
              <docrelurl>statistics_schema/7</docrelurl>
            </item>
            <item name= "statistics_settings_form">
              <description>Form builder; Configure access logging.</description>
              <signature>statistics_settings_form()</signature>
              <docrelurl>statistics_settings_form/7</docrelurl>
            </item>
            <item name= "statistics_title_list">
              <description>Returns all time or today top or last viewed node(s).</description>
              <signature>statistics_title_list($dbfield, $dbrows)</signature>
              <docrelurl>statistics_title_list/7</docrelurl>
            </item>
            <item name= "statistics_tokens">
              <description>Implements hook_tokens().</description>
              <signature>statistics_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>statistics_tokens/7</docrelurl>
            </item>
            <item name= "statistics_token_info">
              <description>Implements hook_token_info().</description>
              <signature>statistics_token_info()</signature>
              <docrelurl>statistics_token_info/7</docrelurl>
            </item>
            <item name= "statistics_top_pages">
              <description>Menu callback; presents the "top pages" page.</description>
              <signature>statistics_top_pages()</signature>
              <docrelurl>statistics_top_pages/7</docrelurl>
            </item>
            <item name= "statistics_top_referrers">
              <description>Menu callback; presents the "referrer" page.</description>
              <signature>statistics_top_referrers()</signature>
              <docrelurl>statistics_top_referrers/7</docrelurl>
            </item>
            <item name= "statistics_top_visitors">
              <description>Menu callback; presents the "top visitors" page.</description>
              <signature>statistics_top_visitors()</signature>
              <docrelurl>statistics_top_visitors/7</docrelurl>
            </item>
            <item name= "statistics_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>statistics_uninstall()</signature>
              <docrelurl>statistics_uninstall/7</docrelurl>
            </item>
            <item name= "statistics_update_index">
              <description>Implements hook_update_index().</description>
              <signature>statistics_update_index()</signature>
              <docrelurl>statistics_update_index/7</docrelurl>
            </item>
            <item name= "statistics_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>statistics_user_cancel($edit, $account, $method)</signature>
              <docrelurl>statistics_user_cancel/7</docrelurl>
            </item>
            <item name= "statistics_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>statistics_user_delete($account)</signature>
              <docrelurl>statistics_user_delete/7</docrelurl>
            </item>
            <item name= "statistics_user_tracker">
              <description>Code modules/statistics/statistics.pages.inc, line 56</description>
              <signature>statistics_user_tracker()</signature>
              <docrelurl>statistics_user_tracker/7</docrelurl>
            </item>
            <item name= "syslog_facility_list">
              <description>List all possible syslog facilities for UNIX/Linux.</description>
              <signature>syslog_facility_list()</signature>
              <docrelurl>syslog_facility_list/7</docrelurl>
            </item>
            <item name= "syslog_form_system_logging_settings_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>syslog_form_system_logging_settings_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>syslog_form_system_logging_settings_alter/7</docrelurl>
            </item>
            <item name= "syslog_help">
              <description>Implements hook_help().</description>
              <signature>syslog_help($path, $arg)</signature>
              <docrelurl>syslog_help/7</docrelurl>
            </item>
            <item name= "syslog_watchdog">
              <description>Implements hook_watchdog().</description>
              <signature>syslog_watchdog(array $log_entry)</signature>
              <docrelurl>syslog_watchdog/7</docrelurl>
            </item>
            <item name= "system_actions_configure">
              <description>Menu callback; Creates the form for configuration of a single action. We provide the "Description" field. The rest of the form is provided by the action. We then provide the Save button. Because we are combining unknown form elements with the action configuration form, we use an 'actions_' prefix on our elements.</description>
              <signature>system_actions_configure($form, &amp;$form_state, $action = NULL)</signature>
              <docrelurl>system_actions_configure/7</docrelurl>
            </item>
            <item name= "system_actions_configure_submit">
              <description>Process system_actions_configure() form submissions.</description>
              <signature>system_actions_configure_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_actions_configure_submit/7</docrelurl>
            </item>
            <item name= "system_actions_configure_validate">
              <description>Validate system_actions_configure() form submissions.</description>
              <signature>system_actions_configure_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_actions_configure_validate/7</docrelurl>
            </item>
            <item name= "system_actions_delete_form">
              <description>Create the form for confirmation of deleting an action.</description>
              <signature>system_actions_delete_form($form, &amp;$form_state, $action)</signature>
              <docrelurl>system_actions_delete_form/7</docrelurl>
            </item>
            <item name= "system_actions_delete_form_submit">
              <description>Process system_actions_delete form submissions. Post-deletion operations for action deletion.</description>
              <signature>system_actions_delete_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_actions_delete_form_submit/7</docrelurl>
            </item>
            <item name= "system_actions_manage">
              <description>Menu callback; Displays an overview of available and configured actions.</description>
              <signature>system_actions_manage()</signature>
              <docrelurl>system_actions_manage/7</docrelurl>
            </item>
            <item name= "system_actions_manage_form">
              <description>Define the form for the actions overview page.</description>
              <signature>system_actions_manage_form($form, &amp;$form_state, $options = array())</signature>
              <docrelurl>system_actions_manage_form/7</docrelurl>
            </item>
            <item name= "system_actions_manage_form_submit">
              <description>Process system_actions_manage form submissions.</description>
              <signature>system_actions_manage_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_actions_manage_form_submit/7</docrelurl>
            </item>
            <item name= "system_actions_remove_orphans">
              <description>Remove actions that are in the database but not supported by any enabled module.</description>
              <signature>system_actions_remove_orphans()</signature>
              <docrelurl>system_actions_remove_orphans/7</docrelurl>
            </item>
            <item name= "system_action_delete_orphans_post">
              <description>Post-deletion operations for deleting action orphans.</description>
              <signature>system_action_delete_orphans_post($orphaned)</signature>
              <docrelurl>system_action_delete_orphans_post/7</docrelurl>
            </item>
            <item name= "system_action_info">
              <description>Implements hook_action_info().</description>
              <signature>system_action_info()</signature>
              <docrelurl>system_action_info/7</docrelurl>
            </item>
            <item name= "system_add_date_formats_form_submit">
              <description>Process new date format string submission.</description>
              <signature>system_add_date_formats_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_add_date_formats_form_submit/7</docrelurl>
            </item>
            <item name= "system_add_date_formats_form_validate">
              <description>Validate new date format string submission.</description>
              <signature>system_add_date_formats_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_add_date_formats_form_validate/7</docrelurl>
            </item>
            <item name= "system_add_date_format_type_form">
              <description>Add new date type.</description>
              <signature>system_add_date_format_type_form($form, &amp;$form_state)</signature>
              <docrelurl>system_add_date_format_type_form/7</docrelurl>
            </item>
            <item name= "system_add_date_format_type_form_submit">
              <description>Process system_add_date_format_type form submissions.</description>
              <signature>system_add_date_format_type_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_add_date_format_type_form_submit/7</docrelurl>
            </item>
            <item name= "system_add_date_format_type_form_validate">
              <description>Validate system_add_date_format_type form submissions.</description>
              <signature>system_add_date_format_type_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_add_date_format_type_form_validate/7</docrelurl>
            </item>
            <item name= "system_admin_by_module">
              <description>Menu callback; prints a listing of admin tasks for each installed module.</description>
              <signature>system_admin_by_module()</signature>
              <docrelurl>system_admin_by_module/7</docrelurl>
            </item>
            <item name= "system_admin_compact_mode">
              <description>Determines if the current user is in compact mode.</description>
              <signature>system_admin_compact_mode()</signature>
              <docrelurl>system_admin_compact_mode/7</docrelurl>
            </item>
            <item name= "system_admin_compact_page">
              <description>Menu callback; Sets whether the admin menu is in compact mode or not.</description>
              <signature>system_admin_compact_page($mode = 'off')</signature>
              <docrelurl>system_admin_compact_page/7</docrelurl>
            </item>
            <item name= "system_admin_config_page">
              <description>Menu callback; Provide the administration overview page.</description>
              <signature>system_admin_config_page()</signature>
              <docrelurl>system_admin_config_page/7</docrelurl>
            </item>
            <item name= "system_admin_menu_block">
              <description>Provide a single block on the administration overview page.</description>
              <signature>system_admin_menu_block($item)</signature>
              <docrelurl>system_admin_menu_block/7</docrelurl>
            </item>
            <item name= "system_admin_menu_block_page">
              <description>Provide a single block from the administration menu as a page. This function is often a destination for these blocks. For example, 'admin/structure/types' needs to have a destination to be valid in the Drupal menu system, but too much information there might be hidden, so we supply the contents of the block.</description>
              <signature>system_admin_menu_block_page()</signature>
              <docrelurl>system_admin_menu_block_page/7</docrelurl>
            </item>
            <item name= "system_admin_paths">
              <description>Implements hook_admin_paths().</description>
              <signature>system_admin_paths()</signature>
              <docrelurl>system_admin_paths/7</docrelurl>
            </item>
            <item name= "system_archiver_info">
              <description>Implements hook_archiver_info().</description>
              <signature>system_archiver_info()</signature>
              <docrelurl>system_archiver_info/7</docrelurl>
            </item>
            <item name= "system_authorized_batch_process">
              <description>Use authorize.php to run batch_process().</description>
              <signature>system_authorized_batch_process()</signature>
              <docrelurl>system_authorized_batch_process/7</docrelurl>
            </item>
            <item name= "system_authorized_get_url">
              <description>Return the URL for the authorize.php script.</description>
              <signature>system_authorized_get_url(array $options = array())</signature>
              <docrelurl>system_authorized_get_url/7</docrelurl>
            </item>
            <item name= "system_authorized_init">
              <description>Setup a given callback to run via authorize.php with elevated privileges. To use authorize.php, certain variables must be stashed into $_SESSION. This function sets up all the necessary $_SESSION variables, then returns the full path to authorize.php so the caller can redirect to authorize.php. That initiates the workflow that will eventually lead to the callback being invoked. The callback will be invoked at a low bootstrap level, without all modules being invoked, so it needs to be careful not to assume any code exists.</description>
              <signature>system_authorized_init($callback, $file, $arguments = array(), $page_title = NULL)</signature>
              <docrelurl>system_authorized_init/7</docrelurl>
            </item>
            <item name= "system_authorized_run">
              <description>Setup and invoke an operation using authorize.php.</description>
              <signature>system_authorized_run($callback, $file, $arguments = array(), $page_title = NULL)</signature>
              <docrelurl>system_authorized_run/7</docrelurl>
            </item>
            <item name= "system_batch_page">
              <description>Default page callback for batches.</description>
              <signature>system_batch_page()</signature>
              <docrelurl>system_batch_page/7</docrelurl>
            </item>
            <item name= "system_block_info">
              <description>Implements hook_block_info().</description>
              <signature>system_block_info()</signature>
              <docrelurl>system_block_info/7</docrelurl>
            </item>
            <item name= "system_block_ip_action">
              <description>Blocks the current user's IP address.</description>
              <signature>system_block_ip_action()</signature>
              <docrelurl>system_block_ip_action/7</docrelurl>
            </item>
            <item name= "system_block_view">
              <description>Implements hook_block_view(). Generate a block with a promotional link to Drupal.org and all system menu blocks.</description>
              <signature>system_block_view($delta = '')</signature>
              <docrelurl>system_block_view/7</docrelurl>
            </item>
            <item name= "system_check_directory">
              <description>Checks the existence of the directory specified in $form_element. This function is called from the system_settings form to check both core file directories (file_public_path, file_private_path, file_temporary_path).</description>
              <signature>system_check_directory($form_element)</signature>
              <docrelurl>system_check_directory/7</docrelurl>
            </item>
            <item name= "system_check_http_request">
              <description>Checks whether the server is capable of issuing HTTP requests. The function sets the drupal_http_request_fail system variable to TRUE if drupal_http_request() does not work and then the system status report page will contain an error.</description>
              <signature>system_check_http_request()</signature>
              <docrelurl>system_check_http_request/7</docrelurl>
            </item>
            <item name= "system_clean_url_settings">
              <description>Form builder; Configure clean URL settings.</description>
              <signature>system_clean_url_settings($form, &amp;$form_state)</signature>
              <docrelurl>system_clean_url_settings/7</docrelurl>
            </item>
            <item name= "system_clear_cache_submit">
              <description>Submit callback; clear system caches.</description>
              <signature>system_clear_cache_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_clear_cache_submit/7</docrelurl>
            </item>
            <item name= "system_configure_date_formats_form">
              <description>Allow users to add additional date formats.</description>
              <signature>system_configure_date_formats_form($form, &amp;$form_state, $dfid = 0)</signature>
              <docrelurl>system_configure_date_formats_form/7</docrelurl>
            </item>
            <item name= "system_cron">
              <description>Implements hook_cron(). Remove older rows from flood and batch table. Remove old temporary files.</description>
              <signature>system_cron()</signature>
              <docrelurl>system_cron/7</docrelurl>
            </item>
            <item name= "system_date_delete_format_form">
              <description>Menu callback; present a form for deleting a date format.</description>
              <signature>system_date_delete_format_form($form, &amp;$form_state, $dfid)</signature>
              <docrelurl>system_date_delete_format_form/7</docrelurl>
            </item>
            <item name= "system_date_delete_format_form_submit">
              <description>Delete a configured date format.</description>
              <signature>system_date_delete_format_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_date_delete_format_form_submit/7</docrelurl>
            </item>
            <item name= "system_date_formats">
              <description>Implements hook_date_formats().</description>
              <signature>system_date_formats()</signature>
              <docrelurl>system_date_formats/7</docrelurl>
            </item>
            <item name= "system_date_formats_rebuild">
              <description>Resets the database cache of date formats and saves all new formats.</description>
              <signature>system_date_formats_rebuild()</signature>
              <docrelurl>system_date_formats_rebuild/7</docrelurl>
            </item>
            <item name= "system_date_format_delete">
              <description>Delete a date format from the database.</description>
              <signature>system_date_format_delete($dfid)</signature>
              <docrelurl>system_date_format_delete/7</docrelurl>
            </item>
            <item name= "system_date_format_locale">
              <description>Get the appropriate date format for a type and locale.</description>
              <signature>system_date_format_locale($langcode = NULL, $type = NULL)</signature>
              <docrelurl>system_date_format_locale/7</docrelurl>
            </item>
            <item name= "system_date_format_save">
              <description>Save a date format to the database.</description>
              <signature>system_date_format_save($date_format, $dfid = 0)</signature>
              <docrelurl>system_date_format_save/7</docrelurl>
            </item>
            <item name= "system_date_format_types">
              <description>Implements hook_date_format_types().</description>
              <signature>system_date_format_types()</signature>
              <docrelurl>system_date_format_types/7</docrelurl>
            </item>
            <item name= "system_date_format_type_delete">
              <description>Delete a date type from the database.</description>
              <signature>system_date_format_type_delete($date_format_type)</signature>
              <docrelurl>system_date_format_type_delete/7</docrelurl>
            </item>
            <item name= "system_date_format_type_save">
              <description>Save a date type to the database.</description>
              <signature>system_date_format_type_save($date_format_type)</signature>
              <docrelurl>system_date_format_type_save/7</docrelurl>
            </item>
            <item name= "system_date_time_formats">
              <description>Displays the date format strings overview page.</description>
              <signature>system_date_time_formats()</signature>
              <docrelurl>system_date_time_formats/7</docrelurl>
            </item>
            <item name= "system_date_time_lookup">
              <description>Return the date for a given format string via Ajax.</description>
              <signature>system_date_time_lookup()</signature>
              <docrelurl>system_date_time_lookup/7</docrelurl>
            </item>
            <item name= "system_date_time_settings">
              <description>Form builder; Configure the site date and time settings.</description>
              <signature>system_date_time_settings()</signature>
              <docrelurl>system_date_time_settings/7</docrelurl>
            </item>
            <item name= "system_default_date_formats">
              <description>Implements hook_date_formats().</description>
              <signature>system_default_date_formats()</signature>
              <docrelurl>system_default_date_formats/7</docrelurl>
            </item>
            <item name= "system_default_region">
              <description>Get the name of the default region for a given theme.</description>
              <signature>system_default_region($theme)</signature>
              <docrelurl>system_default_region/7</docrelurl>
            </item>
            <item name= "system_delete_date_format_type_form">
              <description>Menu callback; present a form for deleting a date type.</description>
              <signature>system_delete_date_format_type_form($form, &amp;$form_state, $format_type)</signature>
              <docrelurl>system_delete_date_format_type_form/7</docrelurl>
            </item>
            <item name= "system_delete_date_format_type_form_submit">
              <description>Delete a configured date type.</description>
              <signature>system_delete_date_format_type_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_delete_date_format_type_form_submit/7</docrelurl>
            </item>
            <item name= "system_element_info">
              <description>Implements hook_element_info().</description>
              <signature>system_element_info()</signature>
              <docrelurl>system_element_info/7</docrelurl>
            </item>
            <item name= "system_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>system_entity_info()</signature>
              <docrelurl>system_entity_info/7</docrelurl>
            </item>
            <item name= "system_filetransfer_backends">
              <description>Implements hook_filetransfer_backends().</description>
              <signature>system_filetransfer_backends()</signature>
              <docrelurl>system_filetransfer_backends/7</docrelurl>
            </item>
            <item name= "system_filetransfer_backend_form_ftp">
              <description>Returns the form to configure the filetransfer class for FTP</description>
              <signature>system_filetransfer_backend_form_ftp()</signature>
              <docrelurl>system_filetransfer_backend_form_ftp/7</docrelurl>
            </item>
            <item name= "system_filetransfer_backend_form_ssh">
              <description>Returns the form to configure the filetransfer class for SSH</description>
              <signature>system_filetransfer_backend_form_ssh()</signature>
              <docrelurl>system_filetransfer_backend_form_ssh/7</docrelurl>
            </item>
            <item name= "system_file_system_settings">
              <description>Form builder; Configure the site file handling.</description>
              <signature>system_file_system_settings()</signature>
              <docrelurl>system_file_system_settings/7</docrelurl>
            </item>
            <item name= "system_find_base_themes">
              <description>Find all the base themes for the specified theme. Themes can inherit templates and function implementations from earlier themes.</description>
              <signature>system_find_base_themes($themes, $key, $used_keys = array())</signature>
              <docrelurl>system_find_base_themes/7</docrelurl>
            </item>
            <item name= "system_flush_caches">
              <description>Implements hook_flush_caches().</description>
              <signature>system_flush_caches()</signature>
              <docrelurl>system_flush_caches/7</docrelurl>
            </item>
            <item name= "system_form_form_test_alter_form_alter">
              <description>Implements hook_form_FORM_ID_alter() on behalf of system.module.</description>
              <signature>system_form_form_test_alter_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>system_form_form_test_alter_form_alter/7</docrelurl>
            </item>
            <item name= "system_form_user_profile_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>system_form_user_profile_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>system_form_user_profile_form_alter/7</docrelurl>
            </item>
            <item name= "system_form_user_register_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>system_form_user_register_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>system_form_user_register_form_alter/7</docrelurl>
            </item>
            <item name= "system_get_date_format">
              <description>Get the format details for a particular id.</description>
              <signature>system_get_date_format($dfid)</signature>
              <docrelurl>system_get_date_format/7</docrelurl>
            </item>
            <item name= "system_get_date_formats">
              <description>Get the list of date formats for a particular format length.</description>
              <signature>system_get_date_formats($type = NULL)</signature>
              <docrelurl>system_get_date_formats/7</docrelurl>
            </item>
            <item name= "system_get_date_types">
              <description>Get the list of available date types and attributes.</description>
              <signature>system_get_date_types($type = NULL)</signature>
              <docrelurl>system_get_date_types/7</docrelurl>
            </item>
            <item name= "system_get_files_database">
              <description>Retrieves the current status of an array of files in the system table.</description>
              <signature>system_get_files_database(&amp;$files, $type)</signature>
              <docrelurl>system_get_files_database/7</docrelurl>
            </item>
            <item name= "system_get_filetransfer_settings_form">
              <description>Helper function to return a form for configuring a filetransfer backend.</description>
              <signature>system_get_filetransfer_settings_form($filetransfer_backend_name, $defaults)</signature>
              <docrelurl>system_get_filetransfer_settings_form/7</docrelurl>
            </item>
            <item name= "system_get_info">
              <description>Returns an array of information about active modules or themes. This function returns the information from the {system} table corresponding to the cached contents of the .info file for each active module or theme.</description>
              <signature>system_get_info($type)</signature>
              <docrelurl>system_get_info/7</docrelurl>
            </item>
            <item name= "system_get_module_admin_tasks">
              <description>Generate a list of tasks offered by a specified module.</description>
              <signature>system_get_module_admin_tasks($module)</signature>
              <docrelurl>system_get_module_admin_tasks/7</docrelurl>
            </item>
            <item name= "system_goto_action">
              <description>Redirects to a different URL.</description>
              <signature>system_goto_action($entity, $context)</signature>
              <docrelurl>system_goto_action/7</docrelurl>
            </item>
            <item name= "system_goto_action_form">
              <description>Settings form for system_goto_action().</description>
              <signature>system_goto_action_form($context)</signature>
              <docrelurl>system_goto_action_form/7</docrelurl>
            </item>
            <item name= "system_goto_action_submit">
              <description>Code modules/system/system.module, line 3077</description>
              <signature>system_goto_action_submit($form, $form_state)</signature>
              <docrelurl>system_goto_action_submit/7</docrelurl>
            </item>
            <item name= "system_help">
              <description>Implements hook_help().</description>
              <signature>system_help($path, $arg)</signature>
              <docrelurl>system_help/7</docrelurl>
            </item>
            <item name= "system_hook_info">
              <description>Implements hook_hook_info().</description>
              <signature>system_hook_info()</signature>
              <docrelurl>system_hook_info/7</docrelurl>
            </item>
            <item name= "system_image_toolkits">
              <description>Implements hook_image_toolkits().</description>
              <signature>system_image_toolkits()</signature>
              <docrelurl>system_image_toolkits/7</docrelurl>
            </item>
            <item name= "system_image_toolkit_settings">
              <description>Form builder; Configure site image toolkit usage.</description>
              <signature>system_image_toolkit_settings()</signature>
              <docrelurl>system_image_toolkit_settings/7</docrelurl>
            </item>
            <item name= "system_init">
              <description>Implements hook_init().</description>
              <signature>system_init()</signature>
              <docrelurl>system_init/7</docrelurl>
            </item>
            <item name= "system_install">
              <description>Implements hook_install().</description>
              <signature>system_install()</signature>
              <docrelurl>system_install/7</docrelurl>
            </item>
            <item name= "system_ip_blocking">
              <description>Menu callback. Display blocked IP addresses.</description>
              <signature>system_ip_blocking($default_ip = '')</signature>
              <docrelurl>system_ip_blocking/7</docrelurl>
            </item>
            <item name= "system_ip_blocking_delete">
              <description>IP deletion confirm page.</description>
              <signature>system_ip_blocking_delete($form, &amp;$form_state, $iid)</signature>
              <docrelurl>system_ip_blocking_delete/7</docrelurl>
            </item>
            <item name= "system_ip_blocking_delete_submit">
              <description>Process system_ip_blocking_delete form submissions.</description>
              <signature>system_ip_blocking_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_ip_blocking_delete_submit/7</docrelurl>
            </item>
            <item name= "system_ip_blocking_form">
              <description>Define the form for blocking IP addresses.</description>
              <signature>system_ip_blocking_form($form, $form_state, $default_ip)</signature>
              <docrelurl>system_ip_blocking_form/7</docrelurl>
            </item>
            <item name= "system_ip_blocking_form_submit">
              <description>Code modules/system/system.admin.inc, line 1457</description>
              <signature>system_ip_blocking_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_ip_blocking_form_submit/7</docrelurl>
            </item>
            <item name= "system_ip_blocking_form_validate">
              <description>Code modules/system/system.admin.inc, line 1444</description>
              <signature>system_ip_blocking_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_ip_blocking_form_validate/7</docrelurl>
            </item>
            <item name= "system_library">
              <description>Implements hook_library().</description>
              <signature>system_library()</signature>
              <docrelurl>system_library/7</docrelurl>
            </item>
            <item name= "system_list">
              <description>Build a list of bootstrap modules and enabled modules and themes.</description>
              <signature>system_list($type)</signature>
              <docrelurl>system_list/7</docrelurl>
            </item>
            <item name= "system_list_reset">
              <description>Reset all system_list() caches.</description>
              <signature>system_list_reset()</signature>
              <docrelurl>system_list_reset/7</docrelurl>
            </item>
            <item name= "system_logging_settings">
              <description>Form builder; Configure error reporting settings.</description>
              <signature>system_logging_settings()</signature>
              <docrelurl>system_logging_settings/7</docrelurl>
            </item>
            <item name= "system_mail">
              <description>Implements hook_mail().</description>
              <signature>system_mail($key, &amp;$message, $params)</signature>
              <docrelurl>system_mail/7</docrelurl>
            </item>
            <item name= "system_main_admin_page">
              <description>Menu callback; Provide the administration overview page.</description>
              <signature>system_main_admin_page($arg = NULL)</signature>
              <docrelurl>system_main_admin_page/7</docrelurl>
            </item>
            <item name= "system_menu">
              <description>Implements hook_menu().</description>
              <signature>system_menu()</signature>
              <docrelurl>system_menu/7</docrelurl>
            </item>
            <item name= "system_message_action">
              <description>Sends a message to the current user's screen.</description>
              <signature>system_message_action(&amp;$entity, $context = array())</signature>
              <docrelurl>system_message_action/7</docrelurl>
            </item>
            <item name= "system_message_action_form">
              <description>Code modules/system/system.module, line 3023</description>
              <signature>system_message_action_form($context)</signature>
              <docrelurl>system_message_action_form/7</docrelurl>
            </item>
            <item name= "system_message_action_submit">
              <description>Code modules/system/system.module, line 3035</description>
              <signature>system_message_action_submit($form, $form_state)</signature>
              <docrelurl>system_message_action_submit/7</docrelurl>
            </item>
            <item name= "system_modules">
              <description>Menu callback; provides module enable/disable interface. The list of modules gets populated by module.info files, which contain each module's name, description, and information about which modules it requires. See drupal_parse_info_file() for information on module.info descriptors.</description>
              <signature>system_modules($form, $form_state = array())</signature>
              <docrelurl>system_modules/7</docrelurl>
            </item>
            <item name= "system_modules_confirm_form">
              <description>Display confirmation form for required modules.</description>
              <signature>system_modules_confirm_form($modules, $storage)</signature>
              <docrelurl>system_modules_confirm_form/7</docrelurl>
            </item>
            <item name= "system_modules_submit">
              <description>Submit callback; handles modules form submission.</description>
              <signature>system_modules_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_modules_submit/7</docrelurl>
            </item>
            <item name= "system_modules_uninstall">
              <description>Builds a form of currently disabled modules.</description>
              <signature>system_modules_uninstall($form, $form_state = NULL)</signature>
              <docrelurl>system_modules_uninstall/7</docrelurl>
            </item>
            <item name= "system_modules_uninstall_confirm_form">
              <description>Confirm uninstall of selected modules.</description>
              <signature>system_modules_uninstall_confirm_form($storage)</signature>
              <docrelurl>system_modules_uninstall_confirm_form/7</docrelurl>
            </item>
            <item name= "system_modules_uninstall_submit">
              <description>Processes the submitted uninstall form.</description>
              <signature>system_modules_uninstall_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_modules_uninstall_submit/7</docrelurl>
            </item>
            <item name= "system_modules_uninstall_validate">
              <description>Validates the submitted uninstall form.</description>
              <signature>system_modules_uninstall_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_modules_uninstall_validate/7</docrelurl>
            </item>
            <item name= "system_page_alter">
              <description>Implements hook_page_alter().</description>
              <signature>system_page_alter(&amp;$page)</signature>
              <docrelurl>system_page_alter/7</docrelurl>
            </item>
            <item name= "system_performance_settings">
              <description>Form builder; Configure site performance settings.</description>
              <signature>system_performance_settings()</signature>
              <docrelurl>system_performance_settings/7</docrelurl>
            </item>
            <item name= "system_permission">
              <description>Implements hook_permission().</description>
              <signature>system_permission()</signature>
              <docrelurl>system_permission/7</docrelurl>
            </item>
            <item name= "system_php">
              <description>Menu callback: return information about PHP.</description>
              <signature>system_php()</signature>
              <docrelurl>system_php/7</docrelurl>
            </item>
            <item name= "system_rebuild_module_data">
              <description>Rebuild, save, and return data about all currently available modules.</description>
              <signature>system_rebuild_module_data()</signature>
              <docrelurl>system_rebuild_module_data/7</docrelurl>
            </item>
            <item name= "system_rebuild_theme_data">
              <description>Rebuild, save, and return data about all currently available themes.</description>
              <signature>system_rebuild_theme_data()</signature>
              <docrelurl>system_rebuild_theme_data/7</docrelurl>
            </item>
            <item name= "system_regional_settings">
              <description>Form builder; Configure the site regional settings.</description>
              <signature>system_regional_settings()</signature>
              <docrelurl>system_regional_settings/7</docrelurl>
            </item>
            <item name= "system_region_list">
              <description>Get a list of available regions from a specified theme.</description>
              <signature>system_region_list($theme_key, $show = REGIONS_ALL)</signature>
              <docrelurl>system_region_list/7</docrelurl>
            </item>
            <item name= "system_requirements">
              <description>Test and report Drupal installation requirements.</description>
              <signature>system_requirements($phase)</signature>
              <docrelurl>system_requirements/7</docrelurl>
            </item>
            <item name= "system_retrieve_file">
              <description>Attempts to get a file using drupal_http_request and to store it locally.</description>
              <signature>system_retrieve_file($url, $destination = NULL, $managed = FALSE, $replace = FILE_EXISTS_RENAME)</signature>
              <docrelurl>system_retrieve_file/7</docrelurl>
            </item>
            <item name= "system_rss_feeds_settings">
              <description>Form builder; Configure how the site handles RSS feeds.</description>
              <signature>system_rss_feeds_settings()</signature>
              <docrelurl>system_rss_feeds_settings/7</docrelurl>
            </item>
            <item name= "system_run_automated_cron">
              <description>Run the automated cron if enabled.</description>
              <signature>system_run_automated_cron()</signature>
              <docrelurl>system_run_automated_cron/7</docrelurl>
            </item>
            <item name= "system_run_cron">
              <description>Menu callback: run cron manually.</description>
              <signature>system_run_cron()</signature>
              <docrelurl>system_run_cron/7</docrelurl>
            </item>
            <item name= "system_schema">
              <description>Implements hook_schema().</description>
              <signature>system_schema()</signature>
              <docrelurl>system_schema/7</docrelurl>
            </item>
            <item name= "system_send_email_action">
              <description>Sends an e-mail message.</description>
              <signature>system_send_email_action($entity, $context)</signature>
              <docrelurl>system_send_email_action/7</docrelurl>
            </item>
            <item name= "system_send_email_action_form">
              <description>Return a form definition so the Send email action can be configured.</description>
              <signature>system_send_email_action_form($context)</signature>
              <docrelurl>system_send_email_action_form/7</docrelurl>
            </item>
            <item name= "system_send_email_action_submit">
              <description>Process system_send_email_action form submissions.</description>
              <signature>system_send_email_action_submit($form, $form_state)</signature>
              <docrelurl>system_send_email_action_submit/7</docrelurl>
            </item>
            <item name= "system_send_email_action_validate">
              <description>Validate system_send_email_action form submissions.</description>
              <signature>system_send_email_action_validate($form, $form_state)</signature>
              <docrelurl>system_send_email_action_validate/7</docrelurl>
            </item>
            <item name= "system_settings_form">
              <description>Add default buttons to a form and set its prefix.</description>
              <signature>system_settings_form($form, $automatic_defaults = TRUE)</signature>
              <docrelurl>system_settings_form/7</docrelurl>
            </item>
            <item name= "system_settings_form_submit">
              <description>Execute the system_settings_form. If you want node type configure style handling of your checkboxes, add an array_filter value to your form.</description>
              <signature>system_settings_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_settings_form_submit/7</docrelurl>
            </item>
            <item name= "system_settings_overview">
              <description>Menu callback; displays a module's settings page.</description>
              <signature>system_settings_overview()</signature>
              <docrelurl>system_settings_overview/7</docrelurl>
            </item>
            <item name= "system_site_information_settings">
              <description>Form builder; The general site information form.</description>
              <signature>system_site_information_settings()</signature>
              <docrelurl>system_site_information_settings/7</docrelurl>
            </item>
            <item name= "system_site_information_settings_validate">
              <description>Validate the submitted site-information form.</description>
              <signature>system_site_information_settings_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_site_information_settings_validate/7</docrelurl>
            </item>
            <item name= "system_site_maintenance_mode">
              <description>Form builder; Configure the site's maintenance status.</description>
              <signature>system_site_maintenance_mode()</signature>
              <docrelurl>system_site_maintenance_mode/7</docrelurl>
            </item>
            <item name= "system_sort_modules_by_info_name">
              <description>Array sorting callback; sorts modules or themes by their name.</description>
              <signature>system_sort_modules_by_info_name($a, $b)</signature>
              <docrelurl>system_sort_modules_by_info_name/7</docrelurl>
            </item>
            <item name= "system_sort_themes">
              <description>Array sorting callback; sorts modules or themes by their name.</description>
              <signature>system_sort_themes($a, $b)</signature>
              <docrelurl>system_sort_themes/7</docrelurl>
            </item>
            <item name= "system_status">
              <description>Menu callback: displays the site status report. Can also be used as a pure check.</description>
              <signature>system_status($check = FALSE)</signature>
              <docrelurl>system_status/7</docrelurl>
            </item>
            <item name= "system_stream_wrappers">
              <description>Implements hook_stream_wrappers().</description>
              <signature>system_stream_wrappers()</signature>
              <docrelurl>system_stream_wrappers/7</docrelurl>
            </item>
            <item name= "system_system_info_alter">
              <description>Implements hook_system_info_alter().</description>
              <signature>system_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>system_system_info_alter/7</docrelurl>
            </item>
            <item name= "system_test_basic_auth_page">
              <description>Code modules/simpletest/tests/system_test.module, line 104</description>
              <signature>system_test_basic_auth_page()</signature>
              <docrelurl>system_test_basic_auth_page/7</docrelurl>
            </item>
            <item name= "system_test_boot">
              <description>Implements hook_boot().</description>
              <signature>system_test_boot()</signature>
              <docrelurl>system_test_boot/7</docrelurl>
            </item>
            <item name= "system_test_exit">
              <description>Implements hook_exit().</description>
              <signature>system_test_exit()</signature>
              <docrelurl>system_test_exit/7</docrelurl>
            </item>
            <item name= "system_test_init">
              <description>Implements hook_init().</description>
              <signature>system_test_init()</signature>
              <docrelurl>system_test_init/7</docrelurl>
            </item>
            <item name= "system_test_lock_acquire">
              <description>Try to acquire a named lock and report the outcome.</description>
              <signature>system_test_lock_acquire()</signature>
              <docrelurl>system_test_lock_acquire/7</docrelurl>
            </item>
            <item name= "system_test_lock_exit">
              <description>Try to acquire a specific lock, and then exit.</description>
              <signature>system_test_lock_exit()</signature>
              <docrelurl>system_test_lock_exit/7</docrelurl>
            </item>
            <item name= "system_test_main_content_fallback">
              <description>Menu callback to test main content fallback().</description>
              <signature>system_test_main_content_fallback()</signature>
              <docrelurl>system_test_main_content_fallback/7</docrelurl>
            </item>
            <item name= "system_test_menu">
              <description>Implements hook_menu().</description>
              <signature>system_test_menu()</signature>
              <docrelurl>system_test_menu/7</docrelurl>
            </item>
            <item name= "system_test_modules_disabled">
              <description>Implements hook_modules_disabled().</description>
              <signature>system_test_modules_disabled($modules)</signature>
              <docrelurl>system_test_modules_disabled/7</docrelurl>
            </item>
            <item name= "system_test_modules_enabled">
              <description>Implements hook_modules_enabled().</description>
              <signature>system_test_modules_enabled($modules)</signature>
              <docrelurl>system_test_modules_enabled/7</docrelurl>
            </item>
            <item name= "system_test_modules_installed">
              <description>Implements hook_modules_installed().</description>
              <signature>system_test_modules_installed($modules)</signature>
              <docrelurl>system_test_modules_installed/7</docrelurl>
            </item>
            <item name= "system_test_modules_uninstalled">
              <description>Implements hook_modules_uninstalled().</description>
              <signature>system_test_modules_uninstalled($modules)</signature>
              <docrelurl>system_test_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "system_test_page_build">
              <description>Implements hook_page_build().</description>
              <signature>system_test_page_build(&amp;$page)</signature>
              <docrelurl>system_test_page_build/7</docrelurl>
            </item>
            <item name= "system_test_page_shutdown_functions">
              <description>A simple page callback which adds a register shutdown function.</description>
              <signature>system_test_page_shutdown_functions($arg1, $arg2)</signature>
              <docrelurl>system_test_page_shutdown_functions/7</docrelurl>
            </item>
            <item name= "system_test_redirect">
              <description>Code modules/simpletest/tests/system_test.module, line 110</description>
              <signature>system_test_redirect($code)</signature>
              <docrelurl>system_test_redirect/7</docrelurl>
            </item>
            <item name= "system_test_redirect_invalid_scheme">
              <description>Code modules/simpletest/tests/system_test.module, line 135</description>
              <signature>system_test_redirect_invalid_scheme()</signature>
              <docrelurl>system_test_redirect_invalid_scheme/7</docrelurl>
            </item>
            <item name= "system_test_redirect_noparse">
              <description>Code modules/simpletest/tests/system_test.module, line 130</description>
              <signature>system_test_redirect_noparse()</signature>
              <docrelurl>system_test_redirect_noparse/7</docrelurl>
            </item>
            <item name= "system_test_redirect_noscheme">
              <description>Code modules/simpletest/tests/system_test.module, line 125</description>
              <signature>system_test_redirect_noscheme()</signature>
              <docrelurl>system_test_redirect_noscheme/7</docrelurl>
            </item>
            <item name= "system_test_set_header">
              <description>Code modules/simpletest/tests/system_test.module, line 120</description>
              <signature>system_test_set_header()</signature>
              <docrelurl>system_test_set_header/7</docrelurl>
            </item>
            <item name= "system_test_sleep">
              <description>Code modules/simpletest/tests/system_test.module, line 100</description>
              <signature>system_test_sleep($seconds)</signature>
              <docrelurl>system_test_sleep/7</docrelurl>
            </item>
            <item name= "system_test_system_info_alter">
              <description>Implements hook_system_info_alter().</description>
              <signature>system_test_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>system_test_system_info_alter/7</docrelurl>
            </item>
            <item name= "system_theme">
              <description>Implements hook_theme().</description>
              <signature>system_theme()</signature>
              <docrelurl>system_theme/7</docrelurl>
            </item>
            <item name= "system_themes_admin_form">
              <description>Form to select the administration theme.</description>
              <signature>system_themes_admin_form($form, &amp;$form_state, $theme_options)</signature>
              <docrelurl>system_themes_admin_form/7</docrelurl>
            </item>
            <item name= "system_themes_admin_form_submit">
              <description>Process system_themes_admin_form form submissions.</description>
              <signature>system_themes_admin_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_themes_admin_form_submit/7</docrelurl>
            </item>
            <item name= "system_themes_page">
              <description>Menu callback; displays a listing of all themes.</description>
              <signature>system_themes_page()</signature>
              <docrelurl>system_themes_page/7</docrelurl>
            </item>
            <item name= "system_theme_default">
              <description>Menu callback; Set the default theme.</description>
              <signature>system_theme_default()</signature>
              <docrelurl>system_theme_default/7</docrelurl>
            </item>
            <item name= "system_theme_disable">
              <description>Menu callback; Disables a theme.</description>
              <signature>system_theme_disable()</signature>
              <docrelurl>system_theme_disable/7</docrelurl>
            </item>
            <item name= "system_theme_enable">
              <description>Menu callback; Enables a theme.</description>
              <signature>system_theme_enable()</signature>
              <docrelurl>system_theme_enable/7</docrelurl>
            </item>
            <item name= "system_theme_settings">
              <description>Form builder; display theme configuration for entire site and individual themes.</description>
              <signature>system_theme_settings($form, &amp;$form_state, $key = '')</signature>
              <docrelurl>system_theme_settings/7</docrelurl>
            </item>
            <item name= "system_theme_settings_submit">
              <description>Process system_theme_settings form submissions.</description>
              <signature>system_theme_settings_submit($form, &amp;$form_state)</signature>
              <docrelurl>system_theme_settings_submit/7</docrelurl>
            </item>
            <item name= "system_theme_settings_validate">
              <description>Validator for the system_theme_settings() form.</description>
              <signature>system_theme_settings_validate($form, &amp;$form_state)</signature>
              <docrelurl>system_theme_settings_validate/7</docrelurl>
            </item>
            <item name= "system_timezone">
              <description>Menu callback; Retrieve a JSON object containing a suggested time zone name.</description>
              <signature>system_timezone($abbreviation = '', $offset = -1, $is_daylight_saving_time = NULL)</signature>
              <docrelurl>system_timezone/7</docrelurl>
            </item>
            <item name= "system_time_zones">
              <description>Generate an array of time zones and their local time&amp;date.</description>
              <signature>system_time_zones($blank = NULL)</signature>
              <docrelurl>system_time_zones/7</docrelurl>
            </item>
            <item name= "system_tokens">
              <description>Implements hook_tokens().</description>
              <signature>system_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>system_tokens/7</docrelurl>
            </item>
            <item name= "system_token_info">
              <description>Implements hook_token_info().</description>
              <signature>system_token_info()</signature>
              <docrelurl>system_token_info/7</docrelurl>
            </item>
            <item name= "system_updater_info">
              <description>Implements hook_updater_info().</description>
              <signature>system_updater_info()</signature>
              <docrelurl>system_updater_info/7</docrelurl>
            </item>
            <item name= "system_update_7000">
              <description>Rename blog and forum permissions to be consistent with other content types.</description>
              <signature>system_update_7000()</signature>
              <docrelurl>system_update_7000/7</docrelurl>
            </item>
            <item name= "system_update_7001">
              <description>Generate a cron key and save it in the variables table.</description>
              <signature>system_update_7001()</signature>
              <docrelurl>system_update_7001/7</docrelurl>
            </item>
            <item name= "system_update_7002">
              <description>Add a table to store blocked IP addresses.</description>
              <signature>system_update_7002()</signature>
              <docrelurl>system_update_7002/7</docrelurl>
            </item>
            <item name= "system_update_7003">
              <description>Update {blocked_ips} with valid IP addresses from {access}.</description>
              <signature>system_update_7003()</signature>
              <docrelurl>system_update_7003/7</docrelurl>
            </item>
            <item name= "system_update_7004">
              <description>Remove hardcoded numeric deltas from all blocks in core.</description>
              <signature>system_update_7004(&amp;$sandbox)</signature>
              <docrelurl>system_update_7004/7</docrelurl>
            </item>
            <item name= "system_update_7005">
              <description>Remove throttle columns and variables.</description>
              <signature>system_update_7005()</signature>
              <docrelurl>system_update_7005/7</docrelurl>
            </item>
            <item name= "system_update_7006">
              <description>Registry tables and drop the file key of the menu router, since it is no longer needed.</description>
              <signature>system_update_7006()</signature>
              <docrelurl>system_update_7006/7</docrelurl>
            </item>
            <item name= "system_update_7007">
              <description>Convert to new method of storing permissions. This update is in system.install rather than user.install so that all modules can use the updated permission scheme during their updates.</description>
              <signature>system_update_7007()</signature>
              <docrelurl>system_update_7007/7</docrelurl>
            </item>
            <item name= "system_update_7008">
              <description>Use the poll_choice primary key to record votes in poll_votes rather than the choice order. Rename chorder to weight.</description>
              <signature>system_update_7008()</signature>
              <docrelurl>system_update_7008/7</docrelurl>
            </item>
            <item name= "system_update_7009">
              <description>Rename the variables for primary and secondary links.</description>
              <signature>system_update_7009()</signature>
              <docrelurl>system_update_7009/7</docrelurl>
            </item>
            <item name= "system_update_7010">
              <description>Moved to system_update_6048().</description>
              <signature>system_update_7010()</signature>
              <docrelurl>system_update_7010/7</docrelurl>
            </item>
            <item name= "system_update_7011">
              <description>Split the 'bypass node access' permission from 'administer nodes'.</description>
              <signature>system_update_7011()</signature>
              <docrelurl>system_update_7011/7</docrelurl>
            </item>
            <item name= "system_update_7013">
              <description>Convert default time zone offset to default time zone name.</description>
              <signature>system_update_7013()</signature>
              <docrelurl>system_update_7013/7</docrelurl>
            </item>
            <item name= "system_update_7014">
              <description>Drop the bootstrap column from the {system} table. This was reverted.</description>
              <signature>system_update_7014()</signature>
              <docrelurl>system_update_7014/7</docrelurl>
            </item>
            <item name= "system_update_7015">
              <description>Change the user logout path.</description>
              <signature>system_update_7015()</signature>
              <docrelurl>system_update_7015/7</docrelurl>
            </item>
            <item name= "system_update_7016">
              <description>Remove custom datatype *_unsigned in PostgreSQL.</description>
              <signature>system_update_7016()</signature>
              <docrelurl>system_update_7016/7</docrelurl>
            </item>
            <item name= "system_update_7017">
              <description>Change the theme setting 'toggle_node_info' into a per content type variable.</description>
              <signature>system_update_7017()</signature>
              <docrelurl>system_update_7017/7</docrelurl>
            </item>
            <item name= "system_update_7018">
              <description>Shorten the {system}.type column and modify indexes.</description>
              <signature>system_update_7018()</signature>
              <docrelurl>system_update_7018/7</docrelurl>
            </item>
            <item name= "system_update_7020">
              <description>Enable field module.</description>
              <signature>system_update_7020()</signature>
              <docrelurl>system_update_7020/7</docrelurl>
            </item>
            <item name= "system_update_7021">
              <description>Change the PHP for settings permission.</description>
              <signature>system_update_7021()</signature>
              <docrelurl>system_update_7021/7</docrelurl>
            </item>
            <item name= "system_update_7024">
              <description>Add the substr_index() function to PostgreSQL. Note: this should go into the driver itself, but we have no support for driver-specific updates yet.</description>
              <signature>system_update_7024()</signature>
              <docrelurl>system_update_7024/7</docrelurl>
            </item>
            <item name= "system_update_7027">
              <description>Enable field type modules.</description>
              <signature>system_update_7027()</signature>
              <docrelurl>system_update_7027/7</docrelurl>
            </item>
            <item name= "system_update_7029">
              <description>Add new 'view own unpublished content' permission for authenticated users. Preserves legacy behavior from Drupal 6.x.</description>
              <signature>system_update_7029()</signature>
              <docrelurl>system_update_7029/7</docrelurl>
            </item>
            <item name= "system_update_7030">
              <description>Moved to comment_update_7011().</description>
              <signature>system_update_7030()</signature>
              <docrelurl>system_update_7030/7</docrelurl>
            </item>
            <item name= "system_update_7031">
              <description>Removed in favour of Drupal 6 backport.</description>
              <signature>system_update_7031()</signature>
              <docrelurl>system_update_7031/7</docrelurl>
            </item>
            <item name= "system_update_7032">
              <description>Alter field hostname to identifier in the {flood} table. </description>
              <signature>system_update_7032()</signature>
              <docrelurl>system_update_7032/7</docrelurl>
            </item>
            <item name= "system_update_7033">
              <description>Move CACHE_AGGRESSIVE to CACHE_NORMAL.</description>
              <signature>system_update_7033()</signature>
              <docrelurl>system_update_7033/7</docrelurl>
            </item>
            <item name= "system_update_7034">
              <description>Migrate the file_downloads setting and create the new {file_managed} table.</description>
              <signature>system_update_7034()</signature>
              <docrelurl>system_update_7034/7</docrelurl>
            </item>
            <item name= "system_update_7035">
              <description>Migrate upload module files to the new {file_managed} table.</description>
              <signature>system_update_7035()</signature>
              <docrelurl>system_update_7035/7</docrelurl>
            </item>
            <item name= "system_update_7036">
              <description>Split the 'access site in maintenance mode' permission from 'administer site configuration'.</description>
              <signature>system_update_7036()</signature>
              <docrelurl>system_update_7036/7</docrelurl>
            </item>
            <item name= "system_update_7037">
              <description>Rename action description to label.</description>
              <signature>system_update_7037()</signature>
              <docrelurl>system_update_7037/7</docrelurl>
            </item>
            <item name= "system_update_7039">
              <description>Adds fields to the {menu_router} table to allow custom themes to be set per page.</description>
              <signature>system_update_7039()</signature>
              <docrelurl>system_update_7039/7</docrelurl>
            </item>
            <item name= "system_update_7040">
              <description>Create new date format tables.</description>
              <signature>system_update_7040()</signature>
              <docrelurl>system_update_7040/7</docrelurl>
            </item>
            <item name= "system_update_7041">
              <description>Adds 'delivery_callback' field to the {menu_router} table to allow a custom function to be used for final page rendering and sending to browser.</description>
              <signature>system_update_7041()</signature>
              <docrelurl>system_update_7041/7</docrelurl>
            </item>
            <item name= "system_update_7042">
              <description>Upgrade the {url_alias} table and create a cache bin for path aliases.</description>
              <signature>system_update_7042()</signature>
              <docrelurl>system_update_7042/7</docrelurl>
            </item>
            <item name= "system_update_7043">
              <description>Add a 'context' field to {menu_router} to control contextual placement of local tasks.</description>
              <signature>system_update_7043()</signature>
              <docrelurl>system_update_7043/7</docrelurl>
            </item>
            <item name= "system_update_7044">
              <description>Drop the actions_aid table.</description>
              <signature>system_update_7044()</signature>
              <docrelurl>system_update_7044/7</docrelurl>
            </item>
            <item name= "system_update_7045">
              <description>Add expiration field to the {flood} table.</description>
              <signature>system_update_7045()</signature>
              <docrelurl>system_update_7045/7</docrelurl>
            </item>
            <item name= "system_update_7046">
              <description>Switch from the Minnelli theme if it is the default or admin theme.</description>
              <signature>system_update_7046()</signature>
              <docrelurl>system_update_7046/7</docrelurl>
            </item>
            <item name= "system_update_7047">
              <description>Normalize the front page path variable.</description>
              <signature>system_update_7047()</signature>
              <docrelurl>system_update_7047/7</docrelurl>
            </item>
            <item name= "system_update_7048">
              <description>Convert path languages from the empty string to LANGUAGE_NONE.</description>
              <signature>system_update_7048()</signature>
              <docrelurl>system_update_7048/7</docrelurl>
            </item>
            <item name= "system_update_7049">
              <description>Rename 'Default' profile to 'Standard.'</description>
              <signature>system_update_7049()</signature>
              <docrelurl>system_update_7049/7</docrelurl>
            </item>
            <item name= "system_update_7050">
              <description>Change {batch}.id column from serial to regular int.</description>
              <signature>system_update_7050()</signature>
              <docrelurl>system_update_7050/7</docrelurl>
            </item>
            <item name= "system_update_7051">
              <description>make the IP field IPv6 compatible</description>
              <signature>system_update_7051()</signature>
              <docrelurl>system_update_7051/7</docrelurl>
            </item>
            <item name= "system_update_7052">
              <description>Rename file to include_file in {menu_router} table.</description>
              <signature>system_update_7052()</signature>
              <docrelurl>system_update_7052/7</docrelurl>
            </item>
            <item name= "system_update_7053">
              <description>Upgrade standard blocks and menus.</description>
              <signature>system_update_7053()</signature>
              <docrelurl>system_update_7053/7</docrelurl>
            </item>
            <item name= "system_update_7054">
              <description>Remove {cache_*}.headers columns.</description>
              <signature>system_update_7054()</signature>
              <docrelurl>system_update_7054/7</docrelurl>
            </item>
            <item name= "system_update_files_database">
              <description>Updates the records in the system table based on the files array.</description>
              <signature>system_update_files_database(&amp;$files, $type)</signature>
              <docrelurl>system_update_files_database/7</docrelurl>
            </item>
            <item name= "system_update_last_removed">
              <description>Code modules/system/system.install, line 1584</description>
              <signature>system_update_last_removed()</signature>
              <docrelurl>system_update_last_removed/7</docrelurl>
            </item>
            <item name= "system_user_login">
              <description>Implements hook_user_login().</description>
              <signature>system_user_login(&amp;$edit, $account)</signature>
              <docrelurl>system_user_login/7</docrelurl>
            </item>
            <item name= "system_user_timezone">
              <description>Add the time zone field to the user edit and register forms.</description>
              <signature>system_user_timezone(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>system_user_timezone/7</docrelurl>
            </item>
            <item name= "t">
              <description>Translates a string to the current language or to a given language. All human-readable text that will be displayed on the site or sent to a user should be passed through the t() function. This ensures that sites can be fully translated into other languages.</description>
              <signature>t($string, array $args = array(), array $options = array())</signature>
              <docrelurl>t/7</docrelurl>
            </item>
            <item name= "tablesort_cell">
              <description>Format a table cell. Adds a class attribute to all cells in the currently active column.</description>
              <signature>tablesort_cell($cell, $header, $ts, $i)</signature>
              <docrelurl>tablesort_cell/7</docrelurl>
            </item>
            <item name= "tablesort_get_order">
              <description>Determine the current sort criterion.</description>
              <signature>tablesort_get_order($headers)</signature>
              <docrelurl>tablesort_get_order/7</docrelurl>
            </item>
            <item name= "tablesort_get_query_parameters">
              <description>Compose a URL query parameter array for table sorting links.</description>
              <signature>tablesort_get_query_parameters()</signature>
              <docrelurl>tablesort_get_query_parameters/7</docrelurl>
            </item>
            <item name= "tablesort_get_sort">
              <description>Determine the current sort direction.</description>
              <signature>tablesort_get_sort($headers)</signature>
              <docrelurl>tablesort_get_sort/7</docrelurl>
            </item>
            <item name= "tablesort_header">
              <description>Format a column header. If the cell in question is the column header for the current sort criterion, it gets special formatting. All possible sort criteria become links.</description>
              <signature>tablesort_header($cell, $header, $ts)</signature>
              <docrelurl>tablesort_header/7</docrelurl>
            </item>
            <item name= "tablesort_init">
              <description>Initialize the table sort context.</description>
              <signature>tablesort_init($header)</signature>
              <docrelurl>tablesort_init/7</docrelurl>
            </item>
            <item name= "taxonomy_admin_vocabulary_title_callback">
              <description>Return the vocabulary name given the vocabulary object.</description>
              <signature>taxonomy_admin_vocabulary_title_callback($vocabulary)</signature>
              <docrelurl>taxonomy_admin_vocabulary_title_callback/7</docrelurl>
            </item>
            <item name= "taxonomy_allowed_values">
              <description>Returns the set of valid terms for a taxonomy field.</description>
              <signature>taxonomy_allowed_values($field)</signature>
              <docrelurl>taxonomy_allowed_values/7</docrelurl>
            </item>
            <item name= "taxonomy_autocomplete">
              <description>Helper function for autocompletion</description>
              <signature>taxonomy_autocomplete($field_name, $tags_typed = '')</signature>
              <docrelurl>taxonomy_autocomplete/7</docrelurl>
            </item>
            <item name= "taxonomy_autocomplete_validate">
              <description>Form element validate handler for taxonomy term autocomplete element.</description>
              <signature>taxonomy_autocomplete_validate($element, &amp;$form_state)</signature>
              <docrelurl>taxonomy_autocomplete_validate/7</docrelurl>
            </item>
            <item name= "taxonomy_check_vocabulary_hierarchy">
              <description>Dynamically check and update the hierarchy flag of a vocabulary. Checks the current parents of all terms in a vocabulary and updates the vocabularies hierarchy setting to the lowest possible level. A hierarchy with no parents in any of its terms will be given a hierarchy of 0. If terms contain at most a single parent, the vocabulary will be given a hierarchy of 1. If any term contain multiple parents, the vocabulary will be given a hierarchy of 2.</description>
              <signature>taxonomy_check_vocabulary_hierarchy($vocabulary, $changed_term)</signature>
              <docrelurl>taxonomy_check_vocabulary_hierarchy/7</docrelurl>
            </item>
            <item name= "taxonomy_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>taxonomy_entity_info()</signature>
              <docrelurl>taxonomy_entity_info/7</docrelurl>
            </item>
            <item name= "taxonomy_field_extra_fields">
              <description>Implements hook_field_extra_fields().</description>
              <signature>taxonomy_field_extra_fields()</signature>
              <docrelurl>taxonomy_field_extra_fields/7</docrelurl>
            </item>
            <item name= "taxonomy_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>taxonomy_field_formatter_info()</signature>
              <docrelurl>taxonomy_field_formatter_info/7</docrelurl>
            </item>
            <item name= "taxonomy_field_formatter_prepare_view">
              <description>Implements hook_field_formatter_prepare_view(). This preloads all taxonomy terms for multiple loaded objects at once and unsets values for invalid terms that do not exist.</description>
              <signature>taxonomy_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &amp;$items, $displays)</signature>
              <docrelurl>taxonomy_field_formatter_prepare_view/7</docrelurl>
            </item>
            <item name= "taxonomy_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>taxonomy_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>taxonomy_field_formatter_view/7</docrelurl>
            </item>
            <item name= "taxonomy_field_info">
              <description>Implements hook_field_info(). Field settings:</description>
              <signature>taxonomy_field_info()</signature>
              <docrelurl>taxonomy_field_info/7</docrelurl>
            </item>
            <item name= "taxonomy_field_insert">
              <description>Implements hook_field_insert().</description>
              <signature>taxonomy_field_insert($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>taxonomy_field_insert/7</docrelurl>
            </item>
            <item name= "taxonomy_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>taxonomy_field_is_empty($item, $field)</signature>
              <docrelurl>taxonomy_field_is_empty/7</docrelurl>
            </item>
            <item name= "taxonomy_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>taxonomy_field_schema($field)</signature>
              <docrelurl>taxonomy_field_schema/7</docrelurl>
            </item>
            <item name= "taxonomy_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>taxonomy_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>taxonomy_field_settings_form/7</docrelurl>
            </item>
            <item name= "taxonomy_field_update">
              <description>Implements hook_field_update().</description>
              <signature>taxonomy_field_update($entity_type, $entity, $field, $instance, $langcode, &amp;$items)</signature>
              <docrelurl>taxonomy_field_update/7</docrelurl>
            </item>
            <item name= "taxonomy_field_validate">
              <description>Implements hook_field_validate(). Taxonomy field settings allow for either a single vocabulary ID, multiple vocabulary IDs, or sub-trees of a vocabulary to be specified as allowed values, although only the first of these is supported via the field UI. Confirm that terms entered as values meet at least one of these conditions.</description>
              <signature>taxonomy_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>taxonomy_field_validate/7</docrelurl>
            </item>
            <item name= "taxonomy_field_widget_error">
              <description>Implements hook_field_widget_error().</description>
              <signature>taxonomy_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_field_widget_error/7</docrelurl>
            </item>
            <item name= "taxonomy_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>taxonomy_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $element)</signature>
              <docrelurl>taxonomy_field_widget_form/7</docrelurl>
            </item>
            <item name= "taxonomy_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>taxonomy_field_widget_info()</signature>
              <docrelurl>taxonomy_field_widget_info/7</docrelurl>
            </item>
            <item name= "taxonomy_field_widget_info_alter">
              <description>Implements hook_field_widget_info_alter().</description>
              <signature>taxonomy_field_widget_info_alter(&amp;$info)</signature>
              <docrelurl>taxonomy_field_widget_info_alter/7</docrelurl>
            </item>
            <item name= "taxonomy_form_term">
              <description>Form function for the term edit form.</description>
              <signature>taxonomy_form_term($form, &amp;$form_state, $edit = array(), $vocabulary = NULL)</signature>
              <docrelurl>taxonomy_form_term/7</docrelurl>
            </item>
            <item name= "taxonomy_form_term_submit">
              <description>Submit handler to insert or update a term.</description>
              <signature>taxonomy_form_term_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_form_term_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_form_term_submit_builder">
              <description>Updates the form state's term entity by processing this submission's values.</description>
              <signature>taxonomy_form_term_submit_builder($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_form_term_submit_builder/7</docrelurl>
            </item>
            <item name= "taxonomy_form_term_validate">
              <description>Validation handler for the term form.</description>
              <signature>taxonomy_form_term_validate($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_form_term_validate/7</docrelurl>
            </item>
            <item name= "taxonomy_form_vocabulary">
              <description>Display form for adding and editing vocabularies.</description>
              <signature>taxonomy_form_vocabulary($form, &amp;$form_state, $edit = array())</signature>
              <docrelurl>taxonomy_form_vocabulary/7</docrelurl>
            </item>
            <item name= "taxonomy_form_vocabulary_submit">
              <description>Accept the form submission for a vocabulary and save the results.</description>
              <signature>taxonomy_form_vocabulary_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_form_vocabulary_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_form_vocabulary_validate">
              <description>Validation handler for the vocabulary form.</description>
              <signature>taxonomy_form_vocabulary_validate($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_form_vocabulary_validate/7</docrelurl>
            </item>
            <item name= "taxonomy_get_children">
              <description>Find all children of a term ID.</description>
              <signature>taxonomy_get_children($tid, $vid = 0, $key = 'tid')</signature>
              <docrelurl>taxonomy_get_children/7</docrelurl>
            </item>
            <item name= "taxonomy_get_parents">
              <description>Find all parents of a given term ID.</description>
              <signature>taxonomy_get_parents($tid, $key = 'tid')</signature>
              <docrelurl>taxonomy_get_parents/7</docrelurl>
            </item>
            <item name= "taxonomy_get_parents_all">
              <description>Find all ancestors of a given term ID.</description>
              <signature>taxonomy_get_parents_all($tid)</signature>
              <docrelurl>taxonomy_get_parents_all/7</docrelurl>
            </item>
            <item name= "taxonomy_get_term_by_name">
              <description>Try to map a string to an existing term, as for glossary use. Provides a case-insensitive and trimmed mapping, to maximize the likelihood of a successful match.</description>
              <signature>taxonomy_get_term_by_name($name)</signature>
              <docrelurl>taxonomy_get_term_by_name/7</docrelurl>
            </item>
            <item name= "taxonomy_get_tree">
              <description>Create a hierarchical representation of a vocabulary.</description>
              <signature>taxonomy_get_tree($vid, $parent = 0, $max_depth = NULL, $depth = -1)</signature>
              <docrelurl>taxonomy_get_tree/7</docrelurl>
            </item>
            <item name= "taxonomy_get_vocabularies">
              <description>Return an array of all vocabulary objects.</description>
              <signature>taxonomy_get_vocabularies()</signature>
              <docrelurl>taxonomy_get_vocabularies/7</docrelurl>
            </item>
            <item name= "taxonomy_help">
              <description>Implements hook_help().</description>
              <signature>taxonomy_help($path, $arg)</signature>
              <docrelurl>taxonomy_help/7</docrelurl>
            </item>
            <item name= "taxonomy_implode_tags">
              <description>Implodes a list of tags of a certain vocabulary into a string.</description>
              <signature>taxonomy_implode_tags($tags, $vid = NULL)</signature>
              <docrelurl>taxonomy_implode_tags/7</docrelurl>
            </item>
            <item name= "taxonomy_menu">
              <description>Implements hook_menu().</description>
              <signature>taxonomy_menu()</signature>
              <docrelurl>taxonomy_menu/7</docrelurl>
            </item>
            <item name= "taxonomy_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>taxonomy_node_delete($node)</signature>
              <docrelurl>taxonomy_node_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_options_list">
              <description>Implements hook_options_list().</description>
              <signature>taxonomy_options_list($field)</signature>
              <docrelurl>taxonomy_options_list/7</docrelurl>
            </item>
            <item name= "taxonomy_overview_terms">
              <description>Form builder for the taxonomy terms overview. Display a tree of all the terms in a vocabulary, with options to edit each one. The form is made drag and drop by the theme function.</description>
              <signature>taxonomy_overview_terms($form, &amp;$form_state, $vocabulary)</signature>
              <docrelurl>taxonomy_overview_terms/7</docrelurl>
            </item>
            <item name= "taxonomy_overview_terms_submit">
              <description>Submit handler for terms overview form. Rather than using a textfield or weight field, this form depends entirely upon the order of form elements on the page to determine new weights.</description>
              <signature>taxonomy_overview_terms_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_overview_terms_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_overview_vocabularies">
              <description>Form builder to list and manage vocabularies.</description>
              <signature>taxonomy_overview_vocabularies($form)</signature>
              <docrelurl>taxonomy_overview_vocabularies/7</docrelurl>
            </item>
            <item name= "taxonomy_overview_vocabularies_submit">
              <description>Submit handler for vocabularies overview. Updates changed vocabulary weights.</description>
              <signature>taxonomy_overview_vocabularies_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_overview_vocabularies_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_permission">
              <description>Implements hook_permission().</description>
              <signature>taxonomy_permission()</signature>
              <docrelurl>taxonomy_permission/7</docrelurl>
            </item>
            <item name= "taxonomy_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>taxonomy_rdf_mapping()</signature>
              <docrelurl>taxonomy_rdf_mapping/7</docrelurl>
            </item>
            <item name= "taxonomy_schema">
              <description>Implements hook_schema().</description>
              <signature>taxonomy_schema()</signature>
              <docrelurl>taxonomy_schema/7</docrelurl>
            </item>
            <item name= "taxonomy_select_nodes">
              <description>Return nodes attached to a term across all field instances. This function requires taxonomy module to be maintaining its own tables, and will return an empty array if it is not. If using other field storage methods alternatives methods for listing terms will need to be used.</description>
              <signature>taxonomy_select_nodes($tid, $pager = TRUE, $limit = FALSE, $order = array('t.sticky' => 'DESC', 't.created' => 'DESC'))</signature>
              <docrelurl>taxonomy_select_nodes/7</docrelurl>
            </item>
            <item name= "taxonomy_taxonomy_term_delete">
              <description>Implements hook_taxonomy_term_delete().</description>
              <signature>taxonomy_taxonomy_term_delete($term)</signature>
              <docrelurl>taxonomy_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_terms_static_reset">
              <description>Clear all static cache variables for terms..</description>
              <signature>taxonomy_terms_static_reset()</signature>
              <docrelurl>taxonomy_terms_static_reset/7</docrelurl>
            </item>
            <item name= "taxonomy_term_confirm_delete">
              <description>Form builder for the term delete form.</description>
              <signature>taxonomy_term_confirm_delete($form, &amp;$form_state, $tid)</signature>
              <docrelurl>taxonomy_term_confirm_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_term_confirm_delete_submit">
              <description>Submit handler to delete a term after confirmation.</description>
              <signature>taxonomy_term_confirm_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_term_confirm_delete_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_term_confirm_parents">
              <description>Form builder for the confirmation of multiple term parents.</description>
              <signature>taxonomy_term_confirm_parents($form, &amp;$form_state, $vocabulary)</signature>
              <docrelurl>taxonomy_term_confirm_parents/7</docrelurl>
            </item>
            <item name= "taxonomy_term_delete">
              <description>Delete a term.</description>
              <signature>taxonomy_term_delete($tid)</signature>
              <docrelurl>taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_term_edit_access">
              <description>Return edit access for a given term.</description>
              <signature>taxonomy_term_edit_access($term)</signature>
              <docrelurl>taxonomy_term_edit_access/7</docrelurl>
            </item>
            <item name= "taxonomy_term_feed">
              <description>Generate the content feed for a taxonomy term.</description>
              <signature>taxonomy_term_feed($term)</signature>
              <docrelurl>taxonomy_term_feed/7</docrelurl>
            </item>
            <item name= "taxonomy_term_is_page">
              <description>Returns whether the current page is the page of the passed in term.</description>
              <signature>taxonomy_term_is_page($term)</signature>
              <docrelurl>taxonomy_term_is_page/7</docrelurl>
            </item>
            <item name= "taxonomy_term_load">
              <description>Return the term object matching a term ID.</description>
              <signature>taxonomy_term_load($tid)</signature>
              <docrelurl>taxonomy_term_load/7</docrelurl>
            </item>
            <item name= "taxonomy_term_load_multiple">
              <description>Load multiple taxonomy terms based on certain conditions. This function should be used whenever you need to load more than one term from the database. Terms are loaded into memory and will not require database access if loaded again during the same page request.</description>
              <signature>taxonomy_term_load_multiple($tids = array(), $conditions = array())</signature>
              <docrelurl>taxonomy_term_load_multiple/7</docrelurl>
            </item>
            <item name= "taxonomy_term_page">
              <description>Menu callback; displays all nodes associated with a term.</description>
              <signature>taxonomy_term_page($term)</signature>
              <docrelurl>taxonomy_term_page/7</docrelurl>
            </item>
            <item name= "taxonomy_term_save">
              <description>Save a term object to the database.</description>
              <signature>taxonomy_term_save($term)</signature>
              <docrelurl>taxonomy_term_save/7</docrelurl>
            </item>
            <item name= "taxonomy_term_title">
              <description>Title callback for term pages.</description>
              <signature>taxonomy_term_title($term)</signature>
              <docrelurl>taxonomy_term_title/7</docrelurl>
            </item>
            <item name= "taxonomy_term_uri">
              <description>Entity uri callback.</description>
              <signature>taxonomy_term_uri($term)</signature>
              <docrelurl>taxonomy_term_uri/7</docrelurl>
            </item>
            <item name= "taxonomy_term_view">
              <description>Generate an array for rendering the given term.</description>
              <signature>taxonomy_term_view($term, $view_mode = 'full')</signature>
              <docrelurl>taxonomy_term_view/7</docrelurl>
            </item>
            <item name= "taxonomy_test_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>taxonomy_test_form_alter(&amp;$form, $form_state, $form_id)</signature>
              <docrelurl>taxonomy_test_form_alter/7</docrelurl>
            </item>
            <item name= "taxonomy_test_get_antonym">
              <description>Return the antonym of the given term ID.</description>
              <signature>taxonomy_test_get_antonym($tid)</signature>
              <docrelurl>taxonomy_test_get_antonym/7</docrelurl>
            </item>
            <item name= "taxonomy_test_schema">
              <description>Implements hook_schema().</description>
              <signature>taxonomy_test_schema()</signature>
              <docrelurl>taxonomy_test_schema/7</docrelurl>
            </item>
            <item name= "taxonomy_test_taxonomy_term_delete">
              <description>Implements hook_taxonomy_term_delete().</description>
              <signature>taxonomy_test_taxonomy_term_delete($term)</signature>
              <docrelurl>taxonomy_test_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_test_taxonomy_term_insert">
              <description>Implements hook_taxonomy_term_insert().</description>
              <signature>taxonomy_test_taxonomy_term_insert($term)</signature>
              <docrelurl>taxonomy_test_taxonomy_term_insert/7</docrelurl>
            </item>
            <item name= "taxonomy_test_taxonomy_term_load">
              <description>Implements hook_taxonomy_term_load().</description>
              <signature>taxonomy_test_taxonomy_term_load($terms)</signature>
              <docrelurl>taxonomy_test_taxonomy_term_load/7</docrelurl>
            </item>
            <item name= "taxonomy_test_taxonomy_term_update">
              <description>Implements hook_taxonomy_term_update().</description>
              <signature>taxonomy_test_taxonomy_term_update($term)</signature>
              <docrelurl>taxonomy_test_taxonomy_term_update/7</docrelurl>
            </item>
            <item name= "taxonomy_theme">
              <description>Implements hook_theme().</description>
              <signature>taxonomy_theme()</signature>
              <docrelurl>taxonomy_theme/7</docrelurl>
            </item>
            <item name= "taxonomy_tokens">
              <description>Implements hook_tokens().</description>
              <signature>taxonomy_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>taxonomy_tokens/7</docrelurl>
            </item>
            <item name= "taxonomy_token_info">
              <description>Implements hook_token_info().</description>
              <signature>taxonomy_token_info()</signature>
              <docrelurl>taxonomy_token_info/7</docrelurl>
            </item>
            <item name= "taxonomy_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>taxonomy_uninstall()</signature>
              <docrelurl>taxonomy_uninstall/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7001">
              <description>Rename taxonomy tables.</description>
              <signature>taxonomy_update_7001()</signature>
              <docrelurl>taxonomy_update_7001/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7002">
              <description>Add {vocabulary}.machine_name column.</description>
              <signature>taxonomy_update_7002()</signature>
              <docrelurl>taxonomy_update_7002/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7003">
              <description>Remove the related terms setting from vocabularies. This setting has not been used since Drupal 6. The {taxonomy_relations} table itself is retained to allow for data to be upgraded.</description>
              <signature>taxonomy_update_7003()</signature>
              <docrelurl>taxonomy_update_7003/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7004">
              <description>Move taxonomy vocabulary associations for nodes to fields and field instances.</description>
              <signature>taxonomy_update_7004()</signature>
              <docrelurl>taxonomy_update_7004/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7005">
              <description>Migrate {taxonomy_term_node} table to field storage.</description>
              <signature>taxonomy_update_7005(&amp;$sandbox)</signature>
              <docrelurl>taxonomy_update_7005/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7006">
              <description>Add {taxonomy_term_data}.format column.</description>
              <signature>taxonomy_update_7006()</signature>
              <docrelurl>taxonomy_update_7006/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7007">
              <description>Add index on {taxonomy_term_data}.name column to speed up taxonomy_get_term_by_name().</description>
              <signature>taxonomy_update_7007()</signature>
              <docrelurl>taxonomy_update_7007/7</docrelurl>
            </item>
            <item name= "taxonomy_update_7008">
              <description>Change the weight columns to normal int.</description>
              <signature>taxonomy_update_7008()</signature>
              <docrelurl>taxonomy_update_7008/7</docrelurl>
            </item>
            <item name= "taxonomy_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>taxonomy_update_dependencies()</signature>
              <docrelurl>taxonomy_update_dependencies/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_confirm_delete">
              <description>Form builder for the vocabulary delete confirmation form.</description>
              <signature>taxonomy_vocabulary_confirm_delete($form, &amp;$form_state, $vid)</signature>
              <docrelurl>taxonomy_vocabulary_confirm_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_confirm_delete_submit">
              <description>Submit handler to delete a vocabulary after confirmation.</description>
              <signature>taxonomy_vocabulary_confirm_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_vocabulary_confirm_delete_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_confirm_reset_alphabetical">
              <description>Form builder to confirm resetting a vocabulary to alphabetical order.</description>
              <signature>taxonomy_vocabulary_confirm_reset_alphabetical($form, &amp;$form_state, $vid)</signature>
              <docrelurl>taxonomy_vocabulary_confirm_reset_alphabetical/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_confirm_reset_alphabetical_submit">
              <description>Submit handler to reset a vocabulary to alphabetical order after confirmation.</description>
              <signature>taxonomy_vocabulary_confirm_reset_alphabetical_submit($form, &amp;$form_state)</signature>
              <docrelurl>taxonomy_vocabulary_confirm_reset_alphabetical_submit/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_delete">
              <description>Delete a vocabulary.</description>
              <signature>taxonomy_vocabulary_delete($vid)</signature>
              <docrelurl>taxonomy_vocabulary_delete/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_get_names">
              <description>Get names for all taxonomy vocabularies.</description>
              <signature>taxonomy_vocabulary_get_names()</signature>
              <docrelurl>taxonomy_vocabulary_get_names/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_load">
              <description>Return the vocabulary object matching a vocabulary ID.</description>
              <signature>taxonomy_vocabulary_load($vid)</signature>
              <docrelurl>taxonomy_vocabulary_load/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_load_multiple">
              <description>Load multiple taxonomy vocabularies based on certain conditions. This function should be used whenever you need to load more than one vocabulary from the database. Terms are loaded into memory and will not require database access if loaded again during the same page request.</description>
              <signature>taxonomy_vocabulary_load_multiple($vids = array(), $conditions = array())</signature>
              <docrelurl>taxonomy_vocabulary_load_multiple/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_machine_name_load">
              <description>Return the vocabulary object matching a vocabulary machine name.</description>
              <signature>taxonomy_vocabulary_machine_name_load($name)</signature>
              <docrelurl>taxonomy_vocabulary_machine_name_load/7</docrelurl>
            </item>
            <item name= "taxonomy_vocabulary_save">
              <description>Save a vocabulary given a vocabulary object.</description>
              <signature>taxonomy_vocabulary_save($vocabulary)</signature>
              <docrelurl>taxonomy_vocabulary_save/7</docrelurl>
            </item>
            <item name= "template_preprocess">
              <description>Adds a default set of helper variables for variable processors and templates. This comes in before any other preprocess function which makes it possible to be used in default theme implementations (non-overridden theme functions).</description>
              <signature>template_preprocess(&amp;$variables, $hook)</signature>
              <docrelurl>template_preprocess/7</docrelurl>
            </item>
            <item name= "template_preprocess_aggregator_feed_source">
              <description>Process variables for aggregator-feed-source.tpl.php.</description>
              <signature>template_preprocess_aggregator_feed_source(&amp;$variables)</signature>
              <docrelurl>template_preprocess_aggregator_feed_source/7</docrelurl>
            </item>
            <item name= "template_preprocess_aggregator_item">
              <description>Process variables for aggregator-item.tpl.php.</description>
              <signature>template_preprocess_aggregator_item(&amp;$variables)</signature>
              <docrelurl>template_preprocess_aggregator_item/7</docrelurl>
            </item>
            <item name= "template_preprocess_aggregator_summary_item">
              <description>Process variables for aggregator-summary-item.tpl.php.</description>
              <signature>template_preprocess_aggregator_summary_item(&amp;$variables)</signature>
              <docrelurl>template_preprocess_aggregator_summary_item/7</docrelurl>
            </item>
            <item name= "template_preprocess_aggregator_summary_items">
              <description>Process variables for aggregator-summary-items.tpl.php.</description>
              <signature>template_preprocess_aggregator_summary_items(&amp;$variables)</signature>
              <docrelurl>template_preprocess_aggregator_summary_items/7</docrelurl>
            </item>
            <item name= "template_preprocess_aggregator_wrapper">
              <description>Process variables for aggregator-wrapper.tpl.php.</description>
              <signature>template_preprocess_aggregator_wrapper(&amp;$variables)</signature>
              <docrelurl>template_preprocess_aggregator_wrapper/7</docrelurl>
            </item>
            <item name= "template_preprocess_block">
              <description>Process variables for block.tpl.php Prepare the values passed to the theme_block function to be passed into a pluggable template engine. Uses block properties to generate a series of template file suggestions. If none are found, the default block.tpl.php is used.</description>
              <signature>template_preprocess_block(&amp;$variables)</signature>
              <docrelurl>template_preprocess_block/7</docrelurl>
            </item>
            <item name= "template_preprocess_block_admin_display_form">
              <description>Process variables for block-admin-display.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_block_admin_display_form(&amp;$variables)</signature>
              <docrelurl>template_preprocess_block_admin_display_form/7</docrelurl>
            </item>
            <item name= "template_preprocess_book_all_books_block">
              <description>Process variables for book-all-books-block.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_book_all_books_block(&amp;$variables)</signature>
              <docrelurl>template_preprocess_book_all_books_block/7</docrelurl>
            </item>
            <item name= "template_preprocess_book_export_html">
              <description>Process variables for book-export-html.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_book_export_html(&amp;$variables)</signature>
              <docrelurl>template_preprocess_book_export_html/7</docrelurl>
            </item>
            <item name= "template_preprocess_book_navigation">
              <description>Process variables for book-navigation.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_book_navigation(&amp;$variables)</signature>
              <docrelurl>template_preprocess_book_navigation/7</docrelurl>
            </item>
            <item name= "template_preprocess_book_node_export_html">
              <description>Process variables for book-node-export-html.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_book_node_export_html(&amp;$variables)</signature>
              <docrelurl>template_preprocess_book_node_export_html/7</docrelurl>
            </item>
            <item name= "template_preprocess_comment">
              <description>Process variables for comment.tpl.php.</description>
              <signature>template_preprocess_comment(&amp;$variables)</signature>
              <docrelurl>template_preprocess_comment/7</docrelurl>
            </item>
            <item name= "template_preprocess_comment_wrapper">
              <description>Process variables for comment-wrapper.tpl.php.</description>
              <signature>template_preprocess_comment_wrapper(&amp;$variables)</signature>
              <docrelurl>template_preprocess_comment_wrapper/7</docrelurl>
            </item>
            <item name= "template_preprocess_field">
              <description>Theme preprocess function for theme_field() and field.tpl.php.</description>
              <signature>template_preprocess_field(&amp;$variables, $hook)</signature>
              <docrelurl>template_preprocess_field/7</docrelurl>
            </item>
            <item name= "template_preprocess_field_ui_display_overview_table">
              <description>Theme preprocess function for field_ui-display-overview-table.tpl.php.</description>
              <signature>template_preprocess_field_ui_display_overview_table(&amp;$vars)</signature>
              <docrelurl>template_preprocess_field_ui_display_overview_table/7</docrelurl>
            </item>
            <item name= "template_preprocess_field_ui_field_overview_form">
              <description>Theme preprocess function for field_ui-field-overview-form.tpl.php.</description>
              <signature>template_preprocess_field_ui_field_overview_form(&amp;$vars)</signature>
              <docrelurl>template_preprocess_field_ui_field_overview_form/7</docrelurl>
            </item>
            <item name= "template_preprocess_forums">
              <description>Process variables for forums.tpl.php The $variables array contains the following arguments:</description>
              <signature>template_preprocess_forums(&amp;$variables)</signature>
              <docrelurl>template_preprocess_forums/7</docrelurl>
            </item>
            <item name= "template_preprocess_forum_icon">
              <description>Process variables to format the icon for each individual topic. $variables contains the following data:</description>
              <signature>template_preprocess_forum_icon(&amp;$variables)</signature>
              <docrelurl>template_preprocess_forum_icon/7</docrelurl>
            </item>
            <item name= "template_preprocess_forum_list">
              <description>Process variables to format a forum listing. $variables contains the following information:</description>
              <signature>template_preprocess_forum_list(&amp;$variables)</signature>
              <docrelurl>template_preprocess_forum_list/7</docrelurl>
            </item>
            <item name= "template_preprocess_forum_submitted">
              <description>Process variables to format submission info for display in the forum list and topic list. $variables will contain: $topic</description>
              <signature>template_preprocess_forum_submitted(&amp;$variables)</signature>
              <docrelurl>template_preprocess_forum_submitted/7</docrelurl>
            </item>
            <item name= "template_preprocess_forum_topic_list">
              <description>Preprocess variables to format the topic listing. $variables contains the following data:</description>
              <signature>template_preprocess_forum_topic_list(&amp;$variables)</signature>
              <docrelurl>template_preprocess_forum_topic_list/7</docrelurl>
            </item>
            <item name= "template_preprocess_html">
              <description>Preprocess variables for html.tpl.php</description>
              <signature>template_preprocess_html(&amp;$variables)</signature>
              <docrelurl>template_preprocess_html/7</docrelurl>
            </item>
            <item name= "template_preprocess_maintenance_page">
              <description>The variables array generated here is a mirror of template_preprocess_page(). This preprocessor will run its course when theme_maintenance_page() is invoked. An alternate template file of "maintenance-page--offline.tpl.php" can be used when the database is offline to hide errors and completely replace the content.</description>
              <signature>template_preprocess_maintenance_page(&amp;$variables)</signature>
              <docrelurl>template_preprocess_maintenance_page/7</docrelurl>
            </item>
            <item name= "template_preprocess_menu_tree">
              <description>Preprocesses the rendered tree for theme_menu_tree().</description>
              <signature>template_preprocess_menu_tree(&amp;$variables)</signature>
              <docrelurl>template_preprocess_menu_tree/7</docrelurl>
            </item>
            <item name= "template_preprocess_node">
              <description>Process variables for node.tpl.php Most themes utilize their own copy of node.tpl.php. The default is located inside "modules/node/node.tpl.php". Look in there for the full list of variables.</description>
              <signature>template_preprocess_node(&amp;$variables)</signature>
              <docrelurl>template_preprocess_node/7</docrelurl>
            </item>
            <item name= "template_preprocess_overlay">
              <description>Preprocesses template variables for overlay.tpl.php</description>
              <signature>template_preprocess_overlay(&amp;$variables)</signature>
              <docrelurl>template_preprocess_overlay/7</docrelurl>
            </item>
            <item name= "template_preprocess_page">
              <description>Preprocess variables for page.tpl.php Most themes utilize their own copy of page.tpl.php. The default is located inside "modules/system/page.tpl.php". Look in there for the full list of variables.</description>
              <signature>template_preprocess_page(&amp;$variables)</signature>
              <docrelurl>template_preprocess_page/7</docrelurl>
            </item>
            <item name= "template_preprocess_poll_bar">
              <description>Preprocess the poll_bar theme hook. Inputs: $title, $votes, $total_votes, $voted, $block</description>
              <signature>template_preprocess_poll_bar(&amp;$variables)</signature>
              <docrelurl>template_preprocess_poll_bar/7</docrelurl>
            </item>
            <item name= "template_preprocess_poll_results">
              <description>Preprocess the poll_results theme hook. Inputs: $raw_title, $results, $votes, $raw_links, $block, $nid, $vote. The $raw_* inputs to this are naturally unsafe; often safe versions are made to simply overwrite the raw version, but in this case it seems likely that the title and the links may be overridden by the theme layer, so they are left in with a different name for that purpose.</description>
              <signature>template_preprocess_poll_results(&amp;$variables)</signature>
              <docrelurl>template_preprocess_poll_results/7</docrelurl>
            </item>
            <item name= "template_preprocess_poll_vote">
              <description>Themes the voting form for a poll. Inputs: $form</description>
              <signature>template_preprocess_poll_vote(&amp;$variables)</signature>
              <docrelurl>template_preprocess_poll_vote/7</docrelurl>
            </item>
            <item name= "template_preprocess_profile_block">
              <description>Process variables for profile-block.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_profile_block(&amp;$variables)</signature>
              <docrelurl>template_preprocess_profile_block/7</docrelurl>
            </item>
            <item name= "template_preprocess_profile_listing">
              <description>Process variables for profile-listing.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_profile_listing(&amp;$variables)</signature>
              <docrelurl>template_preprocess_profile_listing/7</docrelurl>
            </item>
            <item name= "template_preprocess_profile_wrapper">
              <description>Process variables for profile-wrapper.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_profile_wrapper(&amp;$variables)</signature>
              <docrelurl>template_preprocess_profile_wrapper/7</docrelurl>
            </item>
            <item name= "template_preprocess_region">
              <description>Preprocess variables for region.tpl.php Prepare the values passed to the theme_region function to be passed into a pluggable template engine. Uses the region name to generate a template file suggestions. If none are found, the default region.tpl.php is used.</description>
              <signature>template_preprocess_region(&amp;$variables)</signature>
              <docrelurl>template_preprocess_region/7</docrelurl>
            </item>
            <item name= "template_preprocess_search_block_form">
              <description>Process variables for search-block-form.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_search_block_form(&amp;$variables)</signature>
              <docrelurl>template_preprocess_search_block_form/7</docrelurl>
            </item>
            <item name= "template_preprocess_search_result">
              <description>Process variables for search-result.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_search_result(&amp;$variables)</signature>
              <docrelurl>template_preprocess_search_result/7</docrelurl>
            </item>
            <item name= "template_preprocess_search_results">
              <description>Process variables for search-results.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_search_results(&amp;$variables)</signature>
              <docrelurl>template_preprocess_search_results/7</docrelurl>
            </item>
            <item name= "template_preprocess_taxonomy_term">
              <description>Process variables for taxonomy-term.tpl.php.</description>
              <signature>template_preprocess_taxonomy_term(&amp;$variables)</signature>
              <docrelurl>template_preprocess_taxonomy_term/7</docrelurl>
            </item>
            <item name= "template_preprocess_username">
              <description>Preprocesses variables for theme_username(). Modules that make any changes to variables like 'name' or 'extra' must insure that the final string is safe to include directly in the output by using check_plain() or filter_xss().</description>
              <signature>template_preprocess_username(&amp;$variables)</signature>
              <docrelurl>template_preprocess_username/7</docrelurl>
            </item>
            <item name= "template_preprocess_user_picture">
              <description>Process variables for user-picture.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_user_picture(&amp;$variables)</signature>
              <docrelurl>template_preprocess_user_picture/7</docrelurl>
            </item>
            <item name= "template_preprocess_user_profile">
              <description>Process variables for user-profile.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_user_profile(&amp;$variables)</signature>
              <docrelurl>template_preprocess_user_profile/7</docrelurl>
            </item>
            <item name= "template_preprocess_user_profile_category">
              <description>Process variables for user-profile-category.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_user_profile_category(&amp;$variables)</signature>
              <docrelurl>template_preprocess_user_profile_category/7</docrelurl>
            </item>
            <item name= "template_preprocess_user_profile_item">
              <description>Process variables for user-profile-item.tpl.php. The $variables array contains the following arguments:</description>
              <signature>template_preprocess_user_profile_item(&amp;$variables)</signature>
              <docrelurl>template_preprocess_user_profile_item/7</docrelurl>
            </item>
            <item name= "template_process">
              <description>A default process function used to alter variables as late as possible.</description>
              <signature>template_process(&amp;$variables, $hook)</signature>
              <docrelurl>template_process/7</docrelurl>
            </item>
            <item name= "template_process_field">
              <description>Theme process function for theme_field() and field.tpl.php.</description>
              <signature>template_process_field(&amp;$variables, $hook)</signature>
              <docrelurl>template_process_field/7</docrelurl>
            </item>
            <item name= "template_process_html">
              <description>Process variables for html.tpl.php Perform final addition and modification of variables before passing into the template. To customize these variables, call drupal_render() on elements in $variables['page'] during THEME_preprocess_page().</description>
              <signature>template_process_html(&amp;$variables)</signature>
              <docrelurl>template_process_html/7</docrelurl>
            </item>
            <item name= "template_process_maintenance_page">
              <description>The variables array generated here is a mirror of template_process_html(). This processor will run its course when theme_maintenance_page() is invoked.</description>
              <signature>template_process_maintenance_page(&amp;$variables)</signature>
              <docrelurl>template_process_maintenance_page/7</docrelurl>
            </item>
            <item name= "template_process_overlay">
              <description>Processes variables for overlay.tpl.php</description>
              <signature>template_process_overlay(&amp;$variables)</signature>
              <docrelurl>template_process_overlay/7</docrelurl>
            </item>
            <item name= "template_process_username">
              <description>Processes variables for theme_username().</description>
              <signature>template_process_username(&amp;$variables)</signature>
              <docrelurl>template_process_username/7</docrelurl>
            </item>
            <item name= "test_theme_breadcrumb__suggestion">
              <description>Tests a theme overriding a suggestion of a base theme hook.</description>
              <signature>test_theme_breadcrumb__suggestion($variables)</signature>
              <docrelurl>test_theme_breadcrumb__suggestion/7</docrelurl>
            </item>
            <item name= "text_field_formatter_info">
              <description>Implements hook_field_formatter_info().</description>
              <signature>text_field_formatter_info()</signature>
              <docrelurl>text_field_formatter_info/7</docrelurl>
            </item>
            <item name= "text_field_formatter_view">
              <description>Implements hook_field_formatter_view().</description>
              <signature>text_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display)</signature>
              <docrelurl>text_field_formatter_view/7</docrelurl>
            </item>
            <item name= "text_field_info">
              <description>Implements hook_field_info(). Field settings:</description>
              <signature>text_field_info()</signature>
              <docrelurl>text_field_info/7</docrelurl>
            </item>
            <item name= "text_field_instance_settings_form">
              <description>Implements hook_field_instance_settings_form().</description>
              <signature>text_field_instance_settings_form($field, $instance)</signature>
              <docrelurl>text_field_instance_settings_form/7</docrelurl>
            </item>
            <item name= "text_field_is_empty">
              <description>Implements hook_field_is_empty().</description>
              <signature>text_field_is_empty($item, $field)</signature>
              <docrelurl>text_field_is_empty/7</docrelurl>
            </item>
            <item name= "text_field_load">
              <description>Implements hook_field_load(). Where possible, generate the sanitized version of each field early so that it is cached in the field cache. This avoids looking up from the filter cache separately.</description>
              <signature>text_field_load($entity_type, $entities, $field, $instances, $langcode, &amp;$items)</signature>
              <docrelurl>text_field_load/7</docrelurl>
            </item>
            <item name= "text_field_prepare_translation">
              <description>Implements hook_field_prepare_translation().</description>
              <signature>text_field_prepare_translation($entity_type, $entity, $field, $instance, $langcode, &amp;$items, $source_entity, $source_langcode)</signature>
              <docrelurl>text_field_prepare_translation/7</docrelurl>
            </item>
            <item name= "text_field_schema">
              <description>Implements hook_field_schema().</description>
              <signature>text_field_schema($field)</signature>
              <docrelurl>text_field_schema/7</docrelurl>
            </item>
            <item name= "text_field_settings_form">
              <description>Implements hook_field_settings_form().</description>
              <signature>text_field_settings_form($field, $instance, $has_data)</signature>
              <docrelurl>text_field_settings_form/7</docrelurl>
            </item>
            <item name= "text_field_validate">
              <description>Implements hook_field_validate(). Possible error codes:</description>
              <signature>text_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &amp;$errors)</signature>
              <docrelurl>text_field_validate/7</docrelurl>
            </item>
            <item name= "text_field_widget_error">
              <description>Implements hook_field_widget_error().</description>
              <signature>text_field_widget_error($element, $error, $form, &amp;$form_state)</signature>
              <docrelurl>text_field_widget_error/7</docrelurl>
            </item>
            <item name= "text_field_widget_form">
              <description>Implements hook_field_widget_form().</description>
              <signature>text_field_widget_form(&amp;$form, &amp;$form_state, $field, $instance, $langcode, $items, $delta, $base)</signature>
              <docrelurl>text_field_widget_form/7</docrelurl>
            </item>
            <item name= "text_field_widget_info">
              <description>Implements hook_field_widget_info().</description>
              <signature>text_field_widget_info()</signature>
              <docrelurl>text_field_widget_info/7</docrelurl>
            </item>
            <item name= "text_field_widget_settings_form">
              <description>Implements hook_field_widget_settings_form().</description>
              <signature>text_field_widget_settings_form($field, $instance)</signature>
              <docrelurl>text_field_widget_settings_form/7</docrelurl>
            </item>
            <item name= "text_help">
              <description>Implements hook_help().</description>
              <signature>text_help($path, $arg)</signature>
              <docrelurl>text_help/7</docrelurl>
            </item>
            <item name= "text_summary">
              <description>
                Generate a trimmed, formatted version of a text field value. If the end of the summary is not indicated using the <!--break--> delimiter then we generate the summary automatically, trying to end it at a sensible place such as the end of a paragraph, a line break, or the end of a sentence (in that order of preference).
              </description>
              <signature>text_summary($text, $format = NULL, $size = NULL)</signature>
              <docrelurl>text_summary/7</docrelurl>
            </item>
            <item name= "theme">
              <description>Generates themed output. All requests for themed output must go through this function. It examines the request and routes it to the appropriate theme function or template, by checking the theme registry.</description>
              <signature>theme($hook, $variables = array())</signature>
              <docrelurl>theme/7</docrelurl>
            </item>
            <item name= "theme_admin_block">
              <description>Returns HTML for an administrative block for display.</description>
              <signature>theme_admin_block($variables)</signature>
              <docrelurl>theme_admin_block/7</docrelurl>
            </item>
            <item name= "theme_admin_block_content">
              <description>Returns HTML for the content of an administrative block.</description>
              <signature>theme_admin_block_content($variables)</signature>
              <docrelurl>theme_admin_block_content/7</docrelurl>
            </item>
            <item name= "theme_admin_page">
              <description>Returns HTML for an administrative page.</description>
              <signature>theme_admin_page($variables)</signature>
              <docrelurl>theme_admin_page/7</docrelurl>
            </item>
            <item name= "theme_aggregator_block_item">
              <description>Returns HTML for an individual feed item for display in the block.</description>
              <signature>theme_aggregator_block_item($variables)</signature>
              <docrelurl>theme_aggregator_block_item/7</docrelurl>
            </item>
            <item name= "theme_aggregator_categorize_items">
              <description>Returns HTML for the aggregator page list form for assigning categories.</description>
              <signature>theme_aggregator_categorize_items($variables)</signature>
              <docrelurl>theme_aggregator_categorize_items/7</docrelurl>
            </item>
            <item name= "theme_aggregator_feed_source">
              <description>Implemented using the aggregator-feed-source.tpl.php template.</description>
              <signature>theme_aggregator_feed_source($variables)</signature>
              <docrelurl>theme_aggregator_feed_source/7</docrelurl>
            </item>
            <item name= "theme_aggregator_item">
              <description>Implemented using the aggregator-item.tpl.php template.</description>
              <signature>theme_aggregator_item($variables)</signature>
              <docrelurl>theme_aggregator_item/7</docrelurl>
            </item>
            <item name= "theme_aggregator_page_opml">
              <description>Prints the OPML page for a feed.</description>
              <signature>theme_aggregator_page_opml($variables)</signature>
              <docrelurl>theme_aggregator_page_opml/7</docrelurl>
            </item>
            <item name= "theme_aggregator_page_rss">
              <description>Prints the RSS page for a feed.</description>
              <signature>theme_aggregator_page_rss($variables)</signature>
              <docrelurl>theme_aggregator_page_rss/7</docrelurl>
            </item>
            <item name= "theme_aggregator_summary_item">
              <description>Implemented using the aggregator-summary-item.tpl.php template.</description>
              <signature>theme_aggregator_summary_item($variables)</signature>
              <docrelurl>theme_aggregator_summary_item/7</docrelurl>
            </item>
            <item name= "theme_aggregator_summary_items">
              <description>Implemented using the aggregator-summary-items.tpl.php template.</description>
              <signature>theme_aggregator_summary_items($variables)</signature>
              <docrelurl>theme_aggregator_summary_items/7</docrelurl>
            </item>
            <item name= "theme_aggregator_wrapper">
              <description>Implemented using the aggregator-wrapper.tpl.php template.</description>
              <signature>theme_aggregator_wrapper($variables)</signature>
              <docrelurl>theme_aggregator_wrapper/7</docrelurl>
            </item>
            <item name= "theme_authorize_message">
              <description>Returns HTML for a single log message from the authorize.php batch operation.</description>
              <signature>theme_authorize_message($variables)</signature>
              <docrelurl>theme_authorize_message/7</docrelurl>
            </item>
            <item name= "theme_authorize_report">
              <description>Returns HTML for a report of the results from an operation run via authorize.php.</description>
              <signature>theme_authorize_report($variables)</signature>
              <docrelurl>theme_authorize_report/7</docrelurl>
            </item>
            <item name= "theme_block">
              <description>Implemented using the block.tpl.php template.</description>
              <signature>theme_block($variables)</signature>
              <docrelurl>theme_block/7</docrelurl>
            </item>
            <item name= "theme_block_admin_display_form">
              <description>Implemented using the block-admin-display-form.tpl.php template.</description>
              <signature>theme_block_admin_display_form($variables)</signature>
              <docrelurl>theme_block_admin_display_form/7</docrelurl>
            </item>
            <item name= "theme_book_admin_table">
              <description>Returns HTML for a book administration form.</description>
              <signature>theme_book_admin_table($variables)</signature>
              <docrelurl>theme_book_admin_table/7</docrelurl>
            </item>
            <item name= "theme_book_all_books_block">
              <description>Implemented using the book-all-books-block.tpl.php template.</description>
              <signature>theme_book_all_books_block($variables)</signature>
              <docrelurl>theme_book_all_books_block/7</docrelurl>
            </item>
            <item name= "theme_book_export_html">
              <description>Implemented using the book-export-html.tpl.php template.</description>
              <signature>theme_book_export_html($variables)</signature>
              <docrelurl>theme_book_export_html/7</docrelurl>
            </item>
            <item name= "theme_book_navigation">
              <description>Implemented using the book-navigation.tpl.php template.</description>
              <signature>theme_book_navigation($variables)</signature>
              <docrelurl>theme_book_navigation/7</docrelurl>
            </item>
            <item name= "theme_book_node_export_html">
              <description>Implemented using the book-node-export-html.tpl.php template.</description>
              <signature>theme_book_node_export_html($variables)</signature>
              <docrelurl>theme_book_node_export_html/7</docrelurl>
            </item>
            <item name= "theme_book_title_link">
              <description>Returns HTML for a link to a book title when used as a block title.</description>
              <signature>theme_book_title_link($variables)</signature>
              <docrelurl>theme_book_title_link/7</docrelurl>
            </item>
            <item name= "theme_breadcrumb">
              <description>Returns HTML for a breadcrumb trail.</description>
              <signature>theme_breadcrumb($variables)</signature>
              <docrelurl>theme_breadcrumb/7</docrelurl>
            </item>
            <item name= "theme_button">
              <description>Returns HTML for a button form element.</description>
              <signature>theme_button($variables)</signature>
              <docrelurl>theme_button/7</docrelurl>
            </item>
            <item name= "theme_checkbox">
              <description>Returns HTML for a checkbox form element.</description>
              <signature>theme_checkbox($variables)</signature>
              <docrelurl>theme_checkbox/7</docrelurl>
            </item>
            <item name= "theme_checkboxes">
              <description>Returns HTML for a set of checkbox form elements.</description>
              <signature>theme_checkboxes($variables)</signature>
              <docrelurl>theme_checkboxes/7</docrelurl>
            </item>
            <item name= "theme_color_scheme_form">
              <description>Returns HTML for a theme's color form.</description>
              <signature>theme_color_scheme_form($variables)</signature>
              <docrelurl>theme_color_scheme_form/7</docrelurl>
            </item>
            <item name= "theme_comment">
              <description>Implemented using the comment.tpl.php template.</description>
              <signature>theme_comment($variables)</signature>
              <docrelurl>theme_comment/7</docrelurl>
            </item>
            <item name= "theme_comment_block">
              <description>Returns HTML for a list of recent comments to be displayed in the comment block.</description>
              <signature>theme_comment_block()</signature>
              <docrelurl>theme_comment_block/7</docrelurl>
            </item>
            <item name= "theme_comment_post_forbidden">
              <description>Returns HTML for a "you can't post comments" notice.</description>
              <signature>theme_comment_post_forbidden($variables)</signature>
              <docrelurl>theme_comment_post_forbidden/7</docrelurl>
            </item>
            <item name= "theme_comment_wrapper">
              <description>Implemented using the comment-wrapper.tpl.php template.</description>
              <signature>theme_comment_wrapper($variables)</signature>
              <docrelurl>theme_comment_wrapper/7</docrelurl>
            </item>
            <item name= "theme_common_test_foo">
              <description>Theme function for testing drupal_render() theming.</description>
              <signature>theme_common_test_foo($variables)</signature>
              <docrelurl>theme_common_test_foo/7</docrelurl>
            </item>
            <item name= "theme_confirm_form">
              <description>Returns HTML for a confirmation form. By default this does not alter the appearance of a form at all, but is provided as a convenience for themers.</description>
              <signature>theme_confirm_form($variables)</signature>
              <docrelurl>theme_confirm_form/7</docrelurl>
            </item>
            <item name= "theme_container">
              <description>Returns HTML for a container for grouped form items.</description>
              <signature>theme_container($variables)</signature>
              <docrelurl>theme_container/7</docrelurl>
            </item>
            <item name= "theme_dashboard">
              <description>Returns HTML for the entire dashboard.</description>
              <signature>theme_dashboard($variables)</signature>
              <docrelurl>theme_dashboard/7</docrelurl>
            </item>
            <item name= "theme_dashboard_admin">
              <description>Returns HTML for the non-customizable part of the dashboard page.</description>
              <signature>theme_dashboard_admin($variables)</signature>
              <docrelurl>theme_dashboard_admin/7</docrelurl>
            </item>
            <item name= "theme_dashboard_disabled_block">
              <description>Returns HTML for a disabled block, for display in dashboard customization mode.</description>
              <signature>theme_dashboard_disabled_block($variables)</signature>
              <docrelurl>theme_dashboard_disabled_block/7</docrelurl>
            </item>
            <item name= "theme_dashboard_disabled_blocks">
              <description>Returns HTML for a set of disabled blocks, for display in dashboard customization mode.</description>
              <signature>theme_dashboard_disabled_blocks($variables)</signature>
              <docrelurl>theme_dashboard_disabled_blocks/7</docrelurl>
            </item>
            <item name= "theme_dashboard_region">
              <description>Returns HTML for a generic dashboard region.</description>
              <signature>theme_dashboard_region($variables)</signature>
              <docrelurl>theme_dashboard_region/7</docrelurl>
            </item>
            <item name= "theme_date">
              <description>Returns HTML for a date selection form element.</description>
              <signature>theme_date($variables)</signature>
              <docrelurl>theme_date/7</docrelurl>
            </item>
            <item name= "theme_dblog_message">
              <description>Returns HTML for a log message.</description>
              <signature>theme_dblog_message($variables)</signature>
              <docrelurl>theme_dblog_message/7</docrelurl>
            </item>
            <item name= "theme_disable">
              <description>Disable a given list of themes.</description>
              <signature>theme_disable($theme_list)</signature>
              <docrelurl>theme_disable/7</docrelurl>
            </item>
            <item name= "theme_enable">
              <description>Enable a given list of themes.</description>
              <signature>theme_enable($theme_list)</signature>
              <docrelurl>theme_enable/7</docrelurl>
            </item>
            <item name= "theme_feed_icon">
              <description>Returns HTML for a feed icon.</description>
              <signature>theme_feed_icon($variables)</signature>
              <docrelurl>theme_feed_icon/7</docrelurl>
            </item>
            <item name= "theme_field">
              <description>Implemented using the field.tpl.php template.</description>
              <signature>theme_field($variables)</signature>
              <docrelurl>theme_field/7</docrelurl>
            </item>
            <item name= "theme_field">
              <description>Returns HTML for a field. This is the default theme implementation to display the value of a field. Theme developers who are comfortable with overriding theme functions may do so in order to customize this markup. This function can be overridden with varying levels of specificity. For example, for a field named 'body' displayed on the 'article' content type, any of the following functions will override this default implementation. The first of these functions that exists is used:</description>
              <signature>theme_field($variables)</signature>
              <docrelurl>theme_field/7</docrelurl>
            </item>
            <item name= "theme_fieldset">
              <description>Returns HTML for a fieldset form element and its children.</description>
              <signature>theme_fieldset($variables)</signature>
              <docrelurl>theme_fieldset/7</docrelurl>
            </item>
            <item name= "theme_field_multiple_value_form">
              <description>Returns HTML for an individual form element. Combine multiple values into a table with drag-n-drop reordering. TODO : convert to a template.</description>
              <signature>theme_field_multiple_value_form($variables)</signature>
              <docrelurl>theme_field_multiple_value_form/7</docrelurl>
            </item>
            <item name= "theme_field_ui_display_overview_table">
              <description>Implemented using the field_ui-display-overview-table.tpl.php template.</description>
              <signature>theme_field_ui_display_overview_table($variables)</signature>
              <docrelurl>theme_field_ui_display_overview_table/7</docrelurl>
            </item>
            <item name= "theme_field_ui_field_overview_form">
              <description>Implemented using the field_ui-field-overview-form.tpl.php template.</description>
              <signature>theme_field_ui_field_overview_form($variables)</signature>
              <docrelurl>theme_field_ui_field_overview_form/7</docrelurl>
            </item>
            <item name= "theme_file">
              <description>Returns HTML for a file upload form element. For assistance with handling the uploaded file correctly, see the API provided by file.inc.</description>
              <signature>theme_file($variables)</signature>
              <docrelurl>theme_file/7</docrelurl>
            </item>
            <item name= "theme_file_formatter_table">
              <description>Returns HTML for a file attachments table.</description>
              <signature>theme_file_formatter_table($variables)</signature>
              <docrelurl>theme_file_formatter_table/7</docrelurl>
            </item>
            <item name= "theme_file_icon">
              <description>Returns HTML for an image with an appropriate icon for the given file.</description>
              <signature>theme_file_icon($variables)</signature>
              <docrelurl>theme_file_icon/7</docrelurl>
            </item>
            <item name= "theme_file_link">
              <description>Returns HTML for a link to a file.</description>
              <signature>theme_file_link($variables)</signature>
              <docrelurl>theme_file_link/7</docrelurl>
            </item>
            <item name= "theme_file_managed_file">
              <description>Returns HTML for a managed file element.</description>
              <signature>theme_file_managed_file($variables)</signature>
              <docrelurl>theme_file_managed_file/7</docrelurl>
            </item>
            <item name= "theme_file_upload_help">
              <description>Returns HTML for help text based on file upload validators.</description>
              <signature>theme_file_upload_help($variables)</signature>
              <docrelurl>theme_file_upload_help/7</docrelurl>
            </item>
            <item name= "theme_file_widget">
              <description>Returns HTML for an individual file upload widget.</description>
              <signature>theme_file_widget($variables)</signature>
              <docrelurl>theme_file_widget/7</docrelurl>
            </item>
            <item name= "theme_file_widget_multiple">
              <description>Returns HTML for a group of file upload widgets.</description>
              <signature>theme_file_widget_multiple($variables)</signature>
              <docrelurl>theme_file_widget_multiple/7</docrelurl>
            </item>
            <item name= "theme_filter_admin_format_filter_order">
              <description>Returns HTML for a text format's filter order form.</description>
              <signature>theme_filter_admin_format_filter_order($variables)</signature>
              <docrelurl>theme_filter_admin_format_filter_order/7</docrelurl>
            </item>
            <item name= "theme_filter_admin_overview">
              <description>Returns HTML for the text format administration overview form.</description>
              <signature>theme_filter_admin_overview($variables)</signature>
              <docrelurl>theme_filter_admin_overview/7</docrelurl>
            </item>
            <item name= "theme_filter_guidelines">
              <description>Returns HTML for guidelines for a text format.</description>
              <signature>theme_filter_guidelines($variables)</signature>
              <docrelurl>theme_filter_guidelines/7</docrelurl>
            </item>
            <item name= "theme_filter_tips">
              <description>Returns HTML for a set of filter tips.</description>
              <signature>theme_filter_tips($variables)</signature>
              <docrelurl>theme_filter_tips/7</docrelurl>
            </item>
            <item name= "theme_filter_tips_more_info">
              <description>Returns HTML for a link to the more extensive filter tips.</description>
              <signature>theme_filter_tips_more_info()</signature>
              <docrelurl>theme_filter_tips_more_info/7</docrelurl>
            </item>
            <item name= "theme_form">
              <description>Returns HTML for a form.</description>
              <signature>theme_form($variables)</signature>
              <docrelurl>theme_form/7</docrelurl>
            </item>
            <item name= "theme_form_element">
              <description>Returns HTML for a form element. Each form element is wrapped in a DIV with #type and #name classes. In addition to the element itself, the div contains a label before or after the element based on the optional #title_display property. After the label and fields this function outputs the optional element #description.</description>
              <signature>theme_form_element($variables)</signature>
              <docrelurl>theme_form_element/7</docrelurl>
            </item>
            <item name= "theme_form_element_label">
              <description>Returns HTML for a form element label and required marker. Form element labels include the #title and a #required marker. The label is associated with the element itself by the element #id. Labels may appear before or after elements, depending on theme_form_element() and #title_display.</description>
              <signature>theme_form_element_label($variables)</signature>
              <docrelurl>theme_form_element_label/7</docrelurl>
            </item>
            <item name= "theme_form_required_marker">
              <description>Returns HTML for a marker for required form elements.</description>
              <signature>theme_form_required_marker($variables)</signature>
              <docrelurl>theme_form_required_marker/7</docrelurl>
            </item>
            <item name= "theme_forums">
              <description>Implemented using the forums.tpl.php template.</description>
              <signature>theme_forums($variables)</signature>
              <docrelurl>theme_forums/7</docrelurl>
            </item>
            <item name= "theme_forum_form">
              <description>Returns HTML for a forum form. By default this does not alter the appearance of a form at all, but is provided as a convenience for themers.</description>
              <signature>theme_forum_form($variables)</signature>
              <docrelurl>theme_forum_form/7</docrelurl>
            </item>
            <item name= "theme_forum_icon">
              <description>Implemented using the forum-icon.tpl.php template.</description>
              <signature>theme_forum_icon($variables)</signature>
              <docrelurl>theme_forum_icon/7</docrelurl>
            </item>
            <item name= "theme_forum_list">
              <description>Implemented using the forum-list.tpl.php template.</description>
              <signature>theme_forum_list($variables)</signature>
              <docrelurl>theme_forum_list/7</docrelurl>
            </item>
            <item name= "theme_forum_submitted">
              <description>Implemented using the forum-submitted.tpl.php template.</description>
              <signature>theme_forum_submitted($variables)</signature>
              <docrelurl>theme_forum_submitted/7</docrelurl>
            </item>
            <item name= "theme_forum_topic_list">
              <description>Implemented using the forum-topic-list.tpl.php template.</description>
              <signature>theme_forum_topic_list($variables)</signature>
              <docrelurl>theme_forum_topic_list/7</docrelurl>
            </item>
            <item name= "theme_get_registry">
              <description>Get the theme registry.</description>
              <signature>theme_get_registry()</signature>
              <docrelurl>theme_get_registry/7</docrelurl>
            </item>
            <item name= "theme_get_setting">
              <description>Retrieve a setting for the current theme or for a given theme. The final setting is obtained from the last value found in the following sources:</description>
              <signature>theme_get_setting($setting_name, $theme = NULL)</signature>
              <docrelurl>theme_get_setting/7</docrelurl>
            </item>
            <item name= "theme_get_suggestions">
              <description>Generate an array of suggestions from path arguments. This is typically called for adding to the 'theme_hook_suggestions' or 'classes_array' variables from within preprocess functions, when wanting to base the additional suggestions on the path of the current page.</description>
              <signature>theme_get_suggestions($args, $base, $delimiter = '__')</signature>
              <docrelurl>theme_get_suggestions/7</docrelurl>
            </item>
            <item name= "theme_hidden">
              <description>Returns HTML for a hidden form element.</description>
              <signature>theme_hidden($variables)</signature>
              <docrelurl>theme_hidden/7</docrelurl>
            </item>
            <item name= "theme_html">
              <description>Implemented using the html.tpl.php template.</description>
              <signature>theme_html($variables)</signature>
              <docrelurl>theme_html/7</docrelurl>
            </item>
            <item name= "theme_html_tag">
              <description>Returns HTML for a generic HTML tag with attributes.</description>
              <signature>theme_html_tag($variables)</signature>
              <docrelurl>theme_html_tag/7</docrelurl>
            </item>
            <item name= "theme_image">
              <description>Returns HTML for an image.</description>
              <signature>theme_image($variables)</signature>
              <docrelurl>theme_image/7</docrelurl>
            </item>
            <item name= "theme_image_anchor">
              <description>Returns HTML for a 3x3 grid of checkboxes for image anchors.</description>
              <signature>theme_image_anchor($variables)</signature>
              <docrelurl>theme_image_anchor/7</docrelurl>
            </item>
            <item name= "theme_image_button">
              <description>Returns HTML for an image button form element.</description>
              <signature>theme_image_button($variables)</signature>
              <docrelurl>theme_image_button/7</docrelurl>
            </item>
            <item name= "theme_image_crop_summary">
              <description>Returns HTML for a summary of an image crop effect.</description>
              <signature>theme_image_crop_summary($variables)</signature>
              <docrelurl>theme_image_crop_summary/7</docrelurl>
            </item>
            <item name= "theme_image_formatter">
              <description>Returns HTML for an image field formatter.</description>
              <signature>theme_image_formatter($variables)</signature>
              <docrelurl>theme_image_formatter/7</docrelurl>
            </item>
            <item name= "theme_image_resize_summary">
              <description>Returns HTML for a summary of an image resize effect.</description>
              <signature>theme_image_resize_summary($variables)</signature>
              <docrelurl>theme_image_resize_summary/7</docrelurl>
            </item>
            <item name= "theme_image_rotate_summary">
              <description>Returns HTML for a summary of an image rotate effect.</description>
              <signature>theme_image_rotate_summary($variables)</signature>
              <docrelurl>theme_image_rotate_summary/7</docrelurl>
            </item>
            <item name= "theme_image_scale_summary">
              <description>Returns HTML for a summary of an image scale effect.</description>
              <signature>theme_image_scale_summary($variables)</signature>
              <docrelurl>theme_image_scale_summary/7</docrelurl>
            </item>
            <item name= "theme_image_style">
              <description>Returns HTML for an image using a specific image style.</description>
              <signature>theme_image_style($variables)</signature>
              <docrelurl>theme_image_style/7</docrelurl>
            </item>
            <item name= "theme_image_style_effects">
              <description>Returns HTML for a listing of the effects within a specific image style.</description>
              <signature>theme_image_style_effects($variables)</signature>
              <docrelurl>theme_image_style_effects/7</docrelurl>
            </item>
            <item name= "theme_image_style_list">
              <description>Returns HTML for the page containing the list of image styles.</description>
              <signature>theme_image_style_list($variables)</signature>
              <docrelurl>theme_image_style_list/7</docrelurl>
            </item>
            <item name= "theme_image_style_preview">
              <description>Returns HTML for a preview of an image style.</description>
              <signature>theme_image_style_preview($variables)</signature>
              <docrelurl>theme_image_style_preview/7</docrelurl>
            </item>
            <item name= "theme_image_widget">
              <description>Returns HTML for an image field widget.</description>
              <signature>theme_image_widget($variables)</signature>
              <docrelurl>theme_image_widget/7</docrelurl>
            </item>
            <item name= "theme_indentation">
              <description>Returns HTML for an indentation div; used for drag and drop tables.</description>
              <signature>theme_indentation($variables)</signature>
              <docrelurl>theme_indentation/7</docrelurl>
            </item>
            <item name= "theme_install_page">
              <description>Returns HTML for the installation page. Note: this function is not themeable.</description>
              <signature>theme_install_page($variables)</signature>
              <docrelurl>theme_install_page/7</docrelurl>
            </item>
            <item name= "theme_item_list">
              <description>Returns HTML for a list or nested list of items.</description>
              <signature>theme_item_list($variables)</signature>
              <docrelurl>theme_item_list/7</docrelurl>
            </item>
            <item name= "theme_link">
              <description>Returns HTML for a link. All Drupal code that outputs a link should call the l() function. That function performs some initial preprocessing, and then, if necessary, calls theme('link') for rendering the anchor tag.</description>
              <signature>theme_link($variables)</signature>
              <docrelurl>theme_link/7</docrelurl>
            </item>
            <item name= "theme_links">
              <description>Returns HTML for a set of links.</description>
              <signature>theme_links($variables)</signature>
              <docrelurl>theme_links/7</docrelurl>
            </item>
            <item name= "theme_locale_date_format_form">
              <description>Returns HTML for a locale date format form.</description>
              <signature>theme_locale_date_format_form($variables)</signature>
              <docrelurl>theme_locale_date_format_form/7</docrelurl>
            </item>
            <item name= "theme_locale_languages_configure_form">
              <description>Returns HTML for a language configuration form.</description>
              <signature>theme_locale_languages_configure_form($variables)</signature>
              <docrelurl>theme_locale_languages_configure_form/7</docrelurl>
            </item>
            <item name= "theme_locale_languages_overview_form">
              <description>Returns HTML for the language overview form.</description>
              <signature>theme_locale_languages_overview_form($variables)</signature>
              <docrelurl>theme_locale_languages_overview_form/7</docrelurl>
            </item>
            <item name= "theme_maintenance_page">
              <description>Implemented using the maintenance-page.tpl.php template.</description>
              <signature>theme_maintenance_page($variables)</signature>
              <docrelurl>theme_maintenance_page/7</docrelurl>
            </item>
            <item name= "theme_mark">
              <description>Returns HTML for a marker for new or updated content.</description>
              <signature>theme_mark($variables)</signature>
              <docrelurl>theme_mark/7</docrelurl>
            </item>
            <item name= "theme_menu_admin_overview">
              <description>Returns HTML for a menu title and description for the menu overview page.</description>
              <signature>theme_menu_admin_overview($variables)</signature>
              <docrelurl>theme_menu_admin_overview/7</docrelurl>
            </item>
            <item name= "theme_menu_link">
              <description>Returns HTML for a menu link and submenu.</description>
              <signature>theme_menu_link(array $variables)</signature>
              <docrelurl>theme_menu_link/7</docrelurl>
            </item>
            <item name= "theme_menu_local_action">
              <description>Returns HTML for a single local action link.</description>
              <signature>theme_menu_local_action($variables)</signature>
              <docrelurl>theme_menu_local_action/7</docrelurl>
            </item>
            <item name= "theme_menu_local_task">
              <description>Returns HTML for a single local task link.</description>
              <signature>theme_menu_local_task($variables)</signature>
              <docrelurl>theme_menu_local_task/7</docrelurl>
            </item>
            <item name= "theme_menu_local_tasks">
              <description>Returns renderable local tasks.</description>
              <signature>theme_menu_local_tasks()</signature>
              <docrelurl>theme_menu_local_tasks/7</docrelurl>
            </item>
            <item name= "theme_menu_overview_form">
              <description>Returns HTML for the menu overview form into a table.</description>
              <signature>theme_menu_overview_form($variables)</signature>
              <docrelurl>theme_menu_overview_form/7</docrelurl>
            </item>
            <item name= "theme_menu_tree">
              <description>Returns HTML for a wrapper for a menu sub-tree.</description>
              <signature>theme_menu_tree($variables)</signature>
              <docrelurl>theme_menu_tree/7</docrelurl>
            </item>
            <item name= "theme_more_help_link">
              <description>Returns HTML for a "more help" link.</description>
              <signature>theme_more_help_link($variables)</signature>
              <docrelurl>theme_more_help_link/7</docrelurl>
            </item>
            <item name= "theme_more_link">
              <description>Returns HTML for a "more" link, like those used in blocks.</description>
              <signature>theme_more_link($variables)</signature>
              <docrelurl>theme_more_link/7</docrelurl>
            </item>
            <item name= "theme_node">
              <description>Implemented using the node.tpl.php template.</description>
              <signature>theme_node($variables)</signature>
              <docrelurl>theme_node/7</docrelurl>
            </item>
            <item name= "theme_node_add_list">
              <description>Returns HTML for a list of available node types for node creation.</description>
              <signature>theme_node_add_list($variables)</signature>
              <docrelurl>theme_node_add_list/7</docrelurl>
            </item>
            <item name= "theme_node_admin_overview">
              <description>Returns HTML for a node type description for the content type admin overview page.</description>
              <signature>theme_node_admin_overview($variables)</signature>
              <docrelurl>theme_node_admin_overview/7</docrelurl>
            </item>
            <item name= "theme_node_filters">
              <description>Returns HTML for a node administration filter selector.</description>
              <signature>theme_node_filters($variables)</signature>
              <docrelurl>theme_node_filters/7</docrelurl>
            </item>
            <item name= "theme_node_preview">
              <description>Returns HTML for a node preview for display during node creation and editing.</description>
              <signature>theme_node_preview($variables)</signature>
              <docrelurl>theme_node_preview/7</docrelurl>
            </item>
            <item name= "theme_node_recent_block">
              <description>Returns HTML for a list of recent content.</description>
              <signature>theme_node_recent_block($variables)</signature>
              <docrelurl>theme_node_recent_block/7</docrelurl>
            </item>
            <item name= "theme_node_recent_content">
              <description>Returns HTML for a recent node to be displayed in the recent content block.</description>
              <signature>theme_node_recent_content($variables)</signature>
              <docrelurl>theme_node_recent_content/7</docrelurl>
            </item>
            <item name= "theme_node_search_admin">
              <description>Returns HTML for the content ranking part of the search settings admin page.</description>
              <signature>theme_node_search_admin($variables)</signature>
              <docrelurl>theme_node_search_admin/7</docrelurl>
            </item>
            <item name= "theme_options_none">
              <description>Returns HTML for the label for the empty value for options that are not required. The default theme will display N/A for a radio list and blank for a select.</description>
              <signature>theme_options_none($variables)</signature>
              <docrelurl>theme_options_none/7</docrelurl>
            </item>
            <item name= "theme_page">
              <description>Implemented using the page.tpl.php template.</description>
              <signature>theme_page($variables)</signature>
              <docrelurl>theme_page/7</docrelurl>
            </item>
            <item name= "theme_pager">
              <description>Returns HTML for a query pager. Menu callbacks that display paged query results should call theme('pager') to retrieve a pager control so that users can view other results. Format a list of nearby pages with additional query results.</description>
              <signature>theme_pager($variables)</signature>
              <docrelurl>theme_pager/7</docrelurl>
            </item>
            <item name= "theme_pager_first">
              <description>Returns HTML for the "first page" link in a query pager.</description>
              <signature>theme_pager_first($variables)</signature>
              <docrelurl>theme_pager_first/7</docrelurl>
            </item>
            <item name= "theme_pager_last">
              <description>Returns HTML for the "last page" link in query pager.</description>
              <signature>theme_pager_last($variables)</signature>
              <docrelurl>theme_pager_last/7</docrelurl>
            </item>
            <item name= "theme_pager_link">
              <description>Returns HTML for a link to a specific query result page.</description>
              <signature>theme_pager_link($variables)</signature>
              <docrelurl>theme_pager_link/7</docrelurl>
            </item>
            <item name= "theme_pager_next">
              <description>Returns HTML for the "next page" link in a query pager.</description>
              <signature>theme_pager_next($variables)</signature>
              <docrelurl>theme_pager_next/7</docrelurl>
            </item>
            <item name= "theme_pager_previous">
              <description>Returns HTML for the "previous page" link in a query pager.</description>
              <signature>theme_pager_previous($variables)</signature>
              <docrelurl>theme_pager_previous/7</docrelurl>
            </item>
            <item name= "theme_password">
              <description>Returns HTML for a password form element.</description>
              <signature>theme_password($variables)</signature>
              <docrelurl>theme_password/7</docrelurl>
            </item>
            <item name= "theme_poll_bar">
              <description>Implemented using the poll-bar.tpl.php template.</description>
              <signature>theme_poll_bar($variables)</signature>
              <docrelurl>theme_poll_bar/7</docrelurl>
            </item>
            <item name= "theme_poll_bar__block">
              <description>Implemented using the poll-bar--block.tpl.php template.</description>
              <signature>theme_poll_bar__block($variables)</signature>
              <docrelurl>theme_poll_bar__block/7</docrelurl>
            </item>
            <item name= "theme_poll_choices">
              <description>Returns HTML for an admin poll form for choices.</description>
              <signature>theme_poll_choices($variables)</signature>
              <docrelurl>theme_poll_choices/7</docrelurl>
            </item>
            <item name= "theme_poll_results">
              <description>Implemented using the poll-results.tpl.php template.</description>
              <signature>theme_poll_results($variables)</signature>
              <docrelurl>theme_poll_results/7</docrelurl>
            </item>
            <item name= "theme_poll_results__block">
              <description>Implemented using the poll-results--block.tpl.php template.</description>
              <signature>theme_poll_results__block($variables)</signature>
              <docrelurl>theme_poll_results__block/7</docrelurl>
            </item>
            <item name= "theme_poll_vote">
              <description>Implemented using the poll-vote.tpl.php template.</description>
              <signature>theme_poll_vote($variables)</signature>
              <docrelurl>theme_poll_vote/7</docrelurl>
            </item>
            <item name= "theme_profile_admin_overview">
              <description>Returns HTML for the profile field overview form into a drag and drop enabled table.</description>
              <signature>theme_profile_admin_overview($variables)</signature>
              <docrelurl>theme_profile_admin_overview/7</docrelurl>
            </item>
            <item name= "theme_profile_block">
              <description>Implemented using the profile-block.tpl.php template.</description>
              <signature>theme_profile_block($variables)</signature>
              <docrelurl>theme_profile_block/7</docrelurl>
            </item>
            <item name= "theme_profile_listing">
              <description>Implemented using the profile-listing.tpl.php template.</description>
              <signature>theme_profile_listing($variables)</signature>
              <docrelurl>theme_profile_listing/7</docrelurl>
            </item>
            <item name= "theme_profile_wrapper">
              <description>Implemented using the profile-wrapper.tpl.php template.</description>
              <signature>theme_profile_wrapper($variables)</signature>
              <docrelurl>theme_profile_wrapper/7</docrelurl>
            </item>
            <item name= "theme_progress_bar">
              <description>Returns HTML for a progress bar.</description>
              <signature>theme_progress_bar($variables)</signature>
              <docrelurl>theme_progress_bar/7</docrelurl>
            </item>
            <item name= "theme_radio">
              <description>Returns HTML for a radio button form element.</description>
              <signature>theme_radio($variables)</signature>
              <docrelurl>theme_radio/7</docrelurl>
            </item>
            <item name= "theme_radios">
              <description>Returns HTML for a set of radio button form elements.</description>
              <signature>theme_radios($variables)</signature>
              <docrelurl>theme_radios/7</docrelurl>
            </item>
            <item name= "theme_rdf_metadata">
              <description>Returns HTML for a series of empty spans for exporting RDF metadata in RDFa. Sometimes it is useful to export data which is not semantically present in the HTML output. For example, a hierarchy of comments is visible for a human but not for machines because this hiearchy is not present in the DOM tree. We can express it in RDFa via empty span tags. These aren't visible and give machines extra information about the content and its structure.</description>
              <signature>theme_rdf_metadata($variables)</signature>
              <docrelurl>theme_rdf_metadata/7</docrelurl>
            </item>
            <item name= "theme_rdf_template_variable_wrapper">
              <description>Returns HTML for a template variable wrapped in an HTML element with the desired attributes. This is called by rdf_process() shortly before the theme system renders a template file. It is called once for each template variable for which additional attributes are needed. While template files are responsible for rendering the attributes for the template's primary object (via the $attributes variable), title (via the $title_attributes variable), and content (via the $content_attributes variable), additional template variables that need containing attributes are routed through this function, allowing the template file to receive properly wrapped variables.</description>
              <signature>theme_rdf_template_variable_wrapper($variables)</signature>
              <docrelurl>theme_rdf_template_variable_wrapper/7</docrelurl>
            </item>
            <item name= "theme_region">
              <description>Implemented using the region.tpl.php template.</description>
              <signature>theme_region($variables)</signature>
              <docrelurl>theme_region/7</docrelurl>
            </item>
            <item name= "theme_render_template">
              <description>Render a system default template, which is essentially a PHP template.</description>
              <signature>theme_render_template($template_file, $variables)</signature>
              <docrelurl>theme_render_template/7</docrelurl>
            </item>
            <item name= "theme_search_block_form">
              <description>Implemented using the search-block-form.tpl.php template.</description>
              <signature>theme_search_block_form($variables)</signature>
              <docrelurl>theme_search_block_form/7</docrelurl>
            </item>
            <item name= "theme_search_result">
              <description>Implemented using the search-result.tpl.php template.</description>
              <signature>theme_search_result($variables)</signature>
              <docrelurl>theme_search_result/7</docrelurl>
            </item>
            <item name= "theme_search_results">
              <description>Implemented using the search-results.tpl.php template.</description>
              <signature>theme_search_results($variables)</signature>
              <docrelurl>theme_search_results/7</docrelurl>
            </item>
            <item name= "theme_search_results_listing">
              <description>Returns HTML for a listing of search results.</description>
              <signature>theme_search_results_listing($variables)</signature>
              <docrelurl>theme_search_results_listing/7</docrelurl>
            </item>
            <item name= "theme_select">
              <description>Returns HTML for a select form element. It is possible to group options together; to do this, change the format of $options to an associative array in which the keys are group labels, and the values are associative arrays in the normal $options format.</description>
              <signature>theme_select($variables)</signature>
              <docrelurl>theme_select/7</docrelurl>
            </item>
            <item name= "theme_shortcut_set_customize">
              <description>Returns HTML for a shortcut set customization form.</description>
              <signature>theme_shortcut_set_customize($variables)</signature>
              <docrelurl>theme_shortcut_set_customize/7</docrelurl>
            </item>
            <item name= "theme_simpletest_result_summary">
              <description>Returns HTML for the summary status of a simpletest result.</description>
              <signature>theme_simpletest_result_summary($variables)</signature>
              <docrelurl>theme_simpletest_result_summary/7</docrelurl>
            </item>
            <item name= "theme_simpletest_test_table">
              <description>Returns HTML for a test list generated by simpletest_test_form() into a table.</description>
              <signature>theme_simpletest_test_table($variables)</signature>
              <docrelurl>theme_simpletest_test_table/7</docrelurl>
            </item>
            <item name= "theme_status_messages">
              <description>Returns HTML for status and/or error messages, grouped by type. An invisible heading identifies the messages for assistive technology. Sighted users see a colored box. See http://www.w3.org/TR/WCAG-TECHS/H69.html for info.</description>
              <signature>theme_status_messages($variables)</signature>
              <docrelurl>theme_status_messages/7</docrelurl>
            </item>
            <item name= "theme_status_report">
              <description>Returns HTML for the status report.</description>
              <signature>theme_status_report($variables)</signature>
              <docrelurl>theme_status_report/7</docrelurl>
            </item>
            <item name= "theme_submit">
              <description>Returns HTML for a submit button form element.</description>
              <signature>theme_submit($variables)</signature>
              <docrelurl>theme_submit/7</docrelurl>
            </item>
            <item name= "theme_system_admin_by_module">
              <description>Returns HTML for the output of the dashboard page.</description>
              <signature>theme_system_admin_by_module($variables)</signature>
              <docrelurl>theme_system_admin_by_module/7</docrelurl>
            </item>
            <item name= "theme_system_compact_link">
              <description>Returns HTML for a link to show or hide inline help descriptions.</description>
              <signature>theme_system_compact_link()</signature>
              <docrelurl>theme_system_compact_link/7</docrelurl>
            </item>
            <item name= "theme_system_date_time_settings">
              <description>Returns HTML for the date settings form.</description>
              <signature>theme_system_date_time_settings($variables)</signature>
              <docrelurl>theme_system_date_time_settings/7</docrelurl>
            </item>
            <item name= "theme_system_modules_fieldset">
              <description>Returns HTML for the modules form.</description>
              <signature>theme_system_modules_fieldset($variables)</signature>
              <docrelurl>theme_system_modules_fieldset/7</docrelurl>
            </item>
            <item name= "theme_system_modules_incompatible">
              <description>Returns HTML for a message about incompatible modules.</description>
              <signature>theme_system_modules_incompatible($variables)</signature>
              <docrelurl>theme_system_modules_incompatible/7</docrelurl>
            </item>
            <item name= "theme_system_modules_uninstall">
              <description>Returns HTML for a table of currently disabled modules.</description>
              <signature>theme_system_modules_uninstall($variables)</signature>
              <docrelurl>theme_system_modules_uninstall/7</docrelurl>
            </item>
            <item name= "theme_system_powered_by">
              <description>Returns HTML for the Powered by Drupal text.</description>
              <signature>theme_system_powered_by()</signature>
              <docrelurl>theme_system_powered_by/7</docrelurl>
            </item>
            <item name= "theme_system_settings_form">
              <description>Returns HTML for a system settings form. By default this does not alter the appearance of a form at all, but is provided as a convenience for themers.</description>
              <signature>theme_system_settings_form($variables)</signature>
              <docrelurl>theme_system_settings_form/7</docrelurl>
            </item>
            <item name= "theme_system_themes_page">
              <description>Returns HTML for the Appearance page.</description>
              <signature>theme_system_themes_page($variables)</signature>
              <docrelurl>theme_system_themes_page/7</docrelurl>
            </item>
            <item name= "theme_table">
              <description>Returns HTML for a table.</description>
              <signature>theme_table($variables)</signature>
              <docrelurl>theme_table/7</docrelurl>
            </item>
            <item name= "theme_tableselect">
              <description>Returns HTML for a table with radio buttons or checkboxes. An example of per-row options:</description>
              <signature>theme_tableselect($variables)</signature>
              <docrelurl>theme_tableselect/7</docrelurl>
            </item>
            <item name= "theme_tablesort_indicator">
              <description>Returns HTML for a sort icon.</description>
              <signature>theme_tablesort_indicator($variables)</signature>
              <docrelurl>theme_tablesort_indicator/7</docrelurl>
            </item>
            <item name= "theme_task_list">
              <description>Returns HTML for a list of maintenance tasks to perform.</description>
              <signature>theme_task_list($variables)</signature>
              <docrelurl>theme_task_list/7</docrelurl>
            </item>
            <item name= "theme_taxonomy_overview_terms">
              <description>Returns HTML for a terms overview form as a sortable list of terms.</description>
              <signature>theme_taxonomy_overview_terms($variables)</signature>
              <docrelurl>theme_taxonomy_overview_terms/7</docrelurl>
            </item>
            <item name= "theme_taxonomy_overview_vocabularies">
              <description>Returns HTML for the vocabulary overview form as a sortable list of vocabularies.</description>
              <signature>theme_taxonomy_overview_vocabularies($variables)</signature>
              <docrelurl>theme_taxonomy_overview_vocabularies/7</docrelurl>
            </item>
            <item name= "theme_taxonomy_term">
              <description>Implemented using the taxonomy-term.tpl.php template.</description>
              <signature>theme_taxonomy_term($variables)</signature>
              <docrelurl>theme_taxonomy_term/7</docrelurl>
            </item>
            <item name= "theme_test_hook_init_page_callback">
              <description>Menu callback for testing themed output generated in hook_init().</description>
              <signature>theme_test_hook_init_page_callback()</signature>
              <docrelurl>theme_test_hook_init_page_callback/7</docrelurl>
            </item>
            <item name= "theme_test_init">
              <description>Implements hook_init().</description>
              <signature>theme_test_init()</signature>
              <docrelurl>theme_test_init/7</docrelurl>
            </item>
            <item name= "theme_test_menu">
              <description>Implements hook_menu().</description>
              <signature>theme_test_menu()</signature>
              <docrelurl>theme_test_menu/7</docrelurl>
            </item>
            <item name= "theme_test_preprocess_breadcrumb">
              <description>Implements hook_preprocess_breadcrumb(). Set a variable that can later be tested to see if this function ran.</description>
              <signature>theme_test_preprocess_breadcrumb(&amp;$variables)</signature>
              <docrelurl>theme_test_preprocess_breadcrumb/7</docrelurl>
            </item>
            <item name= "theme_textarea">
              <description>Returns HTML for a textarea form element.</description>
              <signature>theme_textarea($variables)</signature>
              <docrelurl>theme_textarea/7</docrelurl>
            </item>
            <item name= "theme_textfield">
              <description>Returns HTML for a textfield form element.</description>
              <signature>theme_textfield($variables)</signature>
              <docrelurl>theme_textfield/7</docrelurl>
            </item>
            <item name= "theme_text_format_wrapper">
              <description>Returns HTML for a text format-enabled form element.</description>
              <signature>theme_text_format_wrapper($variables)</signature>
              <docrelurl>theme_text_format_wrapper/7</docrelurl>
            </item>
            <item name= "theme_toolbar">
              <description>Implemented using the toolbar.tpl.php template.</description>
              <signature>theme_toolbar($variables)</signature>
              <docrelurl>theme_toolbar/7</docrelurl>
            </item>
            <item name= "theme_toolbar_toggle">
              <description>Formats an element used to toggle the toolbar drawer's visibility.</description>
              <signature>theme_toolbar_toggle($variables)</signature>
              <docrelurl>theme_toolbar_toggle/7</docrelurl>
            </item>
            <item name= "theme_trigger_display">
              <description>Returns HTML for the form showing actions assigned to a trigger.</description>
              <signature>theme_trigger_display($variables)</signature>
              <docrelurl>theme_trigger_display/7</docrelurl>
            </item>
            <item name= "theme_update_last_check">
              <description>Returns HTML for the last time we checked for update data. In addition to properly formating the given timestamp, this function also provides a "Check manually" link that refreshes the available update and redirects back to the same page.</description>
              <signature>theme_update_last_check($variables)</signature>
              <docrelurl>theme_update_last_check/7</docrelurl>
            </item>
            <item name= "theme_update_manager_update_form">
              <description>Returns HTML for the first page in the update manager wizard to select projects.</description>
              <signature>theme_update_manager_update_form($variables)</signature>
              <docrelurl>theme_update_manager_update_form/7</docrelurl>
            </item>
            <item name= "theme_update_page">
              <description>Returns HTML for the update page. Note: this function is not themeable.</description>
              <signature>theme_update_page($variables)</signature>
              <docrelurl>theme_update_page/7</docrelurl>
            </item>
            <item name= "theme_update_report">
              <description>Returns HTML for the project status report.</description>
              <signature>theme_update_report($variables)</signature>
              <docrelurl>theme_update_report/7</docrelurl>
            </item>
            <item name= "theme_update_status_label">
              <description>Returns HTML for a label to display for a project's update status.</description>
              <signature>theme_update_status_label($variables)</signature>
              <docrelurl>theme_update_status_label/7</docrelurl>
            </item>
            <item name= "theme_update_version">
              <description>Returns HTML for the version display of a project.</description>
              <signature>theme_update_version($variables)</signature>
              <docrelurl>theme_update_version/7</docrelurl>
            </item>
            <item name= "theme_username">
              <description>Returns HTML for a username, potentially linked to the user's page.</description>
              <signature>theme_username($variables)</signature>
              <docrelurl>theme_username/7</docrelurl>
            </item>
            <item name= "theme_user_admin_permissions">
              <description>Returns HTML for the administer permissions page.</description>
              <signature>theme_user_admin_permissions($variables)</signature>
              <docrelurl>theme_user_admin_permissions/7</docrelurl>
            </item>
            <item name= "theme_user_admin_roles">
              <description>Returns HTML for the role order and new role form.</description>
              <signature>theme_user_admin_roles($variables)</signature>
              <docrelurl>theme_user_admin_roles/7</docrelurl>
            </item>
            <item name= "theme_user_filters">
              <description>Returns HTML for the user administration filter selector.</description>
              <signature>theme_user_filters($variables)</signature>
              <docrelurl>theme_user_filters/7</docrelurl>
            </item>
            <item name= "theme_user_list">
              <description>Returns HTML for a list of users.</description>
              <signature>theme_user_list($variables)</signature>
              <docrelurl>theme_user_list/7</docrelurl>
            </item>
            <item name= "theme_user_permission_description">
              <description>Returns HTML for an individual permission description.</description>
              <signature>theme_user_permission_description($variables)</signature>
              <docrelurl>theme_user_permission_description/7</docrelurl>
            </item>
            <item name= "theme_user_picture">
              <description>Implemented using the user-picture.tpl.php template.</description>
              <signature>theme_user_picture($variables)</signature>
              <docrelurl>theme_user_picture/7</docrelurl>
            </item>
            <item name= "theme_user_profile">
              <description>Implemented using the user-profile.tpl.php template.</description>
              <signature>theme_user_profile($variables)</signature>
              <docrelurl>theme_user_profile/7</docrelurl>
            </item>
            <item name= "theme_user_profile_category">
              <description>Implemented using the user-profile-category.tpl.php template.</description>
              <signature>theme_user_profile_category($variables)</signature>
              <docrelurl>theme_user_profile_category/7</docrelurl>
            </item>
            <item name= "theme_user_profile_item">
              <description>Implemented using the user-profile-item.tpl.php template.</description>
              <signature>theme_user_profile_item($variables)</signature>
              <docrelurl>theme_user_profile_item/7</docrelurl>
            </item>
            <item name= "theme_user_signature">
              <description>Returns HTML for a user signature.</description>
              <signature>theme_user_signature($variables)</signature>
              <docrelurl>theme_user_signature/7</docrelurl>
            </item>
            <item name= "theme_vertical_tabs">
              <description>Returns HTML for an element's children fieldsets as vertical tabs.</description>
              <signature>theme_vertical_tabs($variables)</signature>
              <docrelurl>theme_vertical_tabs/7</docrelurl>
            </item>
            <item name= "timer_read">
              <description>Read the current timer value without stopping the timer.</description>
              <signature>timer_read($name)</signature>
              <docrelurl>timer_read/7</docrelurl>
            </item>
            <item name= "timer_start">
              <description>Start the timer with the specified name. If you start and stop the same timer multiple times, the measured intervals will be accumulated.</description>
              <signature>timer_start($name)</signature>
              <docrelurl>timer_start/7</docrelurl>
            </item>
            <item name= "timer_stop">
              <description>Stop the timer with the specified name.</description>
              <signature>timer_stop($name)</signature>
              <docrelurl>timer_stop/7</docrelurl>
            </item>
            <item name= "token_find_with_prefix">
              <description>Given a list of tokens, return those that begin with a specific prefix. Used to extract a group of 'chained' tokens (such as [node:author:name]) from the full list of tokens found in text. For example:</description>
              <signature>token_find_with_prefix(array $tokens, $prefix, $delimiter = ':')</signature>
              <docrelurl>token_find_with_prefix/7</docrelurl>
            </item>
            <item name= "token_generate">
              <description>Generate replacement values for a list of tokens.</description>
              <signature>token_generate($type, array $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>token_generate/7</docrelurl>
            </item>
            <item name= "token_info">
              <description>Returns metadata describing supported tokens. The metadata array contains token type, name, and description data as well as an optional pointer indicating that the token chains to another set of tokens. For example:</description>
              <signature>token_info()</signature>
              <docrelurl>token_info/7</docrelurl>
            </item>
            <item name= "token_replace">
              <description>Replace all tokens in a given string with appropriate values.</description>
              <signature>token_replace($text, array $data = array(), array $options = array())</signature>
              <docrelurl>token_replace/7</docrelurl>
            </item>
            <item name= "token_scan">
              <description>Build a list of all token-like patterns that appear in the text.</description>
              <signature>token_scan($text)</signature>
              <docrelurl>token_scan/7</docrelurl>
            </item>
            <item name= "toolbar_get_menu_tree">
              <description>Get only the top level items below the 'admin' path.</description>
              <signature>toolbar_get_menu_tree()</signature>
              <docrelurl>toolbar_get_menu_tree/7</docrelurl>
            </item>
            <item name= "toolbar_help">
              <description>Implements hook_help().</description>
              <signature>toolbar_help($path, $arg)</signature>
              <docrelurl>toolbar_help/7</docrelurl>
            </item>
            <item name= "toolbar_in_active_trail">
              <description>Checks whether an item is in the active trail. Useful when using a menu generated by menu_tree_all_data() which does not set the 'in_active_trail' flag on items.</description>
              <signature>toolbar_in_active_trail($path)</signature>
              <docrelurl>toolbar_in_active_trail/7</docrelurl>
            </item>
            <item name= "toolbar_menu">
              <description>Implements hook_menu().</description>
              <signature>toolbar_menu()</signature>
              <docrelurl>toolbar_menu/7</docrelurl>
            </item>
            <item name= "toolbar_menu_navigation_links">
              <description>Generate a links array from a menu tree array. Based on menu_navigation_links(). Adds path based IDs and icon placeholders to the links.</description>
              <signature>toolbar_menu_navigation_links($tree)</signature>
              <docrelurl>toolbar_menu_navigation_links/7</docrelurl>
            </item>
            <item name= "toolbar_page_build">
              <description>Implements hook_page_build(). Add admin toolbar to the page_top region automatically.</description>
              <signature>toolbar_page_build(&amp;$page)</signature>
              <docrelurl>toolbar_page_build/7</docrelurl>
            </item>
            <item name= "toolbar_permission">
              <description>Implements hook_permission().</description>
              <signature>toolbar_permission()</signature>
              <docrelurl>toolbar_permission/7</docrelurl>
            </item>
            <item name= "toolbar_preprocess_html">
              <description>Implements hook_preprocess_html(). Add some page classes, so global page theming can adjust to the toolbar.</description>
              <signature>toolbar_preprocess_html(&amp;$vars)</signature>
              <docrelurl>toolbar_preprocess_html/7</docrelurl>
            </item>
            <item name= "toolbar_preprocess_toolbar">
              <description>Implements hook_preprocess_toolbar(). Adding the 'overlay-displace-top' class to the toolbar pushes the overlay down, so it appears below the toolbar.</description>
              <signature>toolbar_preprocess_toolbar(&amp;$variables)</signature>
              <docrelurl>toolbar_preprocess_toolbar/7</docrelurl>
            </item>
            <item name= "toolbar_pre_render">
              <description>Prerender function for the toolbar. Since building the toolbar takes some time, it is done just prior to rendering to ensure that it is built only if it will be displayed.</description>
              <signature>toolbar_pre_render($toolbar)</signature>
              <docrelurl>toolbar_pre_render/7</docrelurl>
            </item>
            <item name= "toolbar_system_info_alter">
              <description>Implements hook_system_info_alter(). Indicate that the 'page_top' region (in which the toolbar will be displayed) is an overlay supplemental region that should be refreshed whenever its content is updated.</description>
              <signature>toolbar_system_info_alter(&amp;$info, $file, $type)</signature>
              <docrelurl>toolbar_system_info_alter/7</docrelurl>
            </item>
            <item name= "toolbar_theme">
              <description>Implements hook_theme().</description>
              <signature>toolbar_theme($existing, $type, $theme, $path)</signature>
              <docrelurl>toolbar_theme/7</docrelurl>
            </item>
            <item name= "toolbar_toggle_page">
              <description>Menu callback; toggles the visibility of the toolbar drawer.</description>
              <signature>toolbar_toggle_page()</signature>
              <docrelurl>toolbar_toggle_page/7</docrelurl>
            </item>
            <item name= "toolbar_view">
              <description>Build the admin menu as a structured array ready for drupal_render().</description>
              <signature>toolbar_view()</signature>
              <docrelurl>toolbar_view/7</docrelurl>
            </item>
            <item name= "tracker_comment_delete">
              <description>Implements hook_comment_delete().</description>
              <signature>tracker_comment_delete($comment)</signature>
              <docrelurl>tracker_comment_delete/7</docrelurl>
            </item>
            <item name= "tracker_comment_publish">
              <description>Implements hook_comment_publish(). This actually handles the insert and update of published nodes since comment_save() calls hook_comment_publish() for all published comments.</description>
              <signature>tracker_comment_publish($comment)</signature>
              <docrelurl>tracker_comment_publish/7</docrelurl>
            </item>
            <item name= "tracker_comment_unpublish">
              <description>Implements hook_comment_unpublish().</description>
              <signature>tracker_comment_unpublish($comment)</signature>
              <docrelurl>tracker_comment_unpublish/7</docrelurl>
            </item>
            <item name= "tracker_comment_update">
              <description>Implements hook_comment_update(). Comment module doesn't call hook_comment_unpublish() when saving individual comments so we need to check for those here.</description>
              <signature>tracker_comment_update($comment)</signature>
              <docrelurl>tracker_comment_update/7</docrelurl>
            </item>
            <item name= "tracker_cron">
              <description>Implements hook_cron().</description>
              <signature>tracker_cron()</signature>
              <docrelurl>tracker_cron/7</docrelurl>
            </item>
            <item name= "tracker_enable">
              <description>Implements hook_enable().</description>
              <signature>tracker_enable()</signature>
              <docrelurl>tracker_enable/7</docrelurl>
            </item>
            <item name= "tracker_help">
              <description>Implements hook_help().</description>
              <signature>tracker_help($path, $arg)</signature>
              <docrelurl>tracker_help/7</docrelurl>
            </item>
            <item name= "tracker_menu">
              <description>Implements hook_menu().</description>
              <signature>tracker_menu()</signature>
              <docrelurl>tracker_menu/7</docrelurl>
            </item>
            <item name= "tracker_node_delete">
              <description>Implements hook_nodeapi_delete().</description>
              <signature>tracker_node_delete($node, $arg = 0)</signature>
              <docrelurl>tracker_node_delete/7</docrelurl>
            </item>
            <item name= "tracker_node_insert">
              <description>Implements hook_nodeapi_insert().</description>
              <signature>tracker_node_insert($node, $arg = 0)</signature>
              <docrelurl>tracker_node_insert/7</docrelurl>
            </item>
            <item name= "tracker_node_update">
              <description>Implements hook_nodeapi_update().</description>
              <signature>tracker_node_update($node, $arg = 0)</signature>
              <docrelurl>tracker_node_update/7</docrelurl>
            </item>
            <item name= "tracker_page">
              <description>Menu callback; prints a listing of active nodes on the site.</description>
              <signature>tracker_page($account = NULL, $set_title = FALSE)</signature>
              <docrelurl>tracker_page/7</docrelurl>
            </item>
            <item name= "tracker_schema">
              <description>Implements hook_schema().</description>
              <signature>tracker_schema()</signature>
              <docrelurl>tracker_schema/7</docrelurl>
            </item>
            <item name= "tracker_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>tracker_uninstall()</signature>
              <docrelurl>tracker_uninstall/7</docrelurl>
            </item>
            <item name= "tracker_update_7000">
              <description>Create new tracker_node and tracker_user tables.</description>
              <signature>tracker_update_7000()</signature>
              <docrelurl>tracker_update_7000/7</docrelurl>
            </item>
            <item name= "translation_admin_paths">
              <description>Implements hook_admin_paths().</description>
              <signature>translation_admin_paths()</signature>
              <docrelurl>translation_admin_paths/7</docrelurl>
            </item>
            <item name= "translation_form_alter">
              <description>Implements hook_form_alter().</description>
              <signature>translation_form_alter(&amp;$form, &amp;$form_state, $form_id)</signature>
              <docrelurl>translation_form_alter/7</docrelurl>
            </item>
            <item name= "translation_form_node_type_form_alter">
              <description>Implements hook_form_FORM_ID_alter().</description>
              <signature>translation_form_node_type_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>translation_form_node_type_form_alter/7</docrelurl>
            </item>
            <item name= "translation_help">
              <description>Implements hook_help().</description>
              <signature>translation_help($path, $arg)</signature>
              <docrelurl>translation_help/7</docrelurl>
            </item>
            <item name= "translation_language_switch_links_alter">
              <description>Implements hook_language_switch_links_alter(). Replaces links with pointers to translated versions of the content.</description>
              <signature>translation_language_switch_links_alter(array &amp;$links, $type, $path)</signature>
              <docrelurl>translation_language_switch_links_alter/7</docrelurl>
            </item>
            <item name= "translation_menu">
              <description>Implements hook_menu().</description>
              <signature>translation_menu()</signature>
              <docrelurl>translation_menu/7</docrelurl>
            </item>
            <item name= "translation_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>translation_node_delete($node)</signature>
              <docrelurl>translation_node_delete/7</docrelurl>
            </item>
            <item name= "translation_node_get_translations">
              <description>Get all nodes in a translation set, represented by $tnid.</description>
              <signature>translation_node_get_translations($tnid)</signature>
              <docrelurl>translation_node_get_translations/7</docrelurl>
            </item>
            <item name= "translation_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>translation_node_insert($node)</signature>
              <docrelurl>translation_node_insert/7</docrelurl>
            </item>
            <item name= "translation_node_overview">
              <description>Overview page for a node's translations.</description>
              <signature>translation_node_overview($node)</signature>
              <docrelurl>translation_node_overview/7</docrelurl>
            </item>
            <item name= "translation_node_prepare">
              <description>Implements hook_node_prepare().</description>
              <signature>translation_node_prepare($node)</signature>
              <docrelurl>translation_node_prepare/7</docrelurl>
            </item>
            <item name= "translation_node_update">
              <description>Implements hook_node_update().</description>
              <signature>translation_node_update($node)</signature>
              <docrelurl>translation_node_update/7</docrelurl>
            </item>
            <item name= "translation_node_validate">
              <description>Implements hook_node_validate(). Ensure that duplicate translations can not be created for the same source.</description>
              <signature>translation_node_validate($node, $form)</signature>
              <docrelurl>translation_node_validate/7</docrelurl>
            </item>
            <item name= "translation_node_view">
              <description>Implements hook_node_view(). Display translation links with native language names, if this node is part of a translation set.</description>
              <signature>translation_node_view($node, $view_mode)</signature>
              <docrelurl>translation_node_view/7</docrelurl>
            </item>
            <item name= "translation_path_get_translations">
              <description>Return paths of all translations of a node, based on its Drupal path.</description>
              <signature>translation_path_get_translations($path)</signature>
              <docrelurl>translation_path_get_translations/7</docrelurl>
            </item>
            <item name= "translation_permission">
              <description>Implements hook_permission().</description>
              <signature>translation_permission()</signature>
              <docrelurl>translation_permission/7</docrelurl>
            </item>
            <item name= "translation_remove_from_set">
              <description>Remove a node from its translation set (if any) and update the set accordingly.</description>
              <signature>translation_remove_from_set($node)</signature>
              <docrelurl>translation_remove_from_set/7</docrelurl>
            </item>
            <item name= "translation_supported_type">
              <description>Returns whether the given content type has support for translations.</description>
              <signature>translation_supported_type($type)</signature>
              <docrelurl>translation_supported_type/7</docrelurl>
            </item>
            <item name= "trigger_actions_delete">
              <description>Implements hook_actions_delete(). Removes all trigger entries for the given action, when an action is deleted.</description>
              <signature>trigger_actions_delete($aid)</signature>
              <docrelurl>trigger_actions_delete/7</docrelurl>
            </item>
            <item name= "trigger_assign">
              <description>Builds the form that allows users to assign actions to triggers.</description>
              <signature>trigger_assign($module_to_display = NULL)</signature>
              <docrelurl>trigger_assign/7</docrelurl>
            </item>
            <item name= "trigger_assign_form">
              <description>Returns the form for assigning an action to a trigger. @ingoup forms</description>
              <signature>trigger_assign_form($form, $form_state, $module, $hook, $label)</signature>
              <docrelurl>trigger_assign_form/7</docrelurl>
            </item>
            <item name= "trigger_assign_form_submit">
              <description>Submit function for trigger_assign_form().</description>
              <signature>trigger_assign_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>trigger_assign_form_submit/7</docrelurl>
            </item>
            <item name= "trigger_assign_form_validate">
              <description>Validation function for trigger_assign_form(). Makes sure that the user is not re-assigning an action to an event.</description>
              <signature>trigger_assign_form_validate($form, $form_state)</signature>
              <docrelurl>trigger_assign_form_validate/7</docrelurl>
            </item>
            <item name= "trigger_comment_delete">
              <description>Implements hook_comment_delete().</description>
              <signature>trigger_comment_delete($comment)</signature>
              <docrelurl>trigger_comment_delete/7</docrelurl>
            </item>
            <item name= "trigger_comment_insert">
              <description>Implements hook_comment_insert().</description>
              <signature>trigger_comment_insert($comment)</signature>
              <docrelurl>trigger_comment_insert/7</docrelurl>
            </item>
            <item name= "trigger_comment_presave">
              <description>Implements hook_comment_presave().</description>
              <signature>trigger_comment_presave($comment)</signature>
              <docrelurl>trigger_comment_presave/7</docrelurl>
            </item>
            <item name= "trigger_comment_update">
              <description>Implements hook_comment_update().</description>
              <signature>trigger_comment_update($comment)</signature>
              <docrelurl>trigger_comment_update/7</docrelurl>
            </item>
            <item name= "trigger_comment_view">
              <description>Implements hook_comment_view().</description>
              <signature>trigger_comment_view($comment)</signature>
              <docrelurl>trigger_comment_view/7</docrelurl>
            </item>
            <item name= "trigger_cron">
              <description>Implements hook_cron().</description>
              <signature>trigger_cron()</signature>
              <docrelurl>trigger_cron/7</docrelurl>
            </item>
            <item name= "trigger_forms">
              <description>Implements hook_forms(). We re-use code by using the same assignment form definition for each hook.</description>
              <signature>trigger_forms()</signature>
              <docrelurl>trigger_forms/7</docrelurl>
            </item>
            <item name= "trigger_get_assigned_actions">
              <description>Gets the action IDs of actions to be executed for a hook.</description>
              <signature>trigger_get_assigned_actions($hook)</signature>
              <docrelurl>trigger_get_assigned_actions/7</docrelurl>
            </item>
            <item name= "trigger_help">
              <description>Implements hook_help().</description>
              <signature>trigger_help($path, $arg)</signature>
              <docrelurl>trigger_help/7</docrelurl>
            </item>
            <item name= "trigger_install">
              <description>Implements hook_install().</description>
              <signature>trigger_install()</signature>
              <docrelurl>trigger_install/7</docrelurl>
            </item>
            <item name= "trigger_menu">
              <description>Implements hook_menu().</description>
              <signature>trigger_menu()</signature>
              <docrelurl>trigger_menu/7</docrelurl>
            </item>
            <item name= "trigger_node_delete">
              <description>Implements hook_node_delete().</description>
              <signature>trigger_node_delete($node)</signature>
              <docrelurl>trigger_node_delete/7</docrelurl>
            </item>
            <item name= "trigger_node_insert">
              <description>Implements hook_node_insert().</description>
              <signature>trigger_node_insert($node)</signature>
              <docrelurl>trigger_node_insert/7</docrelurl>
            </item>
            <item name= "trigger_node_presave">
              <description>Implements hook_node_presave().</description>
              <signature>trigger_node_presave($node)</signature>
              <docrelurl>trigger_node_presave/7</docrelurl>
            </item>
            <item name= "trigger_node_update">
              <description>Implements hook_node_update().</description>
              <signature>trigger_node_update($node)</signature>
              <docrelurl>trigger_node_update/7</docrelurl>
            </item>
            <item name= "trigger_node_view">
              <description>Implements hook_node_view().</description>
              <signature>trigger_node_view($node, $view_mode)</signature>
              <docrelurl>trigger_node_view/7</docrelurl>
            </item>
            <item name= "trigger_schema">
              <description>Implements hook_schema().</description>
              <signature>trigger_schema()</signature>
              <docrelurl>trigger_schema/7</docrelurl>
            </item>
            <item name= "trigger_taxonomy_term_delete">
              <description>Implements hook_taxonomy_term_delete().</description>
              <signature>trigger_taxonomy_term_delete($term)</signature>
              <docrelurl>trigger_taxonomy_term_delete/7</docrelurl>
            </item>
            <item name= "trigger_taxonomy_term_insert">
              <description>Implements hook_taxonomy_term_insert().</description>
              <signature>trigger_taxonomy_term_insert($term)</signature>
              <docrelurl>trigger_taxonomy_term_insert/7</docrelurl>
            </item>
            <item name= "trigger_taxonomy_term_update">
              <description>Implements hook_taxonomy_term_update().</description>
              <signature>trigger_taxonomy_term_update($term)</signature>
              <docrelurl>trigger_taxonomy_term_update/7</docrelurl>
            </item>
            <item name= "trigger_test_action_info">
              <description>Implements hook_action_info().</description>
              <signature>trigger_test_action_info()</signature>
              <docrelurl>trigger_test_action_info/7</docrelurl>
            </item>
            <item name= "trigger_test_generic_action">
              <description>Action fired during the "taxonomy", "comment", and "user" trigger tests.</description>
              <signature>trigger_test_generic_action($context)</signature>
              <docrelurl>trigger_test_generic_action/7</docrelurl>
            </item>
            <item name= "trigger_test_generic_any_action">
              <description>Action fired during the additional trigger tests.</description>
              <signature>trigger_test_generic_any_action($context)</signature>
              <docrelurl>trigger_test_generic_any_action/7</docrelurl>
            </item>
            <item name= "trigger_test_system_cron_action">
              <description>Action fired during the "cron run" trigger test.</description>
              <signature>trigger_test_system_cron_action()</signature>
              <docrelurl>trigger_test_system_cron_action/7</docrelurl>
            </item>
            <item name= "trigger_test_system_cron_conf_action">
              <description>Implement a configurable Drupal action.</description>
              <signature>trigger_test_system_cron_conf_action($object, $context)</signature>
              <docrelurl>trigger_test_system_cron_conf_action/7</docrelurl>
            </item>
            <item name= "trigger_test_system_cron_conf_action_form">
              <description>Form for configurable test action.</description>
              <signature>trigger_test_system_cron_conf_action_form($context)</signature>
              <docrelurl>trigger_test_system_cron_conf_action_form/7</docrelurl>
            </item>
            <item name= "trigger_test_system_cron_conf_action_submit">
              <description>Form submission handler for configurable test action.</description>
              <signature>trigger_test_system_cron_conf_action_submit($form, $form_state)</signature>
              <docrelurl>trigger_test_system_cron_conf_action_submit/7</docrelurl>
            </item>
            <item name= "trigger_test_trigger_info">
              <description>Implements hook_trigger_info().</description>
              <signature>trigger_test_trigger_info()</signature>
              <docrelurl>trigger_test_trigger_info/7</docrelurl>
            </item>
            <item name= "trigger_theme">
              <description>Implements hook_theme().</description>
              <signature>trigger_theme()</signature>
              <docrelurl>trigger_theme/7</docrelurl>
            </item>
            <item name= "trigger_trigger_info">
              <description>Implements hook_trigger_info(). Defines all the triggers that this module implements triggers for.</description>
              <signature>trigger_trigger_info()</signature>
              <docrelurl>trigger_trigger_info/7</docrelurl>
            </item>
            <item name= "trigger_unassign">
              <description>Confirm removal of an assigned action.</description>
              <signature>trigger_unassign($form, $form_state, $module, $hook = NULL, $aid = NULL)</signature>
              <docrelurl>trigger_unassign/7</docrelurl>
            </item>
            <item name= "trigger_unassign_submit">
              <description>Submit callback for trigger_unassign() form.</description>
              <signature>trigger_unassign_submit($form, &amp;$form_state)</signature>
              <docrelurl>trigger_unassign_submit/7</docrelurl>
            </item>
            <item name= "trigger_update_7000">
              <description>Adds operation names to the hook names and drops the "op" field.</description>
              <signature>trigger_update_7000()</signature>
              <docrelurl>trigger_update_7000/7</docrelurl>
            </item>
            <item name= "trigger_user_cancel">
              <description>Implements hook_user_cancel().</description>
              <signature>trigger_user_cancel($edit, $account, $method)</signature>
              <docrelurl>trigger_user_cancel/7</docrelurl>
            </item>
            <item name= "trigger_user_delete">
              <description>Implements hook_user_delete().</description>
              <signature>trigger_user_delete($account)</signature>
              <docrelurl>trigger_user_delete/7</docrelurl>
            </item>
            <item name= "trigger_user_insert">
              <description>Implements hook_user_insert().</description>
              <signature>trigger_user_insert(&amp;$edit, $account, $category)</signature>
              <docrelurl>trigger_user_insert/7</docrelurl>
            </item>
            <item name= "trigger_user_login">
              <description>Implements hook_user_login().</description>
              <signature>trigger_user_login(&amp;$edit, $account, $category)</signature>
              <docrelurl>trigger_user_login/7</docrelurl>
            </item>
            <item name= "trigger_user_logout">
              <description>Implements hook_user_logout().</description>
              <signature>trigger_user_logout($account)</signature>
              <docrelurl>trigger_user_logout/7</docrelurl>
            </item>
            <item name= "trigger_user_presave">
              <description>Implements hook_user_presave().</description>
              <signature>trigger_user_presave(&amp;$edit, $account, $category)</signature>
              <docrelurl>trigger_user_presave/7</docrelurl>
            </item>
            <item name= "trigger_user_update">
              <description>Implements hook_user_update().</description>
              <signature>trigger_user_update(&amp;$edit, $account, $category)</signature>
              <docrelurl>trigger_user_update/7</docrelurl>
            </item>
            <item name= "trigger_user_view">
              <description>Implements hook_user_view().</description>
              <signature>trigger_user_view($account)</signature>
              <docrelurl>trigger_user_view/7</docrelurl>
            </item>
            <item name= "truncate_utf8">
              <description>Truncates a UTF-8-encoded string safely to a number of characters.</description>
              <signature>truncate_utf8($string, $max_length, $wordsafe = FALSE, $add_ellipsis = FALSE, $min_wordsafe_length = 1)</signature>
              <docrelurl>truncate_utf8/7</docrelurl>
            </item>
            <item name= "unicode_check">
              <description>Wrapper around _unicode_check().</description>
              <signature>unicode_check()</signature>
              <docrelurl>unicode_check/7</docrelurl>
            </item>
            <item name= "unicode_requirements">
              <description>Return Unicode library status and errors.</description>
              <signature>unicode_requirements()</signature>
              <docrelurl>unicode_requirements/7</docrelurl>
            </item>
            <item name= "update_access_allowed">
              <description>Determines if the current user is allowed to run update.php.</description>
              <signature>update_access_allowed()</signature>
              <docrelurl>update_access_allowed/7</docrelurl>
            </item>
            <item name= "update_access_denied_page">
              <description>Code ./update.php, line 242</description>
              <signature>update_access_denied_page()</signature>
              <docrelurl>update_access_denied_page/7</docrelurl>
            </item>
            <item name= "update_already_performed">
              <description>Determines if a module update has already been performed.</description>
              <signature>update_already_performed($module, $number)</signature>
              <docrelurl>update_already_performed/7</docrelurl>
            </item>
            <item name= "update_authorize_batch_copy_project">
              <description>Copy a project to its proper place when authorized with elevated privileges.</description>
              <signature>update_authorize_batch_copy_project($project, $updater_name, $local_url, $filetransfer, &amp;$context)</signature>
              <docrelurl>update_authorize_batch_copy_project/7</docrelurl>
            </item>
            <item name= "update_authorize_install_batch_finished">
              <description>Batch callback for when the authorized install batch is finished. This processes the results and stashes them into SESSION such that authorize.php will render a report. Also responsible for putting the site back online after a successful install if necessary.</description>
              <signature>update_authorize_install_batch_finished($success, $results)</signature>
              <docrelurl>update_authorize_install_batch_finished/7</docrelurl>
            </item>
            <item name= "update_authorize_run_install">
              <description>Callback invoked by authorize.php to install a new project.</description>
              <signature>update_authorize_run_install($filetransfer, $project, $updater_name, $local_url)</signature>
              <docrelurl>update_authorize_run_install/7</docrelurl>
            </item>
            <item name= "update_authorize_run_update">
              <description>Callback invoked by authorize.php to update existing projects.</description>
              <signature>update_authorize_run_update($filetransfer, $projects)</signature>
              <docrelurl>update_authorize_run_update/7</docrelurl>
            </item>
            <item name= "update_authorize_update_batch_finished">
              <description>Batch callback for when the authorized update batch is finished. This processes the results and stashes them into SESSION such that authorize.php will render a report. Also responsible for putting the site back online and clearing the update status cache after a successful update.</description>
              <signature>update_authorize_update_batch_finished($success, $results)</signature>
              <docrelurl>update_authorize_update_batch_finished/7</docrelurl>
            </item>
            <item name= "update_batch">
              <description>Start the database update batch process.</description>
              <signature>update_batch($start, $redirect = NULL, $url = NULL, $batch = array(), $redirect_callback = 'drupal_goto')</signature>
              <docrelurl>update_batch/7</docrelurl>
            </item>
            <item name= "update_build_dependency_graph">
              <description>Constructs a graph which encodes the dependencies between module updates. This function returns an associative array which contains a "directed graph" representation of the dependencies between a provided list of update functions, as well as any outside update functions that they directly depend on but that were not in the provided list. The vertices of the graph represent the update functions themselves, and each edge represents a requirement that the first update function needs to run before the second. For example, consider this graph:</description>
              <signature>update_build_dependency_graph($update_functions)</signature>
              <docrelurl>update_build_dependency_graph/7</docrelurl>
            </item>
            <item name= "update_cache_clear_submit">
              <description>Helper function for use as a form submit callback.</description>
              <signature>update_cache_clear_submit($form, &amp;$form_state)</signature>
              <docrelurl>update_cache_clear_submit/7</docrelurl>
            </item>
            <item name= "update_calculate_project_data">
              <description>Calculate the current update status of all projects on the site. The results of this function are expensive to compute, especially on sites with lots of modules or themes, since it involves a lot of comparisons and other operations. Therefore, we cache the results into the {cache_update} table using the 'update_project_data' cache ID. However, since this is not the data about available updates fetched from the network, it is ok to invalidate it somewhat quickly. If we keep this data for very long, site administrators are more likely to see incorrect results if they upgrade to a newer version of a module or theme but do not visit certain pages that automatically clear this cache.</description>
              <signature>update_calculate_project_data($available)</signature>
              <docrelurl>update_calculate_project_data/7</docrelurl>
            </item>
            <item name= "update_calculate_project_update_status">
              <description>Calculate the current update status of a specific project. This function is the heart of the update status feature. For each project it is invoked with, it first checks if the project has been flagged with a special status like "unsupported" or "insecure", or if the project node itself has been unpublished. In any of those cases, the project is marked with an error and the next project is considered.</description>
              <signature>update_calculate_project_update_status($project, &amp;$project_data, $available)</signature>
              <docrelurl>update_calculate_project_update_status/7</docrelurl>
            </item>
            <item name= "update_check_incompatibility">
              <description>Helper function to test compatibility of a module or theme.</description>
              <signature>update_check_incompatibility($name, $type = 'module')</signature>
              <docrelurl>update_check_incompatibility/7</docrelurl>
            </item>
            <item name= "update_check_requirements">
              <description>Check update requirements and report any errors.</description>
              <signature>update_check_requirements()</signature>
              <docrelurl>update_check_requirements/7</docrelurl>
            </item>
            <item name= "update_create_fetch_task">
              <description>Wrapper to load the include file and then create a new fetch task.</description>
              <signature>update_create_fetch_task($project)</signature>
              <docrelurl>update_create_fetch_task/7</docrelurl>
            </item>
            <item name= "update_cron">
              <description>Implements hook_cron().</description>
              <signature>update_cron()</signature>
              <docrelurl>update_cron/7</docrelurl>
            </item>
            <item name= "update_do_one">
              <description>Perform one update and store the results for display on finished page. If an update function completes successfully, it should return a message as a string indicating success, for example:</description>
              <signature>update_do_one($module, $number, $dependency_map, &amp;$context)</signature>
              <docrelurl>update_do_one/7</docrelurl>
            </item>
            <item name= "update_extra_requirements">
              <description>Returns (and optionally stores) extra requirements that only apply during particular parts of the update.php process.</description>
              <signature>update_extra_requirements($requirements = NULL)</signature>
              <docrelurl>update_extra_requirements/7</docrelurl>
            </item>
            <item name= "update_fetch_data">
              <description>Wrapper to load the include file and then attempt to fetch update data.</description>
              <signature>update_fetch_data()</signature>
              <docrelurl>update_fetch_data/7</docrelurl>
            </item>
            <item name= "update_fetch_data_batch">
              <description>Process a step in the batch for fetching available update data.</description>
              <signature>update_fetch_data_batch(&amp;$context)</signature>
              <docrelurl>update_fetch_data_batch/7</docrelurl>
            </item>
            <item name= "update_fetch_data_finished">
              <description>Batch API callback when all fetch tasks have been completed.</description>
              <signature>update_fetch_data_finished($success, $results)</signature>
              <docrelurl>update_fetch_data_finished/7</docrelurl>
            </item>
            <item name= "update_filter_project_info">
              <description>Filter the project .info data to only save attributes we need.</description>
              <signature>update_filter_project_info($info)</signature>
              <docrelurl>update_filter_project_info/7</docrelurl>
            </item>
            <item name= "update_finished">
              <description>Finish the update process and store results for eventual display. After the updates run, all caches are flushed. The update results are stored into the session (for example, to be displayed on the update results page in update.php). Additionally, if the site was off-line, now that the update process is completed, the site is set back online.</description>
              <signature>update_finished($success, $results, $operations)</signature>
              <docrelurl>update_finished/7</docrelurl>
            </item>
            <item name= "update_fix_compatibility">
              <description>Disable any items in the {system} table that are not core compatible.</description>
              <signature>update_fix_compatibility()</signature>
              <docrelurl>update_fix_compatibility/7</docrelurl>
            </item>
            <item name= "update_fix_d7_block_deltas">
              <description>A helper function that modules can use to assist with the transformation from numeric block deltas to string block deltas during the 6.x -> 7.x upgrade. @todo This function should be removed in 8.x.</description>
              <signature>update_fix_d7_block_deltas(&amp;$sandbox, $renamed_deltas)</signature>
              <docrelurl>update_fix_d7_block_deltas/7</docrelurl>
            </item>
            <item name= "update_fix_d7_install_profile">
              <description>Register the currently installed profile in the system table. Install profiles are now treated as modules by Drupal, and have an upgrade path based on their schema version in the system table.</description>
              <signature>update_fix_d7_install_profile()</signature>
              <docrelurl>update_fix_d7_install_profile/7</docrelurl>
            </item>
            <item name= "update_fix_d7_requirements">
              <description>Perform Drupal 6.x to 7.x updates that are required for update.php to function properly. This function runs when update.php is run the first time for 7.x, even before updates are selected or performed. It is important that if updates are not ultimately performed that no changes are made which make it impossible to continue using the prior version.</description>
              <signature>update_fix_d7_requirements()</signature>
              <docrelurl>update_fix_d7_requirements/7</docrelurl>
            </item>
            <item name= "update_flush_caches">
              <description>Implements hook_flush_caches(). Called from update.php (among others) to flush the caches. Since we're running update.php, we are likely to install a new version of something, in which case, we want to check for available update data again. However, because we have our own caching system, we need to directly clear the database table ourselves at this point and return nothing, for example, on sites that use memcache where cache_clear_all() won't know how to purge this data.</description>
              <signature>update_flush_caches()</signature>
              <docrelurl>update_flush_caches/7</docrelurl>
            </item>
            <item name= "update_form_system_modules_alter">
              <description>Implements hook_form_FORM_ID_alter(). Adds a submit handler to the system modules form, so that if a site admin saves the form, we invalidate the cache of available updates.</description>
              <signature>update_form_system_modules_alter(&amp;$form, $form_state)</signature>
              <docrelurl>update_form_system_modules_alter/7</docrelurl>
            </item>
            <item name= "update_get_available">
              <description>Internal helper to try to get the update information from the cache if possible, and to refresh the cache when necessary. In addition to checking the cache lifetime, this function also ensures that there are no .info files for enabled modules or themes that have a newer modification timestamp than the last time we checked for available update data. If any .info file was modified, it almost certainly means a new version of something was installed. Without fresh available update data, the logic in update_calculate_project_data() will be wrong and produce confusing, bogus results.</description>
              <signature>update_get_available($refresh = FALSE)</signature>
              <docrelurl>update_get_available/7</docrelurl>
            </item>
            <item name= "update_get_projects">
              <description>Fetch an array of installed and enabled projects. This is only responsible for generating an array of projects (taking into account projects that include more than one module or theme). Other information like the specific version and install type (official release, dev snapshot, etc) is handled later in update_process_project_info() since that logic is only required when preparing the status report, not for fetching the available release data.</description>
              <signature>update_get_projects()</signature>
              <docrelurl>update_get_projects/7</docrelurl>
            </item>
            <item name= "update_get_project_name">
              <description>Given a $file object (as returned by system_get_files_database()), figure out what project it belongs to.</description>
              <signature>update_get_project_name($file)</signature>
              <docrelurl>update_get_project_name/7</docrelurl>
            </item>
            <item name= "update_get_update_function_list">
              <description>Returns an organized list of update functions for a set of modules.</description>
              <signature>update_get_update_function_list($starting_updates)</signature>
              <docrelurl>update_get_update_function_list/7</docrelurl>
            </item>
            <item name= "update_get_update_list">
              <description>Return a list of all the pending database updates.</description>
              <signature>update_get_update_list()</signature>
              <docrelurl>update_get_update_list/7</docrelurl>
            </item>
            <item name= "update_help">
              <description>Implements hook_help().</description>
              <signature>update_help($path, $arg)</signature>
              <docrelurl>update_help/7</docrelurl>
            </item>
            <item name= "update_helpful_links">
              <description>
                ▸ 2 functions call update_helpful_links()
                ▾ 2 functions call update_helpful_links()
                update_results_page in ./update.php
                update_script_selection_form in ./update.php
              </description>
              <signature>update_helpful_links()</signature>
              <docrelurl>update_helpful_links/7</docrelurl>
            </item>
            <item name= "update_info_page">
              <description>Code ./update.php, line 218</description>
              <signature>update_info_page()</signature>
              <docrelurl>update_info_page/7</docrelurl>
            </item>
            <item name= "update_install">
              <description>Implements hook_install().</description>
              <signature>update_install()</signature>
              <docrelurl>update_install/7</docrelurl>
            </item>
            <item name= "update_is_missing">
              <description>Determines if a module update is missing or unavailable.</description>
              <signature>update_is_missing($module, $number, $update_functions)</signature>
              <docrelurl>update_is_missing/7</docrelurl>
            </item>
            <item name= "update_mail">
              <description>Implements hook_mail(). Constructs the email notification message when the site is out of date.</description>
              <signature>update_mail($key, &amp;$message, $params)</signature>
              <docrelurl>update_mail/7</docrelurl>
            </item>
            <item name= "update_manager_access">
              <description>Determine if the current user can access the updater menu items. This is used as a menu system access callback. It both enforces the 'administer software updates' permission and the global killswitch for the authorize.php script.</description>
              <signature>update_manager_access()</signature>
              <docrelurl>update_manager_access/7</docrelurl>
            </item>
            <item name= "update_manager_archive_extract">
              <description>Unpack a downloaded archive file.</description>
              <signature>update_manager_archive_extract($file, $directory)</signature>
              <docrelurl>update_manager_archive_extract/7</docrelurl>
            </item>
            <item name= "update_manager_archive_verify">
              <description>Verify an archive after it has been downloaded and extracted. This function is responsible for invoking hook_verify_update_archive().</description>
              <signature>update_manager_archive_verify($project, $archive_file, $directory)</signature>
              <docrelurl>update_manager_archive_verify/7</docrelurl>
            </item>
            <item name= "update_manager_batch_project_get">
              <description>Batch operation: download, unpack, and verify a project. This function assumes that the provided URL points to a file archive of some sort. The URL can have any scheme that we have a file stream wrapper to support. The file is downloaded to a local cache.</description>
              <signature>update_manager_batch_project_get($project, $url, &amp;$context)</signature>
              <docrelurl>update_manager_batch_project_get/7</docrelurl>
            </item>
            <item name= "update_manager_download_batch_finished">
              <description>Batch callback invoked when the download batch is completed.</description>
              <signature>update_manager_download_batch_finished($success, $results)</signature>
              <docrelurl>update_manager_download_batch_finished/7</docrelurl>
            </item>
            <item name= "update_manager_file_get">
              <description>Copies a file from $url to the temporary directory for updates. If the file has already been downloaded, returns the the local path.</description>
              <signature>update_manager_file_get($url)</signature>
              <docrelurl>update_manager_file_get/7</docrelurl>
            </item>
            <item name= "update_manager_install_form">
              <description>Build the form for the update manager page to install new projects. This presents a place to enter a URL or upload an archive file to use to install a new module or theme.</description>
              <signature>update_manager_install_form($form, &amp;$form_state, $context)</signature>
              <docrelurl>update_manager_install_form/7</docrelurl>
            </item>
            <item name= "update_manager_install_form_submit">
              <description>Handle form submission when installing new projects via the update manager. Either downloads the file specified in the URL to a temporary cache, or uploads the file attached to the form, then attempts to extract the archive into a temporary location and verify it. Instantiate the appropriate Updater class for this project and make sure it is not already installed in the live webroot. If everything is successful, setup an operation to run via authorize.php which will copy the extracted files from the temporary location into the live site.</description>
              <signature>update_manager_install_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_install_form_submit/7</docrelurl>
            </item>
            <item name= "update_manager_install_form_validate">
              <description>Validate the form for installing a new project via the update manager.</description>
              <signature>update_manager_install_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_install_form_validate/7</docrelurl>
            </item>
            <item name= "update_manager_update_form">
              <description>Build the form for the update manager page to update existing projects. This presents a table with all projects that have available updates with checkboxes to select which ones to upgrade.</description>
              <signature>update_manager_update_form($form, $form_state = array(), $context)</signature>
              <docrelurl>update_manager_update_form/7</docrelurl>
            </item>
            <item name= "update_manager_update_form_submit">
              <description>Submit function for the main update form. This sets up a batch to download, extract and verify the selected releases</description>
              <signature>update_manager_update_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_update_form_submit/7</docrelurl>
            </item>
            <item name= "update_manager_update_form_validate">
              <description>Validation callback to ensure that at least one project is selected.</description>
              <signature>update_manager_update_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_update_form_validate/7</docrelurl>
            </item>
            <item name= "update_manager_update_ready_form">
              <description>Build the form when the site is ready to update (after downloading). This form is an intermediary step in the automated update workflow. It is presented to the site administrator after all the required updates have been downloaded and verified. The point of this page is to encourage the user to backup their site, gives them the opportunity to put the site offline, and then asks them to confirm that the update should continue. After this step, the user is redirected to authorize.php to enter their file transfer credentials and attempt to complete the update.</description>
              <signature>update_manager_update_ready_form($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_update_ready_form/7</docrelurl>
            </item>
            <item name= "update_manager_update_ready_form_submit">
              <description>Submit handler for the form to confirm that an update should continue. If the site administrator requested that the site is put offline during the update, do so now. Otherwise, pull information about all the required updates out of the SESSION, figure out what Updater class is needed for each one, generate an array of update operations to perform, and hand it all off to system_authorized_init(), then redirect to authorize.php.</description>
              <signature>update_manager_update_ready_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>update_manager_update_ready_form_submit/7</docrelurl>
            </item>
            <item name= "update_manual_status">
              <description>Callback to manually check the update status without cron.</description>
              <signature>update_manual_status()</signature>
              <docrelurl>update_manual_status/7</docrelurl>
            </item>
            <item name= "update_menu">
              <description>Implements hook_menu().</description>
              <signature>update_menu()</signature>
              <docrelurl>update_menu/7</docrelurl>
            </item>
            <item name= "update_parse_db_url">
              <description>Parse pre-Drupal 7 database connection URLs and return D7 compatible array.</description>
              <signature>update_parse_db_url($db_url)</signature>
              <docrelurl>update_parse_db_url/7</docrelurl>
            </item>
            <item name= "update_parse_xml">
              <description>Parse the XML of the Drupal release history info files.</description>
              <signature>update_parse_xml($raw_xml)</signature>
              <docrelurl>update_parse_xml/7</docrelurl>
            </item>
            <item name= "update_prepare_d7_bootstrap">
              <description>Performs extra steps required to bootstrap when using a Drupal 6 database. Users who still have a Drupal 6 database (and are in the process of updating to Drupal 7) need extra help before a full bootstrap can be achieved. This function does the necessary preliminary work that allows the bootstrap to be successful.</description>
              <signature>update_prepare_d7_bootstrap()</signature>
              <docrelurl>update_prepare_d7_bootstrap/7</docrelurl>
            </item>
            <item name= "update_process_project_info">
              <description>Process the list of projects on the system to figure out the currently installed versions, and other information that is required before we can compare against the available releases to produce the status report.</description>
              <signature>update_process_project_info(&amp;$projects)</signature>
              <docrelurl>update_process_project_info/7</docrelurl>
            </item>
            <item name= "update_project_cache">
              <description>Retrieve data from {cache_update} or empty the cache when necessary. Two very expensive arrays computed by this module are the list of all installed modules and themes (and .info data, project associations, etc), and the current status of the site relative to the currently available releases. These two arrays are cached in the {cache_update} table and used whenever possible. The cache is cleared whenever the administrator visits the status report, available updates report, or the module or theme administration pages, since we should always recompute the most current values on any of those pages.</description>
              <signature>update_project_cache($cid)</signature>
              <docrelurl>update_project_cache/7</docrelurl>
            </item>
            <item name= "update_refresh">
              <description>Wrapper to load the include file and then refresh the release data.</description>
              <signature>update_refresh()</signature>
              <docrelurl>update_refresh/7</docrelurl>
            </item>
            <item name= "update_requirements">
              <description>Implements hook_requirements().</description>
              <signature>update_requirements($phase)</signature>
              <docrelurl>update_requirements/7</docrelurl>
            </item>
            <item name= "update_resolve_dependencies">
              <description>Resolves dependencies in a set of module updates, and orders them correctly. This function receives a list of requested module updates and determines an appropriate order to run them in such that all update dependencies are met. Any updates whose dependencies cannot be met are included in the returned array but have the key 'allowed' set to FALSE; the calling function should take responsibility for ensuring that these updates are ultimately not performed.</description>
              <signature>update_resolve_dependencies($starting_updates)</signature>
              <docrelurl>update_resolve_dependencies/7</docrelurl>
            </item>
            <item name= "update_results_page">
              <description>Code ./update.php, line 149</description>
              <signature>update_results_page()</signature>
              <docrelurl>update_results_page/7</docrelurl>
            </item>
            <item name= "update_retrieve_dependencies">
              <description>Invoke hook_update_dependencies() in all installed modules. This function is similar to module_invoke_all(), with the main difference that it does not require that a module be enabled to invoke its hook, only that it be installed. This allows the update system to properly perform updates even on modules that are currently disabled.</description>
              <signature>update_retrieve_dependencies()</signature>
              <docrelurl>update_retrieve_dependencies/7</docrelurl>
            </item>
            <item name= "update_schema">
              <description>Implements hook_schema().</description>
              <signature>update_schema()</signature>
              <docrelurl>update_schema/7</docrelurl>
            </item>
            <item name= "update_script_selection_form">
              <description>Code ./update.php, line 41</description>
              <signature>update_script_selection_form($form, &amp;$form_state)</signature>
              <docrelurl>update_script_selection_form/7</docrelurl>
            </item>
            <item name= "update_selection_page">
              <description>Code ./update.php, line 31</description>
              <signature>update_selection_page()</signature>
              <docrelurl>update_selection_page/7</docrelurl>
            </item>
            <item name= "update_settings">
              <description>Form builder for the update settings tab.</description>
              <signature>update_settings($form)</signature>
              <docrelurl>update_settings/7</docrelurl>
            </item>
            <item name= "update_settings_submit">
              <description>Submit handler for the settings tab. Also invalidates the cache of available updates if the "Check for updates of disabled modules and themes" setting is being changed. The available updates report need to refetch available update data after this setting changes or it would show misleading things (e.g. listing the disabled projects on the site with the "No available releases found" warning).</description>
              <signature>update_settings_submit($form, $form_state)</signature>
              <docrelurl>update_settings_submit/7</docrelurl>
            </item>
            <item name= "update_settings_validate">
              <description>Validation callback for the settings form. Validates the email addresses and ensures the field is formatted correctly.</description>
              <signature>update_settings_validate($form, &amp;$form_state)</signature>
              <docrelurl>update_settings_validate/7</docrelurl>
            </item>
            <item name= "update_status">
              <description>Menu callback. Generate a page about the update status of projects.</description>
              <signature>update_status()</signature>
              <docrelurl>update_status/7</docrelurl>
            </item>
            <item name= "update_task_list">
              <description>Add the update task list to the current page.</description>
              <signature>update_task_list($active = NULL)</signature>
              <docrelurl>update_task_list/7</docrelurl>
            </item>
            <item name= "update_test_1_update_7000">
              <description>Dummy update_test_1 update 7000.</description>
              <signature>update_test_1_update_7000()</signature>
              <docrelurl>update_test_1_update_7000/7</docrelurl>
            </item>
            <item name= "update_test_1_update_7001">
              <description>Dummy update_test_1 update 7001.</description>
              <signature>update_test_1_update_7001()</signature>
              <docrelurl>update_test_1_update_7001/7</docrelurl>
            </item>
            <item name= "update_test_1_update_7002">
              <description>Dummy update_test_1 update 7002.</description>
              <signature>update_test_1_update_7002()</signature>
              <docrelurl>update_test_1_update_7002/7</docrelurl>
            </item>
            <item name= "update_test_1_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>update_test_1_update_dependencies()</signature>
              <docrelurl>update_test_1_update_dependencies/7</docrelurl>
            </item>
            <item name= "update_test_2_update_7000">
              <description>Dummy update_test_2 update 7000.</description>
              <signature>update_test_2_update_7000()</signature>
              <docrelurl>update_test_2_update_7000/7</docrelurl>
            </item>
            <item name= "update_test_2_update_7001">
              <description>Dummy update_test_2 update 7001.</description>
              <signature>update_test_2_update_7001()</signature>
              <docrelurl>update_test_2_update_7001/7</docrelurl>
            </item>
            <item name= "update_test_2_update_7002">
              <description>Dummy update_test_2 update 7002.</description>
              <signature>update_test_2_update_7002()</signature>
              <docrelurl>update_test_2_update_7002/7</docrelurl>
            </item>
            <item name= "update_test_2_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>update_test_2_update_dependencies()</signature>
              <docrelurl>update_test_2_update_dependencies/7</docrelurl>
            </item>
            <item name= "update_test_3_update_7000">
              <description>Dummy update_test_3 update 7000.</description>
              <signature>update_test_3_update_7000()</signature>
              <docrelurl>update_test_3_update_7000/7</docrelurl>
            </item>
            <item name= "update_test_3_update_dependencies">
              <description>Implements hook_update_dependencies().</description>
              <signature>update_test_3_update_dependencies()</signature>
              <docrelurl>update_test_3_update_dependencies/7</docrelurl>
            </item>
            <item name= "update_test_menu">
              <description>Implements hook_menu().</description>
              <signature>update_test_menu()</signature>
              <docrelurl>update_test_menu/7</docrelurl>
            </item>
            <item name= "update_test_mock_page">
              <description>Page callback, prints mock XML for the update module. The specific XML file to print depends on two things: the project we're trying to fetch data for, and the desired "availability scenario" for that project which we're trying to test. Before attempting to fetch this data (by checking for updates on the available updates report), callers need to define the 'update_test_xml_map' variable as an array, keyed by project name, indicating which availability scenario to use for that project.</description>
              <signature>update_test_mock_page($project_name)</signature>
              <docrelurl>update_test_mock_page/7</docrelurl>
            </item>
            <item name= "update_test_system_info_alter">
              <description>Implements hook_system_info_alter(). This checks the 'update_test_system_info' variable and sees if we need to alter the system info for the given $file based on the setting. The setting is expected to be a nested associative array. If the key '#all' is defined, its subarray will include .info keys and values for all modules and themes on the system. Otherwise, the settings array is keyed by the module or theme short name ($file->name) and the subarrays contain settings just for that module or theme.</description>
              <signature>update_test_system_info_alter(&amp;$info, $file)</signature>
              <docrelurl>update_test_system_info_alter/7</docrelurl>
            </item>
            <item name= "update_theme">
              <description>Implements hook_theme().</description>
              <signature>update_theme()</signature>
              <docrelurl>update_theme/7</docrelurl>
            </item>
            <item name= "update_themes_disabled">
              <description>Implements hook_themes_disabled(). If themes are disabled, we invalidate the cache of available updates.</description>
              <signature>update_themes_disabled($themes)</signature>
              <docrelurl>update_themes_disabled/7</docrelurl>
            </item>
            <item name= "update_themes_enabled">
              <description>Implements hook_themes_enabled(). If themes are enabled, we invalidate the cache of available updates.</description>
              <signature>update_themes_enabled($themes)</signature>
              <docrelurl>update_themes_enabled/7</docrelurl>
            </item>
            <item name= "update_uninstall">
              <description>Implements hook_uninstall().</description>
              <signature>update_uninstall()</signature>
              <docrelurl>update_uninstall/7</docrelurl>
            </item>
            <item name= "update_update_7000">
              <description>Create a queue to store tasks for requests to fetch available update data.</description>
              <signature>update_update_7000()</signature>
              <docrelurl>update_update_7000/7</docrelurl>
            </item>
            <item name= "update_update_7001">
              <description>Remove {cache_update}.headers column.</description>
              <signature>update_update_7001()</signature>
              <docrelurl>update_update_7001/7</docrelurl>
            </item>
            <item name= "url">
              <description>Generates an internal or external URL. When creating links in modules, consider whether l() could be a better alternative than url().</description>
              <signature>url($path = NULL, array $options = array())</signature>
              <docrelurl>url/7</docrelurl>
            </item>
            <item name= "url_alter_test_foo">
              <description>Menu callback.</description>
              <signature>url_alter_test_foo()</signature>
              <docrelurl>url_alter_test_foo/7</docrelurl>
            </item>
            <item name= "url_alter_test_install">
              <description>Impelement hook_install().</description>
              <signature>url_alter_test_install()</signature>
              <docrelurl>url_alter_test_install/7</docrelurl>
            </item>
            <item name= "url_alter_test_menu">
              <description>Implements hook_menu().</description>
              <signature>url_alter_test_menu()</signature>
              <docrelurl>url_alter_test_menu/7</docrelurl>
            </item>
            <item name= "url_alter_test_url_inbound_alter">
              <description>Implements hook_url_inbound_alter().</description>
              <signature>url_alter_test_url_inbound_alter(&amp;$path, $original_path, $path_language)</signature>
              <docrelurl>url_alter_test_url_inbound_alter/7</docrelurl>
            </item>
            <item name= "url_alter_test_url_outbound_alter">
              <description>Implements hook_url_outbound_alter().</description>
              <signature>url_alter_test_url_outbound_alter(&amp;$path, &amp;$options, $original_path)</signature>
              <docrelurl>url_alter_test_url_outbound_alter/7</docrelurl>
            </item>
            <item name= "url_is_external">
              <description>Return TRUE if a path is external to Drupal (e.g. http://example.com). If a path cannot be assessed by Drupal's menu handler, then we must treat it as potentially insecure.</description>
              <signature>url_is_external($path)</signature>
              <docrelurl>url_is_external/7</docrelurl>
            </item>
            <item name= "user_access">
              <description>Determine whether the user has a given privilege.</description>
              <signature>user_access($string, $account = NULL)</signature>
              <docrelurl>user_access/7</docrelurl>
            </item>
            <item name= "user_account_form">
              <description>Helper function to add default user account fields to user registration and edit form.</description>
              <signature>user_account_form(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>user_account_form/7</docrelurl>
            </item>
            <item name= "user_account_form_validate">
              <description>Form validation handler for user_account_form().</description>
              <signature>user_account_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_account_form_validate/7</docrelurl>
            </item>
            <item name= "user_action_info">
              <description>Implements hook_action_info().</description>
              <signature>user_action_info()</signature>
              <docrelurl>user_action_info/7</docrelurl>
            </item>
            <item name= "user_admin">
              <description>Code modules/user/user.admin.inc, line 9</description>
              <signature>user_admin($callback_arg = '')</signature>
              <docrelurl>user_admin/7</docrelurl>
            </item>
            <item name= "user_admin_account">
              <description>Form builder; User administration page.</description>
              <signature>user_admin_account()</signature>
              <docrelurl>user_admin_account/7</docrelurl>
            </item>
            <item name= "user_admin_account_submit">
              <description>Submit the user administration update form.</description>
              <signature>user_admin_account_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_account_submit/7</docrelurl>
            </item>
            <item name= "user_admin_account_validate">
              <description>Code modules/user/user.admin.inc, line 244</description>
              <signature>user_admin_account_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_account_validate/7</docrelurl>
            </item>
            <item name= "user_admin_permissions">
              <description>Menu callback: administer permissions.</description>
              <signature>user_admin_permissions($form, $form_state, $rid = NULL)</signature>
              <docrelurl>user_admin_permissions/7</docrelurl>
            </item>
            <item name= "user_admin_permissions_submit">
              <description>Save permissions selected on the administer permissions page.</description>
              <signature>user_admin_permissions_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_permissions_submit/7</docrelurl>
            </item>
            <item name= "user_admin_role">
              <description>Form to configure a single role.</description>
              <signature>user_admin_role($form, $form_state, $role)</signature>
              <docrelurl>user_admin_role/7</docrelurl>
            </item>
            <item name= "user_admin_roles">
              <description>Form to re-order roles or add a new one.</description>
              <signature>user_admin_roles($form, $form_state)</signature>
              <docrelurl>user_admin_roles/7</docrelurl>
            </item>
            <item name= "user_admin_roles_order_submit">
              <description>Form submit function. Update the role weights.</description>
              <signature>user_admin_roles_order_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_roles_order_submit/7</docrelurl>
            </item>
            <item name= "user_admin_role_delete_confirm">
              <description>Form to confirm role delete operation.</description>
              <signature>user_admin_role_delete_confirm($form, &amp;$form_state, $role)</signature>
              <docrelurl>user_admin_role_delete_confirm/7</docrelurl>
            </item>
            <item name= "user_admin_role_delete_confirm_submit">
              <description>Form submit handler for user_admin_role_delete_confirm().</description>
              <signature>user_admin_role_delete_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_role_delete_confirm_submit/7</docrelurl>
            </item>
            <item name= "user_admin_role_delete_submit">
              <description>Form submit handler for the user_admin_role() form.</description>
              <signature>user_admin_role_delete_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_role_delete_submit/7</docrelurl>
            </item>
            <item name= "user_admin_role_submit">
              <description>Form submit handler for the user_admin_role() form.</description>
              <signature>user_admin_role_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_role_submit/7</docrelurl>
            </item>
            <item name= "user_admin_role_validate">
              <description>Form validation handler for the user_admin_role() form.</description>
              <signature>user_admin_role_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_admin_role_validate/7</docrelurl>
            </item>
            <item name= "user_admin_settings">
              <description>Form builder; Configure user settings for this site.</description>
              <signature>user_admin_settings()</signature>
              <docrelurl>user_admin_settings/7</docrelurl>
            </item>
            <item name= "user_authenticate">
              <description>Try to validate the user's login credentials locally.</description>
              <signature>user_authenticate($name, $password)</signature>
              <docrelurl>user_authenticate/7</docrelurl>
            </item>
            <item name= "user_autocomplete">
              <description>Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing users.</description>
              <signature>user_autocomplete($string = '')</signature>
              <docrelurl>user_autocomplete/7</docrelurl>
            </item>
            <item name= "user_block_configure">
              <description>Implements hook_block_configure().</description>
              <signature>user_block_configure($delta = '')</signature>
              <docrelurl>user_block_configure/7</docrelurl>
            </item>
            <item name= "user_block_info">
              <description>Implements hook_block_info().</description>
              <signature>user_block_info()</signature>
              <docrelurl>user_block_info/7</docrelurl>
            </item>
            <item name= "user_block_save">
              <description>Implements hook_block_save().</description>
              <signature>user_block_save($delta = '', $edit = array())</signature>
              <docrelurl>user_block_save/7</docrelurl>
            </item>
            <item name= "user_block_user_action">
              <description>Blocks the current user.</description>
              <signature>user_block_user_action(&amp;$entity, $context = array())</signature>
              <docrelurl>user_block_user_action/7</docrelurl>
            </item>
            <item name= "user_block_view">
              <description>Implements hook_block_view().</description>
              <signature>user_block_view($delta = '')</signature>
              <docrelurl>user_block_view/7</docrelurl>
            </item>
            <item name= "user_build_content">
              <description>Builds a structured array representing the profile content.</description>
              <signature>user_build_content($account, $view_mode = 'full')</signature>
              <docrelurl>user_build_content/7</docrelurl>
            </item>
            <item name= "user_build_filter_query">
              <description>Extends a query object for user administration filters based on session.</description>
              <signature>user_build_filter_query(SelectQuery $query)</signature>
              <docrelurl>user_build_filter_query/7</docrelurl>
            </item>
            <item name= "user_cancel">
              <description>Cancel a user account. Since the user cancellation process needs to be run in a batch, either Form API will invoke it, or batch_process() needs to be invoked after calling this function and should define the path to redirect to.</description>
              <signature>user_cancel($edit, $uid, $method)</signature>
              <docrelurl>user_cancel/7</docrelurl>
            </item>
            <item name= "user_cancel_access">
              <description>Menu access callback; limit access to account cancellation pages. Limit access to users with the 'cancel account' permission or administrative users, and prevent the anonymous user from cancelling the account.</description>
              <signature>user_cancel_access($account)</signature>
              <docrelurl>user_cancel_access/7</docrelurl>
            </item>
            <item name= "user_cancel_confirm">
              <description>Menu callback; Cancel a user account via e-mail confirmation link.</description>
              <signature>user_cancel_confirm($account, $timestamp = 0, $hashed_pass = '')</signature>
              <docrelurl>user_cancel_confirm/7</docrelurl>
            </item>
            <item name= "user_cancel_confirm_form">
              <description>Form builder; confirm form for cancelling user account.</description>
              <signature>user_cancel_confirm_form($form, &amp;$form_state, $account)</signature>
              <docrelurl>user_cancel_confirm_form/7</docrelurl>
            </item>
            <item name= "user_cancel_confirm_form_submit">
              <description>Submit handler for the account cancellation confirm form.</description>
              <signature>user_cancel_confirm_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_cancel_confirm_form_submit/7</docrelurl>
            </item>
            <item name= "user_cancel_methods">
              <description>Helper function to return available account cancellation methods. Please refer to the documentation of hook_user_cancel_methods_alter().</description>
              <signature>user_cancel_methods()</signature>
              <docrelurl>user_cancel_methods/7</docrelurl>
            </item>
            <item name= "user_cancel_url">
              <description>Generate a URL to confirm an account cancellation request.</description>
              <signature>user_cancel_url($account)</signature>
              <docrelurl>user_cancel_url/7</docrelurl>
            </item>
            <item name= "user_category_load">
              <description>Return a user object after checking if any profile category in the path exists.</description>
              <signature>user_category_load($uid, &amp;$map, $index)</signature>
              <docrelurl>user_category_load/7</docrelurl>
            </item>
            <item name= "user_check_password">
              <description>Check whether a plain text password matches a stored hashed password. Alternative implementations of this function may use other data in the $account object, for example the uid to look up the hash in a custom table or remote database.</description>
              <signature>user_check_password($password, $account)</signature>
              <docrelurl>user_check_password/7</docrelurl>
            </item>
            <item name= "user_comment_view">
              <description>Implements hook_comment_view().</description>
              <signature>user_comment_view($comment)</signature>
              <docrelurl>user_comment_view/7</docrelurl>
            </item>
            <item name= "user_cookie_delete">
              <description>Delete a visitor information cookie.</description>
              <signature>user_cookie_delete($cookie_name)</signature>
              <docrelurl>user_cookie_delete/7</docrelurl>
            </item>
            <item name= "user_cookie_save">
              <description>Saves visitor information as a cookie so it can be reused.</description>
              <signature>user_cookie_save(array $values)</signature>
              <docrelurl>user_cookie_save/7</docrelurl>
            </item>
            <item name= "user_delete">
              <description>Delete a user.</description>
              <signature>user_delete($uid)</signature>
              <docrelurl>user_delete/7</docrelurl>
            </item>
            <item name= "user_delete_multiple">
              <description>Delete multiple user accounts.</description>
              <signature>user_delete_multiple(array $uids)</signature>
              <docrelurl>user_delete_multiple/7</docrelurl>
            </item>
            <item name= "user_edit_access">
              <description>Access callback for user account editing.</description>
              <signature>user_edit_access($account)</signature>
              <docrelurl>user_edit_access/7</docrelurl>
            </item>
            <item name= "user_edit_cancel_submit">
              <description>Submit function for the 'Cancel account' button on the user edit form.</description>
              <signature>user_edit_cancel_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_edit_cancel_submit/7</docrelurl>
            </item>
            <item name= "user_element_info">
              <description>Implements hook_element_info().</description>
              <signature>user_element_info()</signature>
              <docrelurl>user_element_info/7</docrelurl>
            </item>
            <item name= "user_entity_info">
              <description>Implements hook_entity_info().</description>
              <signature>user_entity_info()</signature>
              <docrelurl>user_entity_info/7</docrelurl>
            </item>
            <item name= "user_external_load">
              <description>Fetches a user object based on an external authentication source.</description>
              <signature>user_external_load($authname)</signature>
              <docrelurl>user_external_load/7</docrelurl>
            </item>
            <item name= "user_external_login_register">
              <description>Helper function for authentication modules. Either logs in or registers the current user, based on username. Either way, the global $user object is populated and login tasks are performed.</description>
              <signature>user_external_login_register($name, $module)</signature>
              <docrelurl>user_external_login_register/7</docrelurl>
            </item>
            <item name= "user_field_extra_fields">
              <description>Implements hook_field_extra_fields().</description>
              <signature>user_field_extra_fields()</signature>
              <docrelurl>user_field_extra_fields/7</docrelurl>
            </item>
            <item name= "user_file_delete">
              <description>Implements hook_file_delete().</description>
              <signature>user_file_delete($file)</signature>
              <docrelurl>user_file_delete/7</docrelurl>
            </item>
            <item name= "user_file_download">
              <description>Implements hook_file_download(). Ensure that user pictures (avatars) are always downloadable.</description>
              <signature>user_file_download($uri)</signature>
              <docrelurl>user_file_download/7</docrelurl>
            </item>
            <item name= "user_file_references">
              <description>Implements hook_file_references().</description>
              <signature>user_file_references($file)</signature>
              <docrelurl>user_file_references/7</docrelurl>
            </item>
            <item name= "user_filters">
              <description>List user administration filters that can be applied.</description>
              <signature>user_filters()</signature>
              <docrelurl>user_filters/7</docrelurl>
            </item>
            <item name= "user_filter_form">
              <description>Form builder; Return form for user administration filters.</description>
              <signature>user_filter_form()</signature>
              <docrelurl>user_filter_form/7</docrelurl>
            </item>
            <item name= "user_filter_format_delete">
              <description>Implements hook_filter_format_delete().</description>
              <signature>user_filter_format_delete($format, $fallback)</signature>
              <docrelurl>user_filter_format_delete/7</docrelurl>
            </item>
            <item name= "user_filter_form_submit">
              <description>Process result from user administration filter form.</description>
              <signature>user_filter_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_filter_form_submit/7</docrelurl>
            </item>
            <item name= "user_forms">
              <description>Implements hook_forms().</description>
              <signature>user_forms()</signature>
              <docrelurl>user_forms/7</docrelurl>
            </item>
            <item name= "user_form_process_password_confirm">
              <description>Form element process handler for client-side password validation. This #process handler is automatically invoked for 'password_confirm' form elements to add the JavaScript and string translations for dynamic password validation.</description>
              <signature>user_form_process_password_confirm($element)</signature>
              <docrelurl>user_form_process_password_confirm/7</docrelurl>
            </item>
            <item name= "user_get_authmaps">
              <description>Discover which external authentication module(s) authenticated a username.</description>
              <signature>user_get_authmaps($authname = NULL)</signature>
              <docrelurl>user_get_authmaps/7</docrelurl>
            </item>
            <item name= "user_hash_password">
              <description>Hash a password using a secure hash.</description>
              <signature>user_hash_password($password, $count_log2 = 0)</signature>
              <docrelurl>user_hash_password/7</docrelurl>
            </item>
            <item name= "user_help">
              <description>Implement hook_help().</description>
              <signature>user_help($path, $arg)</signature>
              <docrelurl>user_help/7</docrelurl>
            </item>
            <item name= "user_image_style_delete">
              <description>Implements hook_image_style_delete().</description>
              <signature>user_image_style_delete($style)</signature>
              <docrelurl>user_image_style_delete/7</docrelurl>
            </item>
            <item name= "user_image_style_save">
              <description>Implements hook_image_style_save().</description>
              <signature>user_image_style_save($style)</signature>
              <docrelurl>user_image_style_save/7</docrelurl>
            </item>
            <item name= "user_init">
              <description>Implements hook_init().</description>
              <signature>user_init()</signature>
              <docrelurl>user_init/7</docrelurl>
            </item>
            <item name= "user_install">
              <description>Implements hook_install().</description>
              <signature>user_install()</signature>
              <docrelurl>user_install/7</docrelurl>
            </item>
            <item name= "user_is_anonymous">
              <description>
                ▸ 2 functions call user_is_anonymous()
                ▾ 2 functions call user_is_anonymous()
                user_register_access in modules/user/user.module
                _menu_site_is_offline in includes/menu.inc
                Checks whether the site is in maintenance mode.
              </description>
              <signature>user_is_anonymous()</signature>
              <docrelurl>user_is_anonymous/7</docrelurl>
            </item>
            <item name= "user_is_blocked">
              <description>Checks for usernames blocked by user administration.</description>
              <signature>user_is_blocked($name)</signature>
              <docrelurl>user_is_blocked/7</docrelurl>
            </item>
            <item name= "user_is_logged_in">
              <description>Code modules/user/user.module, line 1453</description>
              <signature>user_is_logged_in()</signature>
              <docrelurl>user_is_logged_in/7</docrelurl>
            </item>
            <item name= "user_load">
              <description>Loads a user object. Drupal has a global $user object, which represents the currently-logged-in user. So to avoid confusion and to avoid clobbering the global $user object, it is a good idea to assign the result of this function to a different local variable, generally $account. If you actually do want to act as the user you are loading, it is essential to call </description>
              <signature>user_load($uid, $reset = FALSE)</signature>
              <docrelurl>user_load/7</docrelurl>
            </item>
            <item name= "user_load_by_mail">
              <description>Fetch a user object by email address.</description>
              <signature>user_load_by_mail($mail)</signature>
              <docrelurl>user_load_by_mail/7</docrelurl>
            </item>
            <item name= "user_load_by_name">
              <description>Fetch a user object by account name.</description>
              <signature>user_load_by_name($name)</signature>
              <docrelurl>user_load_by_name/7</docrelurl>
            </item>
            <item name= "user_load_multiple">
              <description>Load multiple users based on certain conditions. This function should be used whenever you need to load more than one user from the database. Users are loaded into memory and will not require database access if loaded again during the same page request.</description>
              <signature>user_load_multiple($uids = array(), $conditions = array(), $reset = FALSE)</signature>
              <docrelurl>user_load_multiple/7</docrelurl>
            </item>
            <item name= "user_login">
              <description>Form builder; the main user login form.</description>
              <signature>user_login($form, &amp;$form_state)</signature>
              <docrelurl>user_login/7</docrelurl>
            </item>
            <item name= "user_login_authenticate_validate">
              <description>A validate handler on the login form. Check supplied username/password against local users table. If successful, $form_state['uid'] is set to the matching user ID.</description>
              <signature>user_login_authenticate_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_login_authenticate_validate/7</docrelurl>
            </item>
            <item name= "user_login_block">
              <description>Code modules/user/user.module, line 1234</description>
              <signature>user_login_block($form)</signature>
              <docrelurl>user_login_block/7</docrelurl>
            </item>
            <item name= "user_login_default_validators">
              <description>Set up a series for validators which check for blocked users, then authenticate against local database, then return an error if authentication fails. Distributed authentication modules are welcome to use hook_form_alter() to change this series in order to authenticate against their user database instead of the local users table. If a distributed authentication module is successful, it should set $form_state['uid'] to a user ID. We use three validators instead of one since external authentication modules usually only need to alter the second validator.</description>
              <signature>user_login_default_validators()</signature>
              <docrelurl>user_login_default_validators/7</docrelurl>
            </item>
            <item name= "user_login_destination">
              <description>Helper function to rewrite the destination to avoid redirecting to login page after login. Third-party authentication modules may use this function to determine the proper destination after a user has been properly logged in.</description>
              <signature>user_login_destination()</signature>
              <docrelurl>user_login_destination/7</docrelurl>
            </item>
            <item name= "user_login_finalize">
              <description>Finalize the login process. Must be called when logging in a user. The function records a watchdog message about the new session, saves the login timestamp, calls hook_user op 'login' and generates a new session. *</description>
              <signature>user_login_finalize(&amp;$edit = array())</signature>
              <docrelurl>user_login_finalize/7</docrelurl>
            </item>
            <item name= "user_login_final_validate">
              <description>The final validation handler on the login form. Sets a form error if user has not been authenticated, or if too many logins have been attempted. This validation function should always be the last one.</description>
              <signature>user_login_final_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_login_final_validate/7</docrelurl>
            </item>
            <item name= "user_login_name_validate">
              <description>A FAPI validate handler. Sets an error if supplied username has been blocked.</description>
              <signature>user_login_name_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_login_name_validate/7</docrelurl>
            </item>
            <item name= "user_login_submit">
              <description>Submit handler for the login form. Load $user object and perform standard login tasks. The user is then redirected to the My Account page. Setting the destination in the query string overrides the redirect.</description>
              <signature>user_login_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_login_submit/7</docrelurl>
            </item>
            <item name= "user_logout">
              <description>Menu callback; logs the current user out, and redirects to the home page.</description>
              <signature>user_logout()</signature>
              <docrelurl>user_logout/7</docrelurl>
            </item>
            <item name= "user_mail">
              <description>Implements hook_mail().</description>
              <signature>user_mail($key, &amp;$message, $params)</signature>
              <docrelurl>user_mail/7</docrelurl>
            </item>
            <item name= "user_mail_tokens">
              <description>Token callback to add unsafe tokens for user mails.</description>
              <signature>user_mail_tokens(&amp;$replacements, $data, $options)</signature>
              <docrelurl>user_mail_tokens/7</docrelurl>
            </item>
            <item name= "user_menu">
              <description>Implements hook_menu().</description>
              <signature>user_menu()</signature>
              <docrelurl>user_menu/7</docrelurl>
            </item>
            <item name= "user_modules_installed">
              <description>Implements hook_modules_installed().</description>
              <signature>user_modules_installed($modules)</signature>
              <docrelurl>user_modules_installed/7</docrelurl>
            </item>
            <item name= "user_modules_uninstalled">
              <description>Implements hook_modules_uninstalled().</description>
              <signature>user_modules_uninstalled($modules)</signature>
              <docrelurl>user_modules_uninstalled/7</docrelurl>
            </item>
            <item name= "user_module_invoke">
              <description>Invokes hook_user() in every module. We cannot use module_invoke() for this, because the arguments need to be passed by reference.</description>
              <signature>user_module_invoke($type, &amp;$edit, $account, $category = NULL)</signature>
              <docrelurl>user_module_invoke/7</docrelurl>
            </item>
            <item name= "user_multiple_cancel_confirm">
              <description>Code modules/user/user.module, line 2981</description>
              <signature>user_multiple_cancel_confirm($form, &amp;$form_state)</signature>
              <docrelurl>user_multiple_cancel_confirm/7</docrelurl>
            </item>
            <item name= "user_multiple_cancel_confirm_submit">
              <description>Submit handler for mass-account cancellation form.</description>
              <signature>user_multiple_cancel_confirm_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_multiple_cancel_confirm_submit/7</docrelurl>
            </item>
            <item name= "user_multiple_role_edit">
              <description>Callback function for admin mass adding/deleting a user role.</description>
              <signature>user_multiple_role_edit($accounts, $operation, $rid)</signature>
              <docrelurl>user_multiple_role_edit/7</docrelurl>
            </item>
            <item name= "user_needs_new_hash">
              <description>Check whether a user's hashed password needs to be replaced with a new hash. This is typically called during the login process when the plain text password is available. A new hash is needed when the desired iteration count has changed through a change in the variable password_count_log2 or DRUPAL_HASH_COUNT or if the user's password hash was generated in an update like user_update_7000().</description>
              <signature>user_needs_new_hash($account)</signature>
              <docrelurl>user_needs_new_hash/7</docrelurl>
            </item>
            <item name= "user_node_load">
              <description>Implements hook_node_load().</description>
              <signature>user_node_load($nodes, $types)</signature>
              <docrelurl>user_node_load/7</docrelurl>
            </item>
            <item name= "user_page">
              <description>Access callback for path /user. Displays user profile if user is logged in, or login form for anonymous users.</description>
              <signature>user_page()</signature>
              <docrelurl>user_page/7</docrelurl>
            </item>
            <item name= "user_page_title">
              <description>Menu item title callback - use the user name.</description>
              <signature>user_page_title($uid)</signature>
              <docrelurl>user_page_title/7</docrelurl>
            </item>
            <item name= "user_pass">
              <description>Form builder; Request a password reset.</description>
              <signature>user_pass()</signature>
              <docrelurl>user_pass/7</docrelurl>
            </item>
            <item name= "user_password">
              <description>Generate a random alphanumeric password.</description>
              <signature>user_password($length = 10)</signature>
              <docrelurl>user_password/7</docrelurl>
            </item>
            <item name= "user_pass_rehash">
              <description>
                ▸ 4 functions call user_pass_rehash()
                ▾ 4 functions call user_pass_rehash()
                user_cancel_confirm in modules/user/user.pages.inc
                Menu callback; Cancel a user account via e-mail confirmation link.
                user_cancel_url in modules/user/user.module
                Generate a URL to confirm an account cancellation request.
                user_pass_reset in modules/user/user.pages.inc
                Menu callback; process one time login link and redirects to the user page on success.
                user_pass_reset_url in modules/user/user.module
                Generates a unique URL for a user to login and reset their password.
              </description>
              <signature>user_pass_rehash($password, $timestamp, $login)</signature>
              <docrelurl>user_pass_rehash/7</docrelurl>
            </item>
            <item name= "user_pass_reset">
              <description>Menu callback; process one time login link and redirects to the user page on success.</description>
              <signature>user_pass_reset($form, &amp;$form_state, $uid, $timestamp, $hashed_pass, $action = NULL)</signature>
              <docrelurl>user_pass_reset/7</docrelurl>
            </item>
            <item name= "user_pass_reset_url">
              <description>Generates a unique URL for a user to login and reset their password.</description>
              <signature>user_pass_reset_url($account)</signature>
              <docrelurl>user_pass_reset_url/7</docrelurl>
            </item>
            <item name= "user_pass_submit">
              <description>Code modules/user/user.pages.inc, line 75</description>
              <signature>user_pass_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_pass_submit/7</docrelurl>
            </item>
            <item name= "user_pass_validate">
              <description>Code modules/user/user.pages.inc, line 57</description>
              <signature>user_pass_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_pass_validate/7</docrelurl>
            </item>
            <item name= "user_permission">
              <description>Implements hook_permission().</description>
              <signature>user_permission()</signature>
              <docrelurl>user_permission/7</docrelurl>
            </item>
            <item name= "user_permission_get_modules">
              <description>Determine the modules that permissions belong to.</description>
              <signature>user_permission_get_modules()</signature>
              <docrelurl>user_permission_get_modules/7</docrelurl>
            </item>
            <item name= "user_preferred_language">
              <description>Get the language object preferred by the user. This user preference can be set on the user account editing page, and is only available if there are more than one languages enabled on the site. If the user did not choose a preferred language, or is the anonymous user, the $default value, or if it is not set, the site default language will be returned.</description>
              <signature>user_preferred_language($account, $default = NULL)</signature>
              <docrelurl>user_preferred_language/7</docrelurl>
            </item>
            <item name= "user_profile_form">
              <description>Form builder; edit a user account or one of their profile categories.</description>
              <signature>user_profile_form($form, &amp;$form_state, $account, $category = 'account')</signature>
              <docrelurl>user_profile_form/7</docrelurl>
            </item>
            <item name= "user_profile_form_submit">
              <description>Submit function for the user account and profile editing form.</description>
              <signature>user_profile_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_profile_form_submit/7</docrelurl>
            </item>
            <item name= "user_profile_form_validate">
              <description>Validation function for the user account and profile editing form.</description>
              <signature>user_profile_form_validate($form, &amp;$form_state)</signature>
              <docrelurl>user_profile_form_validate/7</docrelurl>
            </item>
            <item name= "user_rdf_mapping">
              <description>Implements hook_rdf_mapping().</description>
              <signature>user_rdf_mapping()</signature>
              <docrelurl>user_rdf_mapping/7</docrelurl>
            </item>
            <item name= "user_register_access">
              <description>Code modules/user/user.module, line 1457</description>
              <signature>user_register_access()</signature>
              <docrelurl>user_register_access/7</docrelurl>
            </item>
            <item name= "user_register_form">
              <description>Form builder; the user registration form.</description>
              <signature>user_register_form($form, &amp;$form_state)</signature>
              <docrelurl>user_register_form/7</docrelurl>
            </item>
            <item name= "user_register_form_pre_render">
              <description>Form pre-render callback to clean up the user_register_form. If the "account" fieldset is the only element at the top level (apart from the submit button), its borders are hidden for aesthetic reasons.</description>
              <signature>user_register_form_pre_render($form)</signature>
              <docrelurl>user_register_form_pre_render/7</docrelurl>
            </item>
            <item name= "user_register_submit">
              <description>Submit handler for the user registration form. This function is shared by the installation form and the normal registration form, which is why it can't be in the user.pages.inc file.</description>
              <signature>user_register_submit($form, &amp;$form_state)</signature>
              <docrelurl>user_register_submit/7</docrelurl>
            </item>
            <item name= "user_roles">
              <description>Retrieve an array of roles matching specified conditions.</description>
              <signature>user_roles($membersonly = FALSE, $permission = NULL)</signature>
              <docrelurl>user_roles/7</docrelurl>
            </item>
            <item name= "user_role_change_permissions">
              <description>Change permissions for a user role. This function may be used to grant and revoke multiple permissions at once. For example, when a form exposes checkboxes to configure permissions for a role, the submitted values may be directly passed on in a form submit handler.</description>
              <signature>user_role_change_permissions($rid, array $permissions = array())</signature>
              <docrelurl>user_role_change_permissions/7</docrelurl>
            </item>
            <item name= "user_role_delete">
              <description>Delete a user role from database.</description>
              <signature>user_role_delete($role)</signature>
              <docrelurl>user_role_delete/7</docrelurl>
            </item>
            <item name= "user_role_edit_access">
              <description>Menu access callback for user role editing.</description>
              <signature>user_role_edit_access($role)</signature>
              <docrelurl>user_role_edit_access/7</docrelurl>
            </item>
            <item name= "user_role_grant_permissions">
              <description>Grant permissions to a user role.</description>
              <signature>user_role_grant_permissions($rid, array $permissions = array())</signature>
              <docrelurl>user_role_grant_permissions/7</docrelurl>
            </item>
            <item name= "user_role_load">
              <description>Fetches a user role by role ID.</description>
              <signature>user_role_load($rid)</signature>
              <docrelurl>user_role_load/7</docrelurl>
            </item>
            <item name= "user_role_load_by_name">
              <description>Fetches a user role by role name.</description>
              <signature>user_role_load_by_name($role_name)</signature>
              <docrelurl>user_role_load_by_name/7</docrelurl>
            </item>
            <item name= "user_role_permissions">
              <description>Determine the permissions for one or more roles.</description>
              <signature>user_role_permissions($roles = array())</signature>
              <docrelurl>user_role_permissions/7</docrelurl>
            </item>
            <item name= "user_role_revoke_permissions">
              <description>Revoke permissions from a user role.</description>
              <signature>user_role_revoke_permissions($rid, array $permissions = array())</signature>
              <docrelurl>user_role_revoke_permissions/7</docrelurl>
            </item>
            <item name= "user_role_save">
              <description>Save a user role to the database.</description>
              <signature>user_role_save($role)</signature>
              <docrelurl>user_role_save/7</docrelurl>
            </item>
            <item name= "user_save">
              <description>Save changes to a user account or add a new user.</description>
              <signature>user_save($account, $edit = array(), $category = 'account')</signature>
              <docrelurl>user_save/7</docrelurl>
            </item>
            <item name= "user_schema">
              <description>Implements hook_schema().</description>
              <signature>user_schema()</signature>
              <docrelurl>user_schema/7</docrelurl>
            </item>
            <item name= "user_search_access">
              <description>Implements hook_search_access().</description>
              <signature>user_search_access()</signature>
              <docrelurl>user_search_access/7</docrelurl>
            </item>
            <item name= "user_search_execute">
              <description>Implements hook_search_execute().</description>
              <signature>user_search_execute($keys = NULL)</signature>
              <docrelurl>user_search_execute/7</docrelurl>
            </item>
            <item name= "user_search_info">
              <description>Implements hook_search_info().</description>
              <signature>user_search_info()</signature>
              <docrelurl>user_search_info/7</docrelurl>
            </item>
            <item name= "user_set_authmaps">
              <description>Save mappings of which external authentication module(s) authenticated a user. Maps external usernames to user ids in the users table.</description>
              <signature>user_set_authmaps($account, $authmaps)</signature>
              <docrelurl>user_set_authmaps/7</docrelurl>
            </item>
            <item name= "user_theme">
              <description>Implements hook_theme().</description>
              <signature>user_theme()</signature>
              <docrelurl>user_theme/7</docrelurl>
            </item>
            <item name= "user_tokens">
              <description>Implements hook_tokens().</description>
              <signature>user_tokens($type, $tokens, array $data = array(), array $options = array())</signature>
              <docrelurl>user_tokens/7</docrelurl>
            </item>
            <item name= "user_token_info">
              <description>Implements hook_token_info().</description>
              <signature>user_token_info()</signature>
              <docrelurl>user_token_info/7</docrelurl>
            </item>
            <item name= "user_uid_only_optional_to_arg">
              <description>Returns $arg or the user ID of the current user if $arg is '%' or empty. @todo rethink the naming of this in Drupal 8.</description>
              <signature>user_uid_only_optional_to_arg($arg)</signature>
              <docrelurl>user_uid_only_optional_to_arg/7</docrelurl>
            </item>
            <item name= "user_uid_optional_load">
              <description>Load either a specified or the current user account. @todo rethink the naming of this in Drupal 8.</description>
              <signature>user_uid_optional_load($uid = NULL)</signature>
              <docrelurl>user_uid_optional_load/7</docrelurl>
            </item>
            <item name= "user_uid_optional_to_arg">
              <description>Returns $arg or the user ID of the current user if $arg is '%' or empty. @todo rethink the naming of this in Drupal 8.</description>
              <signature>user_uid_optional_to_arg($arg)</signature>
              <docrelurl>user_uid_optional_to_arg/7</docrelurl>
            </item>
            <item name= "user_update_7000">
              <description>Increase the length of the password field to accommodate better hashes. Also re-hashes all current passwords to improve security. This may be a lengthy process, and is performed batch-wise.</description>
              <signature>user_update_7000(&amp;$sandbox)</signature>
              <docrelurl>user_update_7000/7</docrelurl>
            </item>
            <item name= "user_update_7001">
              <description>Related topics</description>
              <signature>user_update_7001()</signature>
              <docrelurl>user_update_7001/7</docrelurl>
            </item>
            <item name= "user_update_7002">
              <description>Convert user time zones from time zone offsets to time zone names.</description>
              <signature>user_update_7002(&amp;$sandbox)</signature>
              <docrelurl>user_update_7002/7</docrelurl>
            </item>
            <item name= "user_update_7003">
              <description>Update user settings for cancelling user accounts. Prior to 7.x, users were not able to cancel their accounts. When administrators deleted an account, all contents were assigned to uid 0, which is the same as the 'user_cancel_reassign' method now.</description>
              <signature>user_update_7003()</signature>
              <docrelurl>user_update_7003/7</docrelurl>
            </item>
            <item name= "user_update_7004">
              <description>Add the user's pictures to the {file_managed} table and make them managed files.</description>
              <signature>user_update_7004(&amp;$sandbox)</signature>
              <docrelurl>user_update_7004/7</docrelurl>
            </item>
            <item name= "user_update_7005">
              <description>Changes the users table to allow longer e-mail addresses.</description>
              <signature>user_update_7005(&amp;$sandbox)</signature>
              <docrelurl>user_update_7005/7</docrelurl>
            </item>
            <item name= "user_update_7006">
              <description>Add module data to {role_permission}.</description>
              <signature>user_update_7006(&amp;$sandbox)</signature>
              <docrelurl>user_update_7006/7</docrelurl>
            </item>
            <item name= "user_update_7007">
              <description>Add a weight column to user roles.</description>
              <signature>user_update_7007()</signature>
              <docrelurl>user_update_7007/7</docrelurl>
            </item>
            <item name= "user_update_7008">
              <description>If 'user_register' variable was unset in Drupal 6, set it to be the same as the Drupal 6 default setting.</description>
              <signature>user_update_7008()</signature>
              <docrelurl>user_update_7008/7</docrelurl>
            </item>
            <item name= "user_uri">
              <description>Entity uri callback.</description>
              <signature>user_uri($user)</signature>
              <docrelurl>user_uri/7</docrelurl>
            </item>
            <item name= "user_user_categories">
              <description>Implements hook_user_categories().</description>
              <signature>user_user_categories()</signature>
              <docrelurl>user_user_categories/7</docrelurl>
            </item>
            <item name= "user_user_operations">
              <description>Implements hook_user_operations().</description>
              <signature>user_user_operations($form = array(), $form_state = array())</signature>
              <docrelurl>user_user_operations/7</docrelurl>
            </item>
            <item name= "user_user_operations_block">
              <description>Callback function for admin mass blocking users.</description>
              <signature>user_user_operations_block($accounts)</signature>
              <docrelurl>user_user_operations_block/7</docrelurl>
            </item>
            <item name= "user_user_operations_unblock">
              <description>Callback function for admin mass unblocking users.</description>
              <signature>user_user_operations_unblock($accounts)</signature>
              <docrelurl>user_user_operations_unblock/7</docrelurl>
            </item>
            <item name= "user_user_presave">
              <description>Implements hook_user_presave().</description>
              <signature>user_user_presave(&amp;$edit, $account, $category)</signature>
              <docrelurl>user_user_presave/7</docrelurl>
            </item>
            <item name= "user_user_view">
              <description>Implements hook_user_view().</description>
              <signature>user_user_view($account)</signature>
              <docrelurl>user_user_view/7</docrelurl>
            </item>
            <item name= "user_validate_current_pass">
              <description>Form validation handler for the current password on the user_account_form().</description>
              <signature>user_validate_current_pass(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>user_validate_current_pass/7</docrelurl>
            </item>
            <item name= "user_validate_mail">
              <description>Validates a user's email address. Checks that a user's email address exists and follows all standard validation rules. Returns error messages when the address is invalid.</description>
              <signature>user_validate_mail($mail)</signature>
              <docrelurl>user_validate_mail/7</docrelurl>
            </item>
            <item name= "user_validate_name">
              <description>Verify the syntax of the given name.</description>
              <signature>user_validate_name($name)</signature>
              <docrelurl>user_validate_name/7</docrelurl>
            </item>
            <item name= "user_validate_picture">
              <description>Validates an image uploaded by a user.</description>
              <signature>user_validate_picture(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>user_validate_picture/7</docrelurl>
            </item>
            <item name= "user_view">
              <description>Generate an array for rendering the given user. When viewing a user profile, the $page array contains:</description>
              <signature>user_view($account, $view_mode = 'full')</signature>
              <docrelurl>user_view/7</docrelurl>
            </item>
            <item name= "user_view_access">
              <description>User view access callback.</description>
              <signature>user_view_access($account)</signature>
              <docrelurl>user_view_access/7</docrelurl>
            </item>
            <item name= "user_view_page">
              <description>Page callback wrapper for user_view().</description>
              <signature>user_view_page($uid)</signature>
              <docrelurl>user_view_page/7</docrelurl>
            </item>
            <item name= "valid_email_address">
              <description>Verify the syntax of the given e-mail address. Empty e-mail addresses are allowed. See RFC 2822 for details.</description>
              <signature>valid_email_address($mail)</signature>
              <docrelurl>valid_email_address/7</docrelurl>
            </item>
            <item name= "valid_url">
              <description>Verify the syntax of the given URL. This function should only be used on actual URLs. It should not be used for Drupal menu paths, which can contain arbitrary characters. Valid values per RFC 3986.</description>
              <signature>valid_url($url, $absolute = FALSE)</signature>
              <docrelurl>valid_url/7</docrelurl>
            </item>
            <item name= "vancode2int">
              <description>Decode vancode back to an integer.</description>
              <signature>vancode2int($c = '00')</signature>
              <docrelurl>vancode2int/7</docrelurl>
            </item>
            <item name= "variable_del">
              <description>Unsets a persistent variable. Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.</description>
              <signature>variable_del($name)</signature>
              <docrelurl>variable_del/7</docrelurl>
            </item>
            <item name= "variable_get">
              <description>Returns a persistent variable. Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.</description>
              <signature>variable_get($name, $default = NULL)</signature>
              <docrelurl>variable_get/7</docrelurl>
            </item>
            <item name= "variable_initialize">
              <description>Load the persistent variable table. The variable table is composed of values that have been saved in the table with variable_set() as well as those explicitly specified in the configuration file.</description>
              <signature>variable_initialize($conf = array())</signature>
              <docrelurl>variable_initialize/7</docrelurl>
            </item>
            <item name= "variable_set">
              <description>Sets a persistent variable. Case-sensitivity of the variable_* functions depends on the database collation used. To avoid problems, always use lower case for persistent variable names.</description>
              <signature>variable_set($name, $value)</signature>
              <docrelurl>variable_set/7</docrelurl>
            </item>
            <item name= "watchdog">
              <description>Log a system message.</description>
              <signature>watchdog($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)</signature>
              <docrelurl>watchdog/7</docrelurl>
            </item>
            <item name= "watchdog_exception">
              <description>Log an exception. This is a wrapper function for watchdog() which automatically decodes an exception.</description>
              <signature>watchdog_exception($type, Exception $exception, $message = NULL, $variables = array(), $severity = WATCHDOG_ERROR, $link = NULL)</signature>
              <docrelurl>watchdog_exception/7</docrelurl>
            </item>
            <item name= "watchdog_severity_levels">
              <description>Severity levels, as defined in RFC 3164: http://www.ietf.org/rfc/rfc3164.txt.</description>
              <signature>watchdog_severity_levels()</signature>
              <docrelurl>watchdog_severity_levels/7</docrelurl>
            </item>
            <item name= "watchdog_skip_semaphore">
              <description>Replacement of the watchdog() function that eliminates the use of semaphores so that we can test the abortion of an action loop.</description>
              <signature>watchdog_skip_semaphore($type, $message, $variables = array(), $severity = WATCHDOG_NOTICE, $link = NULL)</signature>
              <docrelurl>watchdog_skip_semaphore/7</docrelurl>
            </item>
            <item name= "weight_value">
              <description>If no default value is set for weight select boxes, use 0.</description>
              <signature>weight_value(&amp;$form)</signature>
              <docrelurl>weight_value/7</docrelurl>
            </item>
            <item name= "xmlrpc">
              <description>Performs one or more XML-RPC request(s).</description>
              <signature>xmlrpc($url)</signature>
              <docrelurl>xmlrpc/7</docrelurl>
            </item>
            <item name= "xmlrpc_base64">
              <description>
                ▸ 1 function calls xmlrpc_base64()
                ▾ 1 function calls xmlrpc_base64()
                xmlrpc_test_manyTypesTest in modules/simpletest/tests/xmlrpc_test.module
              </description>
              <signature>xmlrpc_base64($data)</signature>
              <docrelurl>xmlrpc_base64/7</docrelurl>
            </item>
            <item name= "xmlrpc_base64_get_xml">
              <description>
                ▸ 1 function calls xmlrpc_base64_get_xml()
                ▾ 1 function calls xmlrpc_base64_get_xml()
                xmlrpc_value_get_xml in includes/xmlrpc.inc
                Generate XML representing the given value.
              </description>
              <signature>xmlrpc_base64_get_xml($xmlrpc_base64)</signature>
              <docrelurl>xmlrpc_base64_get_xml/7</docrelurl>
            </item>
            <item name= "xmlrpc_clear_error">
              <description>Clears any previous error.</description>
              <signature>xmlrpc_clear_error()</signature>
              <docrelurl>xmlrpc_clear_error/7</docrelurl>
            </item>
            <item name= "xmlrpc_date">
              <description>
                ▸ 2 functions call xmlrpc_date()
                ▾ 2 functions call xmlrpc_date()
                xmlrpc_message_tag_close in includes/xmlrpc.inc
                xmlrpc_test_manyTypesTest in modules/simpletest/tests/xmlrpc_test.module
              </description>
              <signature>xmlrpc_date($time)</signature>
              <docrelurl>xmlrpc_date/7</docrelurl>
            </item>
            <item name= "xmlrpc_date_get_xml">
              <description>
                ▸ 1 function calls xmlrpc_date_get_xml()
                ▾ 1 function calls xmlrpc_date_get_xml()
                xmlrpc_value_get_xml in includes/xmlrpc.inc
                Generate XML representing the given value.
              </description>
              <signature>xmlrpc_date_get_xml($xmlrpc_date)</signature>
              <docrelurl>xmlrpc_date_get_xml/7</docrelurl>
            </item>
            <item name= "xmlrpc_errno">
              <description>Returns the last XML-RPC client error number</description>
              <signature>xmlrpc_errno()</signature>
              <docrelurl>xmlrpc_errno/7</docrelurl>
            </item>
            <item name= "xmlrpc_error">
              <description>
                ▸ 8 functions call xmlrpc_error()
                ▾ 8 functions call xmlrpc_error()
                xmlrpc_clear_error in includes/xmlrpc.inc
                Clears any previous error.
                xmlrpc_errno in includes/xmlrpc.inc
                Returns the last XML-RPC client error number
                xmlrpc_error_msg in includes/xmlrpc.inc
                Returns the last XML-RPC client error message
                xmlrpc_server_call in includes/xmlrpcs.inc
                Dispatch the request and any parameters to the appropriate handler.
                xmlrpc_server_error in includes/xmlrpcs.inc
                Throw an XML-RPC error.
                xmlrpc_server_method_signature in includes/xmlrpcs.inc
                XML-RPC method system.methodSignature maps to this function.
                xmlrpc_server_multicall in includes/xmlrpcs.inc
                _xmlrpc in includes/xmlrpc.inc
                Performs one or more XML-RPC request(s).
              </description>
              <signature>xmlrpc_error($code = NULL, $message = NULL, $reset = FALSE)</signature>
              <docrelurl>xmlrpc_error/7</docrelurl>
            </item>
            <item name= "xmlrpc_error_get_xml">
              <description>
                ▸ 1 function calls xmlrpc_error_get_xml()
                ▾ 1 function calls xmlrpc_error_get_xml()
                xmlrpc_server_error in includes/xmlrpcs.inc
                Throw an XML-RPC error.
              </description>
              <signature>xmlrpc_error_get_xml($xmlrpc_error)</signature>
              <docrelurl>xmlrpc_error_get_xml/7</docrelurl>
            </item>
            <item name= "xmlrpc_error_msg">
              <description>Returns the last XML-RPC client error message</description>
              <signature>xmlrpc_error_msg()</signature>
              <docrelurl>xmlrpc_error_msg/7</docrelurl>
            </item>
            <item name= "xmlrpc_message">
              <description>Construct an object representing an XML-RPC message.</description>
              <signature>xmlrpc_message($message)</signature>
              <docrelurl>xmlrpc_message/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_cdata">
              <description>Code includes/xmlrpc.inc, line 231</description>
              <signature>xmlrpc_message_cdata($parser, $cdata)</signature>
              <docrelurl>xmlrpc_message_cdata/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_get">
              <description>
                ▸ 4 functions call xmlrpc_message_get()
                ▾ 4 functions call xmlrpc_message_get()
                xmlrpc_message_cdata in includes/xmlrpc.inc
                xmlrpc_message_parse in includes/xmlrpc.inc
                Parses an XML-RPC message.
                xmlrpc_message_tag_close in includes/xmlrpc.inc
                xmlrpc_message_tag_open in includes/xmlrpc.inc
              </description>
              <signature>xmlrpc_message_get()</signature>
              <docrelurl>xmlrpc_message_get/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_parse">
              <description>Parses an XML-RPC message. If parsing fails, the faultCode and faultString will be added to the message object.</description>
              <signature>xmlrpc_message_parse($xmlrpc_message)</signature>
              <docrelurl>xmlrpc_message_parse/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_set">
              <description>Store a copy of the $xmlrpc_message object temporarily.</description>
              <signature>xmlrpc_message_set($value = NULL)</signature>
              <docrelurl>xmlrpc_message_set/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_tag_close">
              <description>Code includes/xmlrpc.inc, line 237</description>
              <signature>xmlrpc_message_tag_close($parser, $tag)</signature>
              <docrelurl>xmlrpc_message_tag_close/7</docrelurl>
            </item>
            <item name= "xmlrpc_message_tag_open">
              <description>Code includes/xmlrpc.inc, line 208</description>
              <signature>xmlrpc_message_tag_open($parser, $tag, $attr)</signature>
              <docrelurl>xmlrpc_message_tag_open/7</docrelurl>
            </item>
            <item name= "xmlrpc_request">
              <description>Construct an object representing an XML-RPC request</description>
              <signature>xmlrpc_request($method, $args)</signature>
              <docrelurl>xmlrpc_request/7</docrelurl>
            </item>
            <item name= "xmlrpc_server">
              <description>The main entry point for XML-RPC requests.</description>
              <signature>xmlrpc_server($callbacks)</signature>
              <docrelurl>xmlrpc_server/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_call">
              <description>Dispatch the request and any parameters to the appropriate handler.</description>
              <signature>xmlrpc_server_call($xmlrpc_server, $methodname, $args)</signature>
              <docrelurl>xmlrpc_server_call/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_error">
              <description>Throw an XML-RPC error.</description>
              <signature>xmlrpc_server_error($error, $message = FALSE)</signature>
              <docrelurl>xmlrpc_server_error/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_get">
              <description>
                ▸ 4 functions call xmlrpc_server_get()
                ▾ 4 functions call xmlrpc_server_get()
                xmlrpc_server_list_methods in includes/xmlrpcs.inc
                XML-RPC method system.listMethods maps to this function.
                xmlrpc_server_method_help in includes/xmlrpcs.inc
                XML-RPC method system.methodHelp maps to this function.
                xmlrpc_server_method_signature in includes/xmlrpcs.inc
                XML-RPC method system.methodSignature maps to this function.
                xmlrpc_server_multicall in includes/xmlrpcs.inc
              </description>
              <signature>xmlrpc_server_get()</signature>
              <docrelurl>xmlrpc_server_get/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_get_capabilities">
              <description>XML-RPC method system.getCapabilities maps to this function.</description>
              <signature>xmlrpc_server_get_capabilities()</signature>
              <docrelurl>xmlrpc_server_get_capabilities/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_list_methods">
              <description>XML-RPC method system.listMethods maps to this function.</description>
              <signature>xmlrpc_server_list_methods()</signature>
              <docrelurl>xmlrpc_server_list_methods/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_method_help">
              <description>XML-RPC method system.methodHelp maps to this function.</description>
              <signature>xmlrpc_server_method_help($method)</signature>
              <docrelurl>xmlrpc_server_method_help/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_method_signature">
              <description>XML-RPC method system.methodSignature maps to this function.</description>
              <signature>xmlrpc_server_method_signature($methodname)</signature>
              <docrelurl>xmlrpc_server_method_signature/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_multicall">
              <description>Code includes/xmlrpcs.inc, line 221</description>
              <signature>xmlrpc_server_multicall($methodcalls)</signature>
              <docrelurl>xmlrpc_server_multicall/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_output">
              <description>
                ▸ 2 functions call xmlrpc_server_output()
                ▾ 2 functions call xmlrpc_server_output()
                xmlrpc_server in includes/xmlrpcs.inc
                The main entry point for XML-RPC requests.
                xmlrpc_server_error in includes/xmlrpcs.inc
                Throw an XML-RPC error.
              </description>
              <signature>xmlrpc_server_output($xml)</signature>
              <docrelurl>xmlrpc_server_output/7</docrelurl>
            </item>
            <item name= "xmlrpc_server_set">
              <description>Store a copy of the request temporarily.</description>
              <signature>xmlrpc_server_set($xmlrpc_server = NULL)</signature>
              <docrelurl>xmlrpc_server_set/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_arrayOfStructsTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 4</description>
              <signature>xmlrpc_test_arrayOfStructsTest($array)</signature>
              <docrelurl>xmlrpc_test_arrayOfStructsTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_countTheEntities">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 14</description>
              <signature>xmlrpc_test_countTheEntities($string)</signature>
              <docrelurl>xmlrpc_test_countTheEntities/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_easyStructTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 24</description>
              <signature>xmlrpc_test_easyStructTest($array)</signature>
              <docrelurl>xmlrpc_test_easyStructTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_echoStructTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 28</description>
              <signature>xmlrpc_test_echoStructTest($array)</signature>
              <docrelurl>xmlrpc_test_echoStructTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_manyTypesTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 32</description>
              <signature>xmlrpc_test_manyTypesTest($number, $boolean, $string, $double, $dateTime, $base64)</signature>
              <docrelurl>xmlrpc_test_manyTypesTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_message_sized_in_kb">
              <description>Created a message of the desired size in KB.</description>
              <signature>xmlrpc_test_message_sized_in_kb($size)</signature>
              <docrelurl>xmlrpc_test_message_sized_in_kb/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_moderateSizeArrayCheck">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 37</description>
              <signature>xmlrpc_test_moderateSizeArrayCheck($array)</signature>
              <docrelurl>xmlrpc_test_moderateSizeArrayCheck/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_nestedStructTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 41</description>
              <signature>xmlrpc_test_nestedStructTest($array)</signature>
              <docrelurl>xmlrpc_test_nestedStructTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_simpleStructReturnTest">
              <description>Code modules/simpletest/tests/xmlrpc_test.module, line 45</description>
              <signature>xmlrpc_test_simpleStructReturnTest($number)</signature>
              <docrelurl>xmlrpc_test_simpleStructReturnTest/7</docrelurl>
            </item>
            <item name= "xmlrpc_test_xmlrpc">
              <description>Implements hook_xmlrpc().</description>
              <signature>xmlrpc_test_xmlrpc()</signature>
              <docrelurl>xmlrpc_test_xmlrpc/7</docrelurl>
            </item>
            <item name= "xmlrpc_value">
              <description>Turn a data structure into objects with 'data' and 'type' attributes.</description>
              <signature>xmlrpc_value($data, $type = FALSE)</signature>
              <docrelurl>xmlrpc_value/7</docrelurl>
            </item>
            <item name= "xmlrpc_value_calculate_type">
              <description>Map PHP type to XML-RPC type.</description>
              <signature>xmlrpc_value_calculate_type($xmlrpc_value)</signature>
              <docrelurl>xmlrpc_value_calculate_type/7</docrelurl>
            </item>
            <item name= "xmlrpc_value_get_xml">
              <description>Generate XML representing the given value.</description>
              <signature>xmlrpc_value_get_xml($xmlrpc_value)</signature>
              <docrelurl>xmlrpc_value_get_xml/7</docrelurl>
            </item>
            <item name= "_aggregator_category_title">
              <description>Menu callback.</description>
              <signature>_aggregator_category_title($category)</signature>
              <docrelurl>_aggregator_category_title/7</docrelurl>
            </item>
            <item name= "_aggregator_characters">
              <description>Helper function for teaser length choices.</description>
              <signature>_aggregator_characters($length)</signature>
              <docrelurl>_aggregator_characters/7</docrelurl>
            </item>
            <item name= "_aggregator_get_variables">
              <description>
                ▸ 3 functions call _aggregator_get_variables()
                ▾ 3 functions call _aggregator_get_variables()
                aggregator_refresh in modules/aggregator/aggregator.module
                Checks a news feed for new items.
                aggregator_remove in modules/aggregator/aggregator.module
                Removes all items from a feed.
                aggregator_sanitize_configuration in modules/aggregator/aggregator.module
                Check and sanitize aggregator configuration.
              </description>
              <signature>_aggregator_get_variables()</signature>
              <docrelurl>_aggregator_get_variables/7</docrelurl>
            </item>
            <item name= "_aggregator_has_categories">
              <description>Find out whether there are any aggregator categories.</description>
              <signature>_aggregator_has_categories()</signature>
              <docrelurl>_aggregator_has_categories/7</docrelurl>
            </item>
            <item name= "_aggregator_items">
              <description>Helper function for drupal_map_assoc.</description>
              <signature>_aggregator_items($count)</signature>
              <docrelurl>_aggregator_items/7</docrelurl>
            </item>
            <item name= "_aggregator_page_list">
              <description>Prints an aggregator page listing a number of feed items. Various menu callbacks use this function to print their feeds.</description>
              <signature>_aggregator_page_list($items, $op, $feed_source = '')</signature>
              <docrelurl>_aggregator_page_list/7</docrelurl>
            </item>
            <item name= "_aggregator_parse_opml">
              <description>
                Parse an OPML file. Feeds are recognized as &lt;outline&gt; elements with the attributes <em>text</em> and <em>xmlurl</em> set.
              </description>
              <signature>_aggregator_parse_opml($opml)</signature>
              <docrelurl>_aggregator_parse_opml/7</docrelurl>
            </item>
            <item name= "_batch_api_percentage">
              <description>Helper function for _batch_process(): returns the formatted percentage.</description>
              <signature>_batch_api_percentage($total, $current)</signature>
              <docrelurl>_batch_api_percentage/7</docrelurl>
            </item>
            <item name= "_batch_current_set">
              <description>Return the batch set being currently processed.</description>
              <signature>&amp;_batch_current_set()</signature>
              <docrelurl>_batch_current_set/7</docrelurl>
            </item>
            <item name= "_batch_do">
              <description>Do one execution pass in JavaScript-mode and return progress to the browser.</description>
              <signature>_batch_do()</signature>
              <docrelurl>_batch_do/7</docrelurl>
            </item>
            <item name= "_batch_finished">
              <description>End the batch processing. Call the 'finished' callback of each batch set to allow custom handling of the results and resolve page redirection.</description>
              <signature>_batch_finished()</signature>
              <docrelurl>_batch_finished/7</docrelurl>
            </item>
            <item name= "_batch_next_set">
              <description>Retrieve the next set in a batch. If there is a subsequent set in this batch, assign it as the new set to process and execute its form submit handler (if defined), which may add further sets to this batch.</description>
              <signature>_batch_next_set()</signature>
              <docrelurl>_batch_next_set/7</docrelurl>
            </item>
            <item name= "_batch_page">
              <description>State-based dispatcher for the batch processing page.</description>
              <signature>_batch_page()</signature>
              <docrelurl>_batch_page/7</docrelurl>
            </item>
            <item name= "_batch_populate_queue">
              <description>Populates a job queue with the operations of a batch set. Depending on whether the batch is progressive or not, the BatchQueue or BatchMemoryQueue handler classes will be used.</description>
              <signature>_batch_populate_queue(&amp;$batch, $set_id)</signature>
              <docrelurl>_batch_populate_queue/7</docrelurl>
            </item>
            <item name= "_batch_process">
              <description>Process sets in a batch. If the batch was marked for progressive execution (default), this executes as many operations in batch sets until an execution time of 1 second has been exceeded. It will continue with the next operation of the same batch set in the next request.</description>
              <signature>_batch_process()</signature>
              <docrelurl>_batch_process/7</docrelurl>
            </item>
            <item name= "_batch_progress_page_js">
              <description>Output a batch processing page with JavaScript support. This initializes the batch and error messages. Note that in JavaScript-based processing, the batch processing page is displayed only once and updated via AHAH requests, so only the first batch set gets to define the page title. Titles specified by subsequent batch sets are not displayed.</description>
              <signature>_batch_progress_page_js()</signature>
              <docrelurl>_batch_progress_page_js/7</docrelurl>
            </item>
            <item name= "_batch_progress_page_nojs">
              <description>Output a batch processing page without JavaScript support.</description>
              <signature>_batch_progress_page_nojs()</signature>
              <docrelurl>_batch_progress_page_nojs/7</docrelurl>
            </item>
            <item name= "_batch_queue">
              <description>Returns a queue object for a batch set.</description>
              <signature>_batch_queue($batch_set)</signature>
              <docrelurl>_batch_queue/7</docrelurl>
            </item>
            <item name= "_batch_shutdown">
              <description>Shutdown function; store the current batch data for the next request.</description>
              <signature>_batch_shutdown()</signature>
              <docrelurl>_batch_shutdown/7</docrelurl>
            </item>
            <item name= "_batch_start">
              <description>Initialize the batch processing. JavaScript-enabled clients are identified by the 'has_js' cookie set in drupal.js. If no JavaScript-enabled page has been visited during the current user's browser session, the non-JavaScript version is returned.</description>
              <signature>_batch_start()</signature>
              <docrelurl>_batch_start/7</docrelurl>
            </item>
            <item name= "_batch_test_batch_0">
              <description>Batch 0: no operation.</description>
              <signature>_batch_test_batch_0()</signature>
              <docrelurl>_batch_test_batch_0/7</docrelurl>
            </item>
            <item name= "_batch_test_batch_1">
              <description>Batch 1: repeats a simple operation. Operations: op 1 from 1 to 10.</description>
              <signature>_batch_test_batch_1()</signature>
              <docrelurl>_batch_test_batch_1/7</docrelurl>
            </item>
            <item name= "_batch_test_batch_2">
              <description>Batch 2: single multistep operation. Operations: op 2 from 1 to 10.</description>
              <signature>_batch_test_batch_2()</signature>
              <docrelurl>_batch_test_batch_2/7</docrelurl>
            </item>
            <item name= "_batch_test_batch_3">
              <description>Batch 3: both single and multistep operations. Operations:</description>
              <signature>_batch_test_batch_3()</signature>
              <docrelurl>_batch_test_batch_3/7</docrelurl>
            </item>
            <item name= "_batch_test_batch_4">
              <description>Batch 4: batch within a batch. Operations:</description>
              <signature>_batch_test_batch_4()</signature>
              <docrelurl>_batch_test_batch_4/7</docrelurl>
            </item>
            <item name= "_batch_test_callback_1">
              <description>Simple batch operation.</description>
              <signature>_batch_test_callback_1($id, $sleep, &amp;$context)</signature>
              <docrelurl>_batch_test_callback_1/7</docrelurl>
            </item>
            <item name= "_batch_test_callback_2">
              <description>Multistep batch operation.</description>
              <signature>_batch_test_callback_2($start, $total, $sleep, &amp;$context)</signature>
              <docrelurl>_batch_test_callback_2/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_0">
              <description>'finished' callback for batch 0.</description>
              <signature>_batch_test_finished_0($success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_0/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_1">
              <description>'finished' callback for batch 1.</description>
              <signature>_batch_test_finished_1($success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_1/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_2">
              <description>'finished' callback for batch 2.</description>
              <signature>_batch_test_finished_2($success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_2/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_3">
              <description>'finished' callback for batch 3.</description>
              <signature>_batch_test_finished_3($success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_3/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_4">
              <description>'finished' callback for batch 4.</description>
              <signature>_batch_test_finished_4($success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_4/7</docrelurl>
            </item>
            <item name= "_batch_test_finished_helper">
              <description>Common 'finished' callbacks for batches 1 to 4.</description>
              <signature>_batch_test_finished_helper($batch_id, $success, $results, $operations)</signature>
              <docrelurl>_batch_test_finished_helper/7</docrelurl>
            </item>
            <item name= "_batch_test_nested_batch_callback">
              <description>Batch operation setting up its own batch.</description>
              <signature>_batch_test_nested_batch_callback()</signature>
              <docrelurl>_batch_test_nested_batch_callback/7</docrelurl>
            </item>
            <item name= "_batch_test_nested_drupal_form_submit_callback">
              <description>Batch operation: submits form_test_mock_form using drupal_form_submit().</description>
              <signature>_batch_test_nested_drupal_form_submit_callback($value)</signature>
              <docrelurl>_batch_test_nested_drupal_form_submit_callback/7</docrelurl>
            </item>
            <item name= "_batch_test_theme_callback">
              <description>Batch callback function for testing the theme used on the progress page.</description>
              <signature>_batch_test_theme_callback()</signature>
              <docrelurl>_batch_test_theme_callback/7</docrelurl>
            </item>
            <item name= "_block_compare">
              <description>Helper function for sorting blocks on admin/structure/block. Active blocks are sorted by region, then by weight. Disabled blocks are sorted by name.</description>
              <signature>_block_compare($a, $b)</signature>
              <docrelurl>_block_compare/7</docrelurl>
            </item>
            <item name= "_block_custom_theme">
              <description>Theme callback for the block configuration pages.</description>
              <signature>_block_custom_theme($theme = NULL)</signature>
              <docrelurl>_block_custom_theme/7</docrelurl>
            </item>
            <item name= "_block_get_cache_id">
              <description>Assemble the cache_id to use for a given block. The cache_id string reflects the viewing context for the current block instance, obtained by concatenating the relevant context information (user, page, ...) according to the block's cache settings (BLOCK_CACHE_* constants). Two block instances can use the same cached content when they share the same cache_id.</description>
              <signature>_block_get_cache_id($block)</signature>
              <docrelurl>_block_get_cache_id/7</docrelurl>
            </item>
            <item name= "_block_get_renderable_array">
              <description>Get an array of blocks suitable for drupal_render().</description>
              <signature>_block_get_renderable_array($list = array())</signature>
              <docrelurl>_block_get_renderable_array/7</docrelurl>
            </item>
            <item name= "_block_load_blocks">
              <description>Load blocks information from the database.</description>
              <signature>_block_load_blocks()</signature>
              <docrelurl>_block_load_blocks/7</docrelurl>
            </item>
            <item name= "_block_rehash">
              <description>Update the 'block' DB table with the blocks currently exported by modules. @param $theme The theme to rehash blocks for. If not provided, defaults to the currently used theme.</description>
              <signature>_block_rehash($theme = NULL)</signature>
              <docrelurl>_block_rehash/7</docrelurl>
            </item>
            <item name= "_block_render_blocks">
              <description>Render the content and subject for a set of blocks.</description>
              <signature>_block_render_blocks($region_blocks)</signature>
              <docrelurl>_block_render_blocks/7</docrelurl>
            </item>
            <item name= "_block_themes_access">
              <description>Menu item access callback - only admin or enabled themes can be accessed.</description>
              <signature>_block_themes_access($theme)</signature>
              <docrelurl>_block_themes_access/7</docrelurl>
            </item>
            <item name= "_blog_post_exists">
              <description>Helper function to determine if a user has blog posts already.</description>
              <signature>_blog_post_exists($account)</signature>
              <docrelurl>_blog_post_exists/7</docrelurl>
            </item>
            <item name= "_book_add_form_elements">
              <description>Build the common elements of the book form for the node and outline forms.</description>
              <signature>_book_add_form_elements(&amp;$form, &amp;$form_state, $node)</signature>
              <docrelurl>_book_add_form_elements/7</docrelurl>
            </item>
            <item name= "_book_admin_table">
              <description>Build the table portion of the form for the book administration page.</description>
              <signature>_book_admin_table($node, &amp;$form)</signature>
              <docrelurl>_book_admin_table/7</docrelurl>
            </item>
            <item name= "_book_admin_table_tree">
              <description>Recursive helper to build the main table in the book administration page form.</description>
              <signature>_book_admin_table_tree($tree, &amp;$form)</signature>
              <docrelurl>_book_admin_table_tree/7</docrelurl>
            </item>
            <item name= "_book_flatten_menu">
              <description>Recursive helper function for book_get_flat_menu().</description>
              <signature>_book_flatten_menu($tree, &amp;$flat)</signature>
              <docrelurl>_book_flatten_menu/7</docrelurl>
            </item>
            <item name= "_book_install_type_create">
              <description>
                ▸ 1 function calls _book_install_type_create()
                ▾ 1 function calls _book_install_type_create()
                book_install in modules/book/book.install
                Implements hook_install().
              </description>
              <signature>_book_install_type_create()</signature>
              <docrelurl>_book_install_type_create/7</docrelurl>
            </item>
            <item name= "_book_link_defaults">
              <description>Return an array with default values for a book link.</description>
              <signature>_book_link_defaults($nid)</signature>
              <docrelurl>_book_link_defaults/7</docrelurl>
            </item>
            <item name= "_book_outline_access">
              <description>Menu item access callback - determine if the outline tab is accessible.</description>
              <signature>_book_outline_access($node)</signature>
              <docrelurl>_book_outline_access/7</docrelurl>
            </item>
            <item name= "_book_outline_remove_access">
              <description>Menu item access callback - determine if the user can remove nodes from the outline.</description>
              <signature>_book_outline_remove_access($node)</signature>
              <docrelurl>_book_outline_remove_access/7</docrelurl>
            </item>
            <item name= "_book_parent_depth_limit">
              <description>Find the depth limit for items in the parent select.</description>
              <signature>_book_parent_depth_limit($book_link)</signature>
              <docrelurl>_book_parent_depth_limit/7</docrelurl>
            </item>
            <item name= "_book_parent_select">
              <description>Build the parent selection form element for the node form or outline tab. This function is also called when generating a new set of options during the AJAX callback, so an array is returned that can be used to replace an existing form element.</description>
              <signature>_book_parent_select($book_link)</signature>
              <docrelurl>_book_parent_select/7</docrelurl>
            </item>
            <item name= "_book_toc_recurse">
              <description>Recursively processes and formats menu items for book_toc(). This helper function recursively modifies the $toc array for each item in $tree, ignoring items in the exclude array or at a depth greater than the limit. Truncates titles over thirty characters and appends an indentation string incremented by depth.</description>
              <signature>_book_toc_recurse($tree, $indent, &amp;$toc, $exclude, $depth_limit)</signature>
              <docrelurl>_book_toc_recurse/7</docrelurl>
            </item>
            <item name= "_book_update_outline">
              <description>Common helper function to handles additions and updates to the book outline. Performs all additions and updates to the book outline through node addition, node editing, node deletion, or the outline tab.</description>
              <signature>_book_update_outline($node)</signature>
              <docrelurl>_book_update_outline/7</docrelurl>
            </item>
            <item name= "_cache_get_object">
              <description>Get the cache object for a cache bin. By default, this returns an instance of the DrupalDatabaseCache class. Classes implementing DrupalCacheInterface can register themselves both as a default implementation and for specific bins.</description>
              <signature>_cache_get_object($bin)</signature>
              <docrelurl>_cache_get_object/7</docrelurl>
            </item>
            <item name= "_color_blend">
              <description>Blend two hex colors and return the GD color.</description>
              <signature>_color_blend($img, $hex1, $hex2, $alpha)</signature>
              <docrelurl>_color_blend/7</docrelurl>
            </item>
            <item name= "_color_gd">
              <description>Convert a hex triplet into a GD color.</description>
              <signature>_color_gd($img, $hex)</signature>
              <docrelurl>_color_gd/7</docrelurl>
            </item>
            <item name= "_color_hsl2rgb">
              <description>Convert a HSL triplet into RGB.</description>
              <signature>_color_hsl2rgb($hsl)</signature>
              <docrelurl>_color_hsl2rgb/7</docrelurl>
            </item>
            <item name= "_color_html_alter">
              <description>Callback for the theme to alter the resources used.</description>
              <signature>_color_html_alter(&amp;$vars)</signature>
              <docrelurl>_color_html_alter/7</docrelurl>
            </item>
            <item name= "_color_hue2rgb">
              <description>Helper function for _color_hsl2rgb().</description>
              <signature>_color_hue2rgb($m1, $m2, $h)</signature>
              <docrelurl>_color_hue2rgb/7</docrelurl>
            </item>
            <item name= "_color_pack">
              <description>Convert an RGB triplet to a hex color.</description>
              <signature>_color_pack($rgb, $normalize = FALSE)</signature>
              <docrelurl>_color_pack/7</docrelurl>
            </item>
            <item name= "_color_page_alter">
              <description>Callback for the theme to alter the resources used.</description>
              <signature>_color_page_alter(&amp;$vars)</signature>
              <docrelurl>_color_page_alter/7</docrelurl>
            </item>
            <item name= "_color_render_images">
              <description>Render images that match a given palette.</description>
              <signature>_color_render_images($theme, &amp;$info, &amp;$paths, $palette)</signature>
              <docrelurl>_color_render_images/7</docrelurl>
            </item>
            <item name= "_color_rewrite_stylesheet">
              <description>Rewrite the stylesheet to match the colors in the palette.</description>
              <signature>_color_rewrite_stylesheet($theme, &amp;$info, &amp;$paths, $palette, $style)</signature>
              <docrelurl>_color_rewrite_stylesheet/7</docrelurl>
            </item>
            <item name= "_color_rgb2hsl">
              <description>Convert an RGB triplet to HSL.</description>
              <signature>_color_rgb2hsl($rgb)</signature>
              <docrelurl>_color_rgb2hsl/7</docrelurl>
            </item>
            <item name= "_color_save_stylesheet">
              <description>Save the rewritten stylesheet to disk.</description>
              <signature>_color_save_stylesheet($file, $style, &amp;$paths)</signature>
              <docrelurl>_color_save_stylesheet/7</docrelurl>
            </item>
            <item name= "_color_shift">
              <description>Shift a given color, using a reference pair and a target blend color. Note: this function is significantly different from the JS version, as it is written to match the blended images perfectly.</description>
              <signature>_color_shift($given, $ref1, $ref2, $target)</signature>
              <docrelurl>_color_shift/7</docrelurl>
            </item>
            <item name= "_color_theme_select_form_alter">
              <description>Helper for hook_form_FORM_ID_alter() implementations.</description>
              <signature>_color_theme_select_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>_color_theme_select_form_alter/7</docrelurl>
            </item>
            <item name= "_color_unpack">
              <description>Convert a hex color into an RGB triplet.</description>
              <signature>_color_unpack($hex, $normalize = FALSE)</signature>
              <docrelurl>_color_unpack/7</docrelurl>
            </item>
            <item name= "_comment_body_field_instance_create">
              <description>Helper function which creates a comment body field instance for a given node type.</description>
              <signature>_comment_body_field_instance_create($info)</signature>
              <docrelurl>_comment_body_field_instance_create/7</docrelurl>
            </item>
            <item name= "_comment_get_modes">
              <description>Return an array of viewing modes for comment listings. We can't use a global variable array because the locale system is not initialized yet when the comment module is loaded.</description>
              <signature>_comment_get_modes()</signature>
              <docrelurl>_comment_get_modes/7</docrelurl>
            </item>
            <item name= "_comment_per_page">
              <description>Return an array of "comments per page" settings from which the user can choose.</description>
              <signature>_comment_per_page()</signature>
              <docrelurl>_comment_per_page/7</docrelurl>
            </item>
            <item name= "_comment_update_node_statistics">
              <description>Updates the comment statistics for a given node. This should be called any time a comment is added, deleted, or updated. The following fields are contained in the node_comment_statistics table.</description>
              <signature>_comment_update_node_statistics($nid)</signature>
              <docrelurl>_comment_update_node_statistics/7</docrelurl>
            </item>
            <item name= "_contact_personal_tab_access">
              <description>Menu access callback for a user's personal contact form.</description>
              <signature>_contact_personal_tab_access(stdClass $account)</signature>
              <docrelurl>_contact_personal_tab_access/7</docrelurl>
            </item>
            <item name= "_country_get_predefined_list">
              <description>Get an array of all country code => country name pairs. Get an array of all country code => country name pairs as laid out in ISO 3166-1 alpha-2. Grabbed from location project (http://drupal.org/project/location).</description>
              <signature>_country_get_predefined_list()</signature>
              <docrelurl>_country_get_predefined_list/7</docrelurl>
            </item>
            <item name= "_dblog_get_message_types">
              <description>
                ▸ 1 function calls _dblog_get_message_types()
                ▾ 1 function calls _dblog_get_message_types()
                dblog_filters in modules/dblog/dblog.admin.inc
                List dblog administration filters that can be applied.
              </description>
              <signature>_dblog_get_message_types()</signature>
              <docrelurl>_dblog_get_message_types/7</docrelurl>
            </item>
            <item name= "_db_create_keys_sql">
              <description>Related topics</description>
              <signature>_db_create_keys_sql($spec)</signature>
              <docrelurl>_db_create_keys_sql/7</docrelurl>
            </item>
            <item name= "_decode_entities">
              <description>Helper function for decode_entities</description>
              <signature>_decode_entities($prefix, $codepoint, $original, &amp;$html_entities, &amp;$exclude)</signature>
              <docrelurl>_decode_entities/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_configuration">
              <description>Bootstrap configuration: Setup script environment and load settings.php.</description>
              <signature>_drupal_bootstrap_configuration()</signature>
              <docrelurl>_drupal_bootstrap_configuration/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_database">
              <description>Bootstrap database: Initialize database system and register autoload functions.</description>
              <signature>_drupal_bootstrap_database()</signature>
              <docrelurl>_drupal_bootstrap_database/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_full">
              <description>
                ▸ 1 function calls _drupal_bootstrap_full()
                ▾ 1 function calls _drupal_bootstrap_full()
                drupal_bootstrap in includes/bootstrap.inc
                A string describing a phase of Drupal to load. Each phase adds to the previous one, so invoking a later phase automatically runs the earlier phases too. The most important usage is that if you want to access the Drupal database from a script without…
              </description>
              <signature>_drupal_bootstrap_full()</signature>
              <docrelurl>_drupal_bootstrap_full/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_page_cache">
              <description>Bootstrap page cache: Try to serve a page from cache.</description>
              <signature>_drupal_bootstrap_page_cache()</signature>
              <docrelurl>_drupal_bootstrap_page_cache/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_page_header">
              <description>Bootstrap page header: Invoke hook_boot(), initialize locking system, and send default HTTP headers.</description>
              <signature>_drupal_bootstrap_page_header()</signature>
              <docrelurl>_drupal_bootstrap_page_header/7</docrelurl>
            </item>
            <item name= "_drupal_bootstrap_variables">
              <description>Bootstrap variables: Load system variables and all enabled bootstrap modules.</description>
              <signature>_drupal_bootstrap_variables()</signature>
              <docrelurl>_drupal_bootstrap_variables/7</docrelurl>
            </item>
            <item name= "_drupal_build_css_path">
              <description>Helper function for drupal_build_css_cache(). This function will prefix all paths within a CSS file.</description>
              <signature>_drupal_build_css_path($matches, $base = NULL)</signature>
              <docrelurl>_drupal_build_css_path/7</docrelurl>
            </item>
            <item name= "_drupal_decode_exception">
              <description>Decode an exception, especially to retrive the correct caller.</description>
              <signature>_drupal_decode_exception($exception)</signature>
              <docrelurl>_drupal_decode_exception/7</docrelurl>
            </item>
            <item name= "_drupal_default_html_head">
              <description>Returns elements that are always displayed in the HEAD tag of the HTML page.</description>
              <signature>_drupal_default_html_head()</signature>
              <docrelurl>_drupal_default_html_head/7</docrelurl>
            </item>
            <item name= "_drupal_depth_first_search">
              <description>Helper function to perform a depth first sort.</description>
              <signature>_drupal_depth_first_search(&amp;$graph, &amp;$state, $start, &amp;$component = NULL)</signature>
              <docrelurl>_drupal_depth_first_search/7</docrelurl>
            </item>
            <item name= "_drupal_error_handler">
              <description>Custom PHP error handler.</description>
              <signature>_drupal_error_handler($error_level, $message, $filename, $line, $context)</signature>
              <docrelurl>_drupal_error_handler/7</docrelurl>
            </item>
            <item name= "_drupal_error_handler_real">
              <description>Custom PHP error handler.</description>
              <signature>_drupal_error_handler_real($error_level, $message, $filename, $line, $context)</signature>
              <docrelurl>_drupal_error_handler_real/7</docrelurl>
            </item>
            <item name= "_drupal_exception_handler">
              <description>Custom PHP exception handler. Uncaught exceptions are those not enclosed in a try/catch block. They are always fatal: the execution of the script will stop as soon as the exception handler exits.</description>
              <signature>_drupal_exception_handler($exception)</signature>
              <docrelurl>_drupal_exception_handler/7</docrelurl>
            </item>
            <item name= "_drupal_flush_css_js">
              <description>Helper function to change query-strings on css/js files. Changes the character added to all css/js files as dummy query-string, so that all browsers are forced to reload fresh files.</description>
              <signature>_drupal_flush_css_js()</signature>
              <docrelurl>_drupal_flush_css_js/7</docrelurl>
            </item>
            <item name= "_drupal_get_last_caller">
              <description>Gets the last caller from a backtrace.</description>
              <signature>_drupal_get_last_caller($backtrace)</signature>
              <docrelurl>_drupal_get_last_caller/7</docrelurl>
            </item>
            <item name= "_drupal_html_to_mail_urls">
              <description>Helper function for drupal_html_to_text(). Keeps track of URLs and replaces them with placeholder tokens.</description>
              <signature>_drupal_html_to_mail_urls($match = NULL, $reset = FALSE)</signature>
              <docrelurl>_drupal_html_to_mail_urls/7</docrelurl>
            </item>
            <item name= "_drupal_html_to_text_clean">
              <description>Helper function for drupal_wrap_mail() and drupal_html_to_text(). Replace all non-quotation markers from a given piece of indentation with spaces.</description>
              <signature>_drupal_html_to_text_clean($indent)</signature>
              <docrelurl>_drupal_html_to_text_clean/7</docrelurl>
            </item>
            <item name= "_drupal_html_to_text_pad">
              <description>Helper function for drupal_html_to_text(). Pad the last line with the given character.</description>
              <signature>_drupal_html_to_text_pad($text, $pad, $prefix = '')</signature>
              <docrelurl>_drupal_html_to_text_pad/7</docrelurl>
            </item>
            <item name= "_drupal_load_stylesheet">
              <description>Loads stylesheets recursively and returns contents with corrected paths. This function is used for recursive loading of stylesheets and returns the stylesheet content with all url() paths corrected.</description>
              <signature>_drupal_load_stylesheet($matches)</signature>
              <docrelurl>_drupal_load_stylesheet/7</docrelurl>
            </item>
            <item name= "_drupal_log_error">
              <description>Log a PHP error or exception, display an error page in fatal cases.</description>
              <signature>_drupal_log_error($error, $fatal = FALSE)</signature>
              <docrelurl>_drupal_log_error/7</docrelurl>
            </item>
            <item name= "_drupal_maintenance_theme">
              <description>Sets up the theming system for maintenance page. Used for site installs, updates and when the site is in maintenance mode. It also applies when the database is unavailable or bootstrap was not complete. Seven is always used for the initial install and update operations. In other cases, Garland is used, but this can be overridden by setting a "maintenance_theme" key in the $conf variable in settings.php.</description>
              <signature>_drupal_maintenance_theme()</signature>
              <docrelurl>_drupal_maintenance_theme/7</docrelurl>
            </item>
            <item name= "_drupal_render_exception_safe">
              <description>Render an error message for an exception without any possibility of a further exception occuring.</description>
              <signature>_drupal_render_exception_safe($exception)</signature>
              <docrelurl>_drupal_render_exception_safe/7</docrelurl>
            </item>
            <item name= "_drupal_schema_initialize">
              <description>Fill in required default values for table definitions returned by hook_schema().</description>
              <signature>_drupal_schema_initialize($module, &amp;$schema)</signature>
              <docrelurl>_drupal_schema_initialize/7</docrelurl>
            </item>
            <item name= "_drupal_session_close">
              <description>Session handler assigned by session_set_save_handler(). This function is used to close the current session. Because Drupal stores session data in the database immediately on write, this function does not need to do anything.</description>
              <signature>_drupal_session_close()</signature>
              <docrelurl>_drupal_session_close/7</docrelurl>
            </item>
            <item name= "_drupal_session_delete_cookie">
              <description>Deletes the session cookie.</description>
              <signature>_drupal_session_delete_cookie($name, $force_insecure = FALSE)</signature>
              <docrelurl>_drupal_session_delete_cookie/7</docrelurl>
            </item>
            <item name= "_drupal_session_destroy">
              <description>Session handler assigned by session_set_save_handler(). Cleanup a specific session.</description>
              <signature>_drupal_session_destroy($sid)</signature>
              <docrelurl>_drupal_session_destroy/7</docrelurl>
            </item>
            <item name= "_drupal_session_garbage_collection">
              <description>Session handler assigned by session_set_save_handler(). Cleanup stalled sessions.</description>
              <signature>_drupal_session_garbage_collection($lifetime)</signature>
              <docrelurl>_drupal_session_garbage_collection/7</docrelurl>
            </item>
            <item name= "_drupal_session_open">
              <description>Session handler assigned by session_set_save_handler(). This function is used to handle any initialization, such as file paths or database connections, that is needed before accessing session data. Drupal does not need to initialize anything in this function.</description>
              <signature>_drupal_session_open()</signature>
              <docrelurl>_drupal_session_open/7</docrelurl>
            </item>
            <item name= "_drupal_session_read">
              <description>Session handler assigned by session_set_save_handler(). This function will be called by PHP to retrieve the current user's session data, which is stored in the database. It also loads the current user's appropriate roles into the user object.</description>
              <signature>_drupal_session_read($sid)</signature>
              <docrelurl>_drupal_session_read/7</docrelurl>
            </item>
            <item name= "_drupal_session_write">
              <description>Session handler assigned by session_set_save_handler(). This function will be called by PHP to store the current user's session, which Drupal saves to the database.</description>
              <signature>_drupal_session_write($sid, $value)</signature>
              <docrelurl>_drupal_session_write/7</docrelurl>
            </item>
            <item name= "_drupal_set_preferred_header_name">
              <description>Header names are case-insensitive, but for maximum compatibility they should follow "common form" (see RFC 2617, section 4.2).</description>
              <signature>_drupal_set_preferred_header_name($name = NULL)</signature>
              <docrelurl>_drupal_set_preferred_header_name/7</docrelurl>
            </item>
            <item name= "_drupal_shutdown_function">
              <description>Internal function used to execute registered shutdown functions.</description>
              <signature>_drupal_shutdown_function()</signature>
              <docrelurl>_drupal_shutdown_function/7</docrelurl>
            </item>
            <item name= "_drupal_theme_access">
              <description>Helper function for determining access to a theme.</description>
              <signature>_drupal_theme_access($theme)</signature>
              <docrelurl>_drupal_theme_access/7</docrelurl>
            </item>
            <item name= "_drupal_theme_initialize">
              <description>Initialize the theme system given already loaded information. This function is useful to initialize a theme when no database is present.</description>
              <signature>_drupal_theme_initialize($theme, $base_theme = array(), $registry_callback = '_theme_load_registry')</signature>
              <docrelurl>_drupal_theme_initialize/7</docrelurl>
            </item>
            <item name= "_drupal_wrap_mail_line">
              <description>Helper function for array_walk in drupal_wrap_mail(). Wraps words on a single line.</description>
              <signature>_drupal_wrap_mail_line(&amp;$line, $key, $values)</signature>
              <docrelurl>_drupal_wrap_mail_line/7</docrelurl>
            </item>
            <item name= "_element_validate_integer">
              <description>Helper form element validator: integer.</description>
              <signature>_element_validate_integer($element, &amp;$form_state)</signature>
              <docrelurl>_element_validate_integer/7</docrelurl>
            </item>
            <item name= "_element_validate_integer_positive">
              <description>Helper form element validator: integer > 0.</description>
              <signature>_element_validate_integer_positive($element, &amp;$form_state)</signature>
              <docrelurl>_element_validate_integer_positive/7</docrelurl>
            </item>
            <item name= "_element_validate_number">
              <description>Helper form element validator: number.</description>
              <signature>_element_validate_number($element, &amp;$form_state)</signature>
              <docrelurl>_element_validate_number/7</docrelurl>
            </item>
            <item name= "_field_extra_fields_pre_render">
              <description>Pre-render callback to adjust weights and visibility of non-field elements.</description>
              <signature>_field_extra_fields_pre_render($elements)</signature>
              <docrelurl>_field_extra_fields_pre_render/7</docrelurl>
            </item>
            <item name= "_field_filter_items">
              <description>Helper function to filter out empty field values.</description>
              <signature>_field_filter_items($field, $items)</signature>
              <docrelurl>_field_filter_items/7</docrelurl>
            </item>
            <item name= "_field_filter_xss_allowed_tags">
              <description>List of tags allowed by field_filter_xss().</description>
              <signature>_field_filter_xss_allowed_tags()</signature>
              <docrelurl>_field_filter_xss_allowed_tags/7</docrelurl>
            </item>
            <item name= "_field_filter_xss_display_allowed_tags">
              <description>Human-readable list of allowed tags, for display in help texts.</description>
              <signature>_field_filter_xss_display_allowed_tags()</signature>
              <docrelurl>_field_filter_xss_display_allowed_tags/7</docrelurl>
            </item>
            <item name= "_field_info_collate_fields">
              <description>Collates all information on existing fields and instances.</description>
              <signature>_field_info_collate_fields($reset = FALSE)</signature>
              <docrelurl>_field_info_collate_fields/7</docrelurl>
            </item>
            <item name= "_field_info_collate_types">
              <description>Collates all information on field types, widget types and related structures.</description>
              <signature>_field_info_collate_types($reset = FALSE)</signature>
              <docrelurl>_field_info_collate_types/7</docrelurl>
            </item>
            <item name= "_field_info_prepare_field">
              <description>Prepares a field definition for the current run-time context. Since the field was last saved or updated, new field settings can be expected.</description>
              <signature>_field_info_prepare_field($field)</signature>
              <docrelurl>_field_info_prepare_field/7</docrelurl>
            </item>
            <item name= "_field_info_prepare_instance">
              <description>Prepares an instance definition for the current run-time context. Since the instance was last saved or updated, a number of things might have changed: widgets or formatters disabled, new settings expected, new build modes added...</description>
              <signature>_field_info_prepare_instance($instance, $field)</signature>
              <docrelurl>_field_info_prepare_instance/7</docrelurl>
            </item>
            <item name= "_field_info_prepare_instance_display">
              <description>Adapts display specifications to the current run-time context.</description>
              <signature>_field_info_prepare_instance_display($field, $display)</signature>
              <docrelurl>_field_info_prepare_instance_display/7</docrelurl>
            </item>
            <item name= "_field_info_prepare_instance_widget">
              <description>Prepares widget specifications for the current run-time context.</description>
              <signature>_field_info_prepare_instance_widget($field, $widget)</signature>
              <docrelurl>_field_info_prepare_instance_widget/7</docrelurl>
            </item>
            <item name= "_field_invoke">
              <description>Invoke a field hook.</description>
              <signature>_field_invoke($op, $entity_type, $entity, &amp;$a = NULL, &amp;$b = NULL, $options = array())</signature>
              <docrelurl>_field_invoke/7</docrelurl>
            </item>
            <item name= "_field_invoke_default">
              <description>Invoke field.module's version of a field hook. This function invokes the field_default_[op]() function. Use _field_invoke() to invoke the field type implementation, hook_field_[op]().</description>
              <signature>_field_invoke_default($op, $entity_type, $entity, &amp;$a = NULL, &amp;$b = NULL, $options = array())</signature>
              <docrelurl>_field_invoke_default/7</docrelurl>
            </item>
            <item name= "_field_invoke_get_instances">
              <description>Helper for _field_invoke(): retrieves a list of instances to operate on.</description>
              <signature>_field_invoke_get_instances($entity_type, $bundle, $options)</signature>
              <docrelurl>_field_invoke_get_instances/7</docrelurl>
            </item>
            <item name= "_field_invoke_multiple">
              <description>Invoke a field hook across fields on multiple entities.</description>
              <signature>_field_invoke_multiple($op, $entity_type, $entities, &amp;$a = NULL, &amp;$b = NULL, $options = array())</signature>
              <docrelurl>_field_invoke_multiple/7</docrelurl>
            </item>
            <item name= "_field_invoke_multiple_default">
              <description>Invoke field.module's version of a field hook on multiple entities. This function invokes the field_default_[op]() function. Use _field_invoke_multiple() to invoke the field type implementation, hook_field_[op]().</description>
              <signature>_field_invoke_multiple_default($op, $entity_type, $entities, &amp;$a = NULL, &amp;$b = NULL, $options = array())</signature>
              <docrelurl>_field_invoke_multiple_default/7</docrelurl>
            </item>
            <item name= "_field_language_suggestion">
              <description>Process the given language suggestion based on the available languages. If a non-empty language suggestion is provided it must appear among the available languages, otherwise it will be ignored.</description>
              <signature>_field_language_suggestion($available_languages, $language_suggestion, $field_name)</signature>
              <docrelurl>_field_language_suggestion/7</docrelurl>
            </item>
            <item name= "_field_sort_items">
              <description>Helper function to sort items in a field according to user drag-n-drop reordering.</description>
              <signature>_field_sort_items($field, $items)</signature>
              <docrelurl>_field_sort_items/7</docrelurl>
            </item>
            <item name= "_field_sort_items_helper">
              <description>Sort function for items order. (copied form element_sort(), which acts on #weight keys)</description>
              <signature>_field_sort_items_helper($a, $b)</signature>
              <docrelurl>_field_sort_items_helper/7</docrelurl>
            </item>
            <item name= "_field_sort_items_value_helper">
              <description>Same as above, using ['_weight']['#value']</description>
              <signature>_field_sort_items_value_helper($a, $b)</signature>
              <docrelurl>_field_sort_items_value_helper/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_columnname">
              <description>Generate a column name for a field data table.</description>
              <signature>_field_sql_storage_columnname($name, $column)</signature>
              <docrelurl>_field_sql_storage_columnname/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_etid">
              <description>Retrieve or assign an entity type id for an entity type.</description>
              <signature>_field_sql_storage_etid($entity_type)</signature>
              <docrelurl>_field_sql_storage_etid/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_indexname">
              <description>Generate an index name for a field data table.</description>
              <signature>_field_sql_storage_indexname($name, $index)</signature>
              <docrelurl>_field_sql_storage_indexname/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_query_join_entity">
              <description>Adds the base entity table to a field query object.</description>
              <signature>_field_sql_storage_query_join_entity(SelectQuery $select_query, $entity_type, $field_base_table)</signature>
              <docrelurl>_field_sql_storage_query_join_entity/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_revision_tablename">
              <description>Generate a table name for a field revision archive table.</description>
              <signature>_field_sql_storage_revision_tablename($field)</signature>
              <docrelurl>_field_sql_storage_revision_tablename/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_schema">
              <description>Return the database schema for a field. This may contain one or more tables. Each table will contain the columns relevant for the specified field. Leave the $field's 'columns' and 'indexes' keys empty to get only the base schema.</description>
              <signature>_field_sql_storage_schema($field)</signature>
              <docrelurl>_field_sql_storage_schema/7</docrelurl>
            </item>
            <item name= "_field_sql_storage_tablename">
              <description>Generate a table name for a field data table.</description>
              <signature>_field_sql_storage_tablename($field)</signature>
              <docrelurl>_field_sql_storage_tablename/7</docrelurl>
            </item>
            <item name= "_field_test_field_storage_query_sort_helper">
              <description>Sort helper for field_test_field_storage_query(). Sorts by entity type and entity id.</description>
              <signature>_field_test_field_storage_query_sort_helper($a, $b)</signature>
              <docrelurl>_field_test_field_storage_query_sort_helper/7</docrelurl>
            </item>
            <item name= "_field_test_storage_data">
              <description>Helper function: stores or retrieves data from the 'storage backend'.</description>
              <signature>_field_test_storage_data($data = NULL)</signature>
              <docrelurl>_field_test_storage_data/7</docrelurl>
            </item>
            <item name= "_field_ui_bundle_admin_path">
              <description>Helper function to create the right administration path for a bundle.</description>
              <signature>_field_ui_bundle_admin_path($entity_type, $bundle_name)</signature>
              <docrelurl>_field_ui_bundle_admin_path/7</docrelurl>
            </item>
            <item name= "_field_ui_field_overview_form_validate_add_existing">
              <description>Helper function for field_ui_field_overview_form_validate. Validate the 'add existing field' row.</description>
              <signature>_field_ui_field_overview_form_validate_add_existing($form, &amp;$form_state)</signature>
              <docrelurl>_field_ui_field_overview_form_validate_add_existing/7</docrelurl>
            </item>
            <item name= "_field_ui_field_overview_form_validate_add_new">
              <description>Helper function for field_ui_field_overview_form_validate. Validate the 'add new field' row.</description>
              <signature>_field_ui_field_overview_form_validate_add_new($form, &amp;$form_state)</signature>
              <docrelurl>_field_ui_field_overview_form_validate_add_new/7</docrelurl>
            </item>
            <item name= "_field_ui_overview_order">
              <description>Helper function to order fields when theming overview forms.</description>
              <signature>_field_ui_overview_order(&amp;$form, $field_rows)</signature>
              <docrelurl>_field_ui_overview_order/7</docrelurl>
            </item>
            <item name= "_field_ui_view_mode_menu_access">
              <description>Menu access callback for the 'view mode display settings' pages.</description>
              <signature>_field_ui_view_mode_menu_access($entity_type, $bundle, $view_mode, $access_callback)</signature>
              <docrelurl>_field_ui_view_mode_menu_access/7</docrelurl>
            </item>
            <item name= "_field_write_instance">
              <description>Stores an instance record in the field configuration database.</description>
              <signature>_field_write_instance($instance, $update = FALSE)</signature>
              <docrelurl>_field_write_instance/7</docrelurl>
            </item>
            <item name= "_file_generic_settings_extensions">
              <description>Element validate callback for the allowed file extensions field. This doubles as a convenience clean-up function and a validation routine. Commas are allowed by the end-user, but ultimately the value will be stored as a space-separated list for compatibility with file_validate_extensions().</description>
              <signature>_file_generic_settings_extensions($element, &amp;$form_state)</signature>
              <docrelurl>_file_generic_settings_extensions/7</docrelurl>
            </item>
            <item name= "_file_generic_settings_file_directory_validate">
              <description>Element validate callback for the file destination field. Remove slashes from the beginning and end of the destination value and ensure that the file directory path is not included at the beginning of the value.</description>
              <signature>_file_generic_settings_file_directory_validate($element, &amp;$form_state)</signature>
              <docrelurl>_file_generic_settings_file_directory_validate/7</docrelurl>
            </item>
            <item name= "_file_generic_settings_max_filesize">
              <description>Element validate callback for the maximum upload size field. Ensure a size that can be parsed by parse_size() has been entered.</description>
              <signature>_file_generic_settings_max_filesize($element, &amp;$form_state)</signature>
              <docrelurl>_file_generic_settings_max_filesize/7</docrelurl>
            </item>
            <item name= "_file_test_form">
              <description>Form to test file uploads.</description>
              <signature>_file_test_form($form, &amp;$form_state)</signature>
              <docrelurl>_file_test_form/7</docrelurl>
            </item>
            <item name= "_file_test_form_submit">
              <description>Process the upload.</description>
              <signature>_file_test_form_submit(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>_file_test_form_submit/7</docrelurl>
            </item>
            <item name= "_file_test_get_return">
              <description>Load the appropriate return value.</description>
              <signature>_file_test_get_return($op)</signature>
              <docrelurl>_file_test_get_return/7</docrelurl>
            </item>
            <item name= "_file_test_log_call">
              <description>Store the values passed to a hook invocation.</description>
              <signature>_file_test_log_call($op, $args)</signature>
              <docrelurl>_file_test_log_call/7</docrelurl>
            </item>
            <item name= "_filter_autop">
              <description>Convert line breaks into &lt;p&gt; and &lt;br&gt; in an intelligent fashion. Based on: http://photomatt.net/scripts/autop</description>
              <signature>_filter_autop($text)</signature>
              <docrelurl>_filter_autop/7</docrelurl>
            </item>
            <item name= "_filter_autop_tips">
              <description>Filter tips callback for auto-paragraph filter.</description>
              <signature>_filter_autop_tips($filter, $format, $long = FALSE)</signature>
              <docrelurl>_filter_autop_tips/7</docrelurl>
            </item>
            <item name= "_filter_delete_format_access">
              <description>Access callback for deleting text formats.</description>
              <signature>_filter_delete_format_access($format)</signature>
              <docrelurl>_filter_delete_format_access/7</docrelurl>
            </item>
            <item name= "_filter_format_is_cacheable">
              <description>Helper function to determine whether the output of a given text format can be cached. The output of a given text format can be cached when all enabled filters in the text format allow caching.</description>
              <signature>_filter_format_is_cacheable($format)</signature>
              <docrelurl>_filter_format_is_cacheable/7</docrelurl>
            </item>
            <item name= "_filter_html">
              <description>HTML filter. Provides filtering of input into accepted HTML.</description>
              <signature>_filter_html($text, $filter)</signature>
              <docrelurl>_filter_html/7</docrelurl>
            </item>
            <item name= "_filter_htmlcorrector">
              <description>Scan input and make sure that all HTML tags are properly closed and nested.</description>
              <signature>_filter_htmlcorrector($text)</signature>
              <docrelurl>_filter_htmlcorrector/7</docrelurl>
            </item>
            <item name= "_filter_html_escape">
              <description>Escapes all HTML tags, so they will be visible instead of being effective.</description>
              <signature>_filter_html_escape($text)</signature>
              <docrelurl>_filter_html_escape/7</docrelurl>
            </item>
            <item name= "_filter_html_escape_tips">
              <description>Filter tips callback for HTML escaping filter.</description>
              <signature>_filter_html_escape_tips($filter, $format, $long = FALSE)</signature>
              <docrelurl>_filter_html_escape_tips/7</docrelurl>
            </item>
            <item name= "_filter_html_settings">
              <description>Settings callback for the HTML filter.</description>
              <signature>_filter_html_settings($form, &amp;$form_state, $filter, $format, $defaults)</signature>
              <docrelurl>_filter_html_settings/7</docrelurl>
            </item>
            <item name= "_filter_html_tips">
              <description>Filter tips callback for HTML filter.</description>
              <signature>_filter_html_tips($filter, $format, $long = FALSE)</signature>
              <docrelurl>_filter_html_tips/7</docrelurl>
            </item>
            <item name= "_filter_list_cmp">
              <description>Helper function for sorting the filter list by filter name.</description>
              <signature>_filter_list_cmp($a, $b)</signature>
              <docrelurl>_filter_list_cmp/7</docrelurl>
            </item>
            <item name= "_filter_tips">
              <description>Helper function for fetching filter tips.</description>
              <signature>_filter_tips($format_id, $long = FALSE)</signature>
              <docrelurl>_filter_tips/7</docrelurl>
            </item>
            <item name= "_filter_url">
              <description>URL filter. Automatically converts text web addresses (URLs, e-mail addresses, ftp links, etc.) into hyperlinks.</description>
              <signature>_filter_url($text, $filter)</signature>
              <docrelurl>_filter_url/7</docrelurl>
            </item>
            <item name= "_filter_url_parse_full_links">
              <description>Make links out of absolute URLs.</description>
              <signature>_filter_url_parse_full_links($match)</signature>
              <docrelurl>_filter_url_parse_full_links/7</docrelurl>
            </item>
            <item name= "_filter_url_parse_partial_links">
              <description>Make links out of domain names starting with "www."</description>
              <signature>_filter_url_parse_partial_links($match)</signature>
              <docrelurl>_filter_url_parse_partial_links/7</docrelurl>
            </item>
            <item name= "_filter_url_settings">
              <description>Settings callback for URL filter.</description>
              <signature>_filter_url_settings($form, &amp;$form_state, $filter, $format, $defaults)</signature>
              <docrelurl>_filter_url_settings/7</docrelurl>
            </item>
            <item name= "_filter_url_tips">
              <description>Filter tips callback for URL filter.</description>
              <signature>_filter_url_tips($filter, $format, $long = FALSE)</signature>
              <docrelurl>_filter_url_tips/7</docrelurl>
            </item>
            <item name= "_filter_url_trim">
              <description>Shortens long URLs to http://www.example.com/long/url...</description>
              <signature>_filter_url_trim($text, $length = NULL)</signature>
              <docrelurl>_filter_url_trim/7</docrelurl>
            </item>
            <item name= "_filter_xss_attributes">
              <description>Processes a string of HTML attributes.</description>
              <signature>_filter_xss_attributes($attr)</signature>
              <docrelurl>_filter_xss_attributes/7</docrelurl>
            </item>
            <item name= "_filter_xss_split">
              <description>Processes an HTML tag.</description>
              <signature>_filter_xss_split($m, $store = FALSE)</signature>
              <docrelurl>_filter_xss_split/7</docrelurl>
            </item>
            <item name= "_fix_gpc_magic">
              <description>Code includes/common.inc, line 1014</description>
              <signature>_fix_gpc_magic(&amp;$item)</signature>
              <docrelurl>_fix_gpc_magic/7</docrelurl>
            </item>
            <item name= "_fix_gpc_magic_files">
              <description>Helper function to strip slashes from $_FILES skipping over the tmp_name keys since PHP generates single backslashes for file paths on Windows systems. tmp_name does not have backslashes added see http://php.net/manual/en/features.file-upload.php#42280</description>
              <signature>_fix_gpc_magic_files(&amp;$item, $key)</signature>
              <docrelurl>_fix_gpc_magic_files/7</docrelurl>
            </item>
            <item name= "_format_date_callback">
              <description>Callback function for preg_replace_callback().</description>
              <signature>_format_date_callback(array $matches = NULL, $new_langcode = NULL)</signature>
              <docrelurl>_format_date_callback/7</docrelurl>
            </item>
            <item name= "_form_builder_handle_input_element">
              <description>Populate the #value and #name properties of input elements so they can be processed and rendered.</description>
              <signature>_form_builder_handle_input_element($form_id, &amp;$element, &amp;$form_state)</signature>
              <docrelurl>_form_builder_handle_input_element/7</docrelurl>
            </item>
            <item name= "_form_button_was_clicked">
              <description>Helper function to handle the convoluted logic of button click detection. This detects button controls that trigger a form submission by being clicked and having the click processed by the browser rather than being captured by JavaScript. Essentially, it detects if the button's name and value are part of the POST data, but with extra code to deal with the convoluted way in which browsers submit data for image button clicks.</description>
              <signature>_form_button_was_clicked($element, &amp;$form_state)</signature>
              <docrelurl>_form_button_was_clicked/7</docrelurl>
            </item>
            <item name= "_form_element_triggered_scripted_submission">
              <description>Helper function to handle the convoluted logic of button click detection. This detects button or non-button controls that trigger a form submission via AJAX or some other scriptable environment. These environments can set the special input key '_triggering_element_name' to identify the triggering element. If the name alone doesn't identify the element uniquely, the input key '_triggering_element_value' may also be set to require a match on element value. An example where this is needed is if there are several buttons all named 'op', and only differing in their value.</description>
              <signature>_form_element_triggered_scripted_submission($element, &amp;$form_state)</signature>
              <docrelurl>_form_element_triggered_scripted_submission/7</docrelurl>
            </item>
            <item name= "_form_options_flatten">
              <description>Related topics</description>
              <signature>_form_options_flatten($array)</signature>
              <docrelurl>_form_options_flatten/7</docrelurl>
            </item>
            <item name= "_form_set_class">
              <description>Sets a form element's class attribute. Adds 'required' and 'error' classes as needed.</description>
              <signature>_form_set_class(&amp;$element, $class = array())</signature>
              <docrelurl>_form_set_class/7</docrelurl>
            </item>
            <item name= "_form_set_value">
              <description>Helper function for form_set_value() and _form_builder_handle_input_element(). We iterate over $parents and create nested arrays for them in $form_values if needed. Then we insert the value into the last parent key.</description>
              <signature>_form_set_value(&amp;$form_values, $element, $parents, $value)</signature>
              <docrelurl>_form_set_value/7</docrelurl>
            </item>
            <item name= "_form_test_checkbox">
              <description>Build a form to test a checkbox.</description>
              <signature>_form_test_checkbox($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_checkbox/7</docrelurl>
            </item>
            <item name= "_form_test_checkbox_submit">
              <description>Return the form values via JSON.</description>
              <signature>_form_test_checkbox_submit($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_checkbox_submit/7</docrelurl>
            </item>
            <item name= "_form_test_disabled_elements">
              <description>Build a form to test disabled elements.</description>
              <signature>_form_test_disabled_elements($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_disabled_elements/7</docrelurl>
            </item>
            <item name= "_form_test_disabled_elements_submit">
              <description>Return the form values via JSON.</description>
              <signature>_form_test_disabled_elements_submit($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_disabled_elements_submit/7</docrelurl>
            </item>
            <item name= "_form_test_input_forgery">
              <description>Build a form to test input forgery of enabled elements.</description>
              <signature>_form_test_input_forgery($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_input_forgery/7</docrelurl>
            </item>
            <item name= "_form_test_input_forgery_submit">
              <description>Return the form values via JSON.</description>
              <signature>_form_test_input_forgery_submit($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_input_forgery_submit/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_empty_form">
              <description>Test functionality of the tableselect #empty property.</description>
              <signature>_form_test_tableselect_empty_form($form, $form_state)</signature>
              <docrelurl>_form_test_tableselect_empty_form/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_form_builder">
              <description>Build a form to test the tableselect element.</description>
              <signature>_form_test_tableselect_form_builder($form, $form_state, $element_properties)</signature>
              <docrelurl>_form_test_tableselect_form_builder/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_get_data">
              <description>Create a header and options array. Helper function for callbacks.</description>
              <signature>_form_test_tableselect_get_data()</signature>
              <docrelurl>_form_test_tableselect_get_data/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_js_select_form">
              <description>Test functionality of the tableselect #js_select property.</description>
              <signature>_form_test_tableselect_js_select_form($form, $form_state, $action)</signature>
              <docrelurl>_form_test_tableselect_js_select_form/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_multiple_false_form">
              <description>Test the tableselect #multiple = FALSE functionality.</description>
              <signature>_form_test_tableselect_multiple_false_form($form, $form_state)</signature>
              <docrelurl>_form_test_tableselect_multiple_false_form/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_multiple_false_form_submit">
              <description>Process the tableselect #multiple = FALSE submitted values.</description>
              <signature>_form_test_tableselect_multiple_false_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_tableselect_multiple_false_form_submit/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_multiple_true_form">
              <description>Test the tableselect #multiple = TRUE functionality.</description>
              <signature>_form_test_tableselect_multiple_true_form($form, $form_state)</signature>
              <docrelurl>_form_test_tableselect_multiple_true_form/7</docrelurl>
            </item>
            <item name= "_form_test_tableselect_multiple_true_form_submit">
              <description>Process the tableselect #multiple = TRUE submitted values.</description>
              <signature>_form_test_tableselect_multiple_true_form_submit($form, &amp;$form_state)</signature>
              <docrelurl>_form_test_tableselect_multiple_true_form_submit/7</docrelurl>
            </item>
            <item name= "_form_validate">
              <description>Performs validation on form elements. First ensures required fields are completed, #maxlength is not exceeded, and selected options were in the list of options given to the user. Then calls user-defined validators.</description>
              <signature>_form_validate(&amp;$elements, &amp;$form_state, $form_id = NULL)</signature>
              <docrelurl>_form_validate/7</docrelurl>
            </item>
            <item name= "_forum_get_topic_order">
              <description>
                ▸ 1 function calls _forum_get_topic_order()
                ▾ 1 function calls _forum_get_topic_order()
                forum_get_topics in modules/forum/forum.module
              </description>
              <signature>_forum_get_topic_order($sortby)</signature>
              <docrelurl>_forum_get_topic_order/7</docrelurl>
            </item>
            <item name= "_forum_node_check_node_type">
              <description>Check whether a content type can be used in a forum.</description>
              <signature>_forum_node_check_node_type($node)</signature>
              <docrelurl>_forum_node_check_node_type/7</docrelurl>
            </item>
            <item name= "_forum_parent_select">
              <description>Returns a select box for available parent terms</description>
              <signature>_forum_parent_select($tid, $title, $child_type)</signature>
              <docrelurl>_forum_parent_select/7</docrelurl>
            </item>
            <item name= "_forum_topics_unread">
              <description>Calculate the number of nodes the user has not yet read and are newer than NODE_NEW_LIMIT.</description>
              <signature>_forum_topics_unread($term, $uid)</signature>
              <docrelurl>_forum_topics_unread/7</docrelurl>
            </item>
            <item name= "_forum_update_forum_index">
              <description>Updates the taxonomy index for a given node.</description>
              <signature>_forum_update_forum_index($nid)</signature>
              <docrelurl>_forum_update_forum_index/7</docrelurl>
            </item>
            <item name= "_forum_user_last_visit">
              <description>
                ▸ 1 function calls _forum_user_last_visit()
                ▾ 1 function calls _forum_user_last_visit()
                forum_get_topics in modules/forum/forum.module
              </description>
              <signature>_forum_user_last_visit($nid)</signature>
              <docrelurl>_forum_user_last_visit/7</docrelurl>
            </item>
            <item name= "_image_effect_definitions_sort">
              <description>Internal function for sorting image effect definitions through uasort().</description>
              <signature>_image_effect_definitions_sort($a, $b)</signature>
              <docrelurl>_image_effect_definitions_sort/7</docrelurl>
            </item>
            <item name= "_image_field_resolution_validate">
              <description>Element validate function for resolution fields.</description>
              <signature>_image_field_resolution_validate($element, &amp;$form_state)</signature>
              <docrelurl>_image_field_resolution_validate/7</docrelurl>
            </item>
            <item name= "_image_test_log_call">
              <description>Store the values passed to a toolkit call.</description>
              <signature>_image_test_log_call($op, $args)</signature>
              <docrelurl>_image_test_log_call/7</docrelurl>
            </item>
            <item name= "_install_configure_form">
              <description>Forms API array definition for site configuration.</description>
              <signature>_install_configure_form($form, &amp;$form_state, &amp;$install_state)</signature>
              <docrelurl>_install_configure_form/7</docrelurl>
            </item>
            <item name= "_install_module_batch">
              <description>Batch callback for batch installation of modules.</description>
              <signature>_install_module_batch($module, $module_name, &amp;$context)</signature>
              <docrelurl>_install_module_batch/7</docrelurl>
            </item>
            <item name= "_install_select_profile">
              <description>Helper function for automatically selecting an installation profile from a list or from a selection passed in via $_POST.</description>
              <signature>_install_select_profile($profiles)</signature>
              <docrelurl>_install_select_profile/7</docrelurl>
            </item>
            <item name= "_locale_batch_build">
              <description>Build a locale batch from an array of files.</description>
              <signature>_locale_batch_build($files, $finished = NULL, $components = array())</signature>
              <docrelurl>_locale_batch_build/7</docrelurl>
            </item>
            <item name= "_locale_batch_import">
              <description>Perform interface translation import as a batch step.</description>
              <signature>_locale_batch_import($filepath, &amp;$context)</signature>
              <docrelurl>_locale_batch_import/7</docrelurl>
            </item>
            <item name= "_locale_batch_language_finished">
              <description>Finished callback of language addition locale import batch. Inform the user of translation files imported.</description>
              <signature>_locale_batch_language_finished($success, $results)</signature>
              <docrelurl>_locale_batch_language_finished/7</docrelurl>
            </item>
            <item name= "_locale_batch_system_finished">
              <description>Finished callback of system page locale import batch. Inform the user of translation files imported.</description>
              <signature>_locale_batch_system_finished($success, $results)</signature>
              <docrelurl>_locale_batch_system_finished/7</docrelurl>
            </item>
            <item name= "_locale_export_get_strings">
              <description>Generates a structured array of all strings with translations in $language, if given. This array can be used to generate an export of the string in the database.</description>
              <signature>_locale_export_get_strings($language = NULL, $group = 'default')</signature>
              <docrelurl>_locale_export_get_strings/7</docrelurl>
            </item>
            <item name= "_locale_export_po">
              <description>Write a generated PO or POT file to the output.</description>
              <signature>_locale_export_po($language = NULL, $output = NULL)</signature>
              <docrelurl>_locale_export_po/7</docrelurl>
            </item>
            <item name= "_locale_export_po_generate">
              <description>Generates the PO(T) file contents for given strings.</description>
              <signature>_locale_export_po_generate($language = NULL, $strings = array(), $header = NULL)</signature>
              <docrelurl>_locale_export_po_generate/7</docrelurl>
            </item>
            <item name= "_locale_export_remove_plural">
              <description>Removes plural index information from a string</description>
              <signature>_locale_export_remove_plural($entry)</signature>
              <docrelurl>_locale_export_remove_plural/7</docrelurl>
            </item>
            <item name= "_locale_export_string">
              <description>Print out a string on multiple lines</description>
              <signature>_locale_export_string($str)</signature>
              <docrelurl>_locale_export_string/7</docrelurl>
            </item>
            <item name= "_locale_export_wrap">
              <description>Custom word wrapping for Portable Object (Template) files.</description>
              <signature>_locale_export_wrap($str, $len)</signature>
              <docrelurl>_locale_export_wrap/7</docrelurl>
            </item>
            <item name= "_locale_get_predefined_list">
              <description>Some of the common languages with their English and native names Based on ISO 639 and http://people.w3.org/rishida/names/languages.html</description>
              <signature>_locale_get_predefined_list()</signature>
              <docrelurl>_locale_get_predefined_list/7</docrelurl>
            </item>
            <item name= "_locale_import_append_plural">
              <description>Modify a string to contain proper count indices This is a callback function used via array_map()</description>
              <signature>_locale_import_append_plural($entry, $key)</signature>
              <docrelurl>_locale_import_append_plural/7</docrelurl>
            </item>
            <item name= "_locale_import_message">
              <description>Sets an error message occurred during locale file parsing.</description>
              <signature>_locale_import_message($message, $file, $lineno = NULL)</signature>
              <docrelurl>_locale_import_message/7</docrelurl>
            </item>
            <item name= "_locale_import_one_string">
              <description>Imports a string into the database</description>
              <signature>_locale_import_one_string($op, $value = NULL, $mode = NULL, $lang = NULL, $file = NULL, $group = 'default')</signature>
              <docrelurl>_locale_import_one_string/7</docrelurl>
            </item>
            <item name= "_locale_import_one_string_db">
              <description>Import one string into the database.</description>
              <signature>_locale_import_one_string_db(&amp;$report, $langcode, $context, $source, $translation, $textgroup, $location, $mode, $plid = 0, $plural = 0)</signature>
              <docrelurl>_locale_import_one_string_db/7</docrelurl>
            </item>
            <item name= "_locale_import_parse_arithmetic">
              <description>Parses and sanitizes an arithmetic formula into a PHP expression While parsing, we ensure, that the operators have the right precedence and associativity.</description>
              <signature>_locale_import_parse_arithmetic($string)</signature>
              <docrelurl>_locale_import_parse_arithmetic/7</docrelurl>
            </item>
            <item name= "_locale_import_parse_header">
              <description>Parses a Gettext Portable Object file header</description>
              <signature>_locale_import_parse_header($header)</signature>
              <docrelurl>_locale_import_parse_header/7</docrelurl>
            </item>
            <item name= "_locale_import_parse_plural_forms">
              <description>Parses a Plural-Forms entry from a Gettext Portable Object file header</description>
              <signature>_locale_import_parse_plural_forms($pluralforms, $filepath)</signature>
              <docrelurl>_locale_import_parse_plural_forms/7</docrelurl>
            </item>
            <item name= "_locale_import_parse_quoted">
              <description>Parses a string in quotes</description>
              <signature>_locale_import_parse_quoted($string)</signature>
              <docrelurl>_locale_import_parse_quoted/7</docrelurl>
            </item>
            <item name= "_locale_import_po">
              <description>Parses Gettext Portable Object file information and inserts into database</description>
              <signature>_locale_import_po($file, $langcode, $mode, $group = NULL)</signature>
              <docrelurl>_locale_import_po/7</docrelurl>
            </item>
            <item name= "_locale_import_read_po">
              <description>Parses Gettext Portable Object file into an array</description>
              <signature>_locale_import_read_po($op, $file, $mode = NULL, $lang = NULL, $group = 'default')</signature>
              <docrelurl>_locale_import_read_po/7</docrelurl>
            </item>
            <item name= "_locale_import_shorten_comments">
              <description>Generate a short, one string version of the passed comment array</description>
              <signature>_locale_import_shorten_comments($comment)</signature>
              <docrelurl>_locale_import_shorten_comments/7</docrelurl>
            </item>
            <item name= "_locale_import_tokenize_formula">
              <description>Backward compatible implementation of token_get_all() for formula parsing</description>
              <signature>_locale_import_tokenize_formula($formula)</signature>
              <docrelurl>_locale_import_tokenize_formula/7</docrelurl>
            </item>
            <item name= "_locale_invalidate_js">
              <description>Force the JavaScript translation file(s) to be refreshed. This function sets a refresh flag for a specified language, or all languages except English, if none specified. JavaScript translation files are rebuilt (with locale_update_js_files()) the next time a request is served in that language.</description>
              <signature>_locale_invalidate_js($langcode = NULL)</signature>
              <docrelurl>_locale_invalidate_js/7</docrelurl>
            </item>
            <item name= "_locale_languages_common_controls">
              <description>Common elements of the language addition and editing form.</description>
              <signature>_locale_languages_common_controls(&amp;$form, $language = NULL)</signature>
              <docrelurl>_locale_languages_common_controls/7</docrelurl>
            </item>
            <item name= "_locale_languages_configure_form_language_table">
              <description>Helper function to build a language provider table.</description>
              <signature>_locale_languages_configure_form_language_table(&amp;$form, $type)</signature>
              <docrelurl>_locale_languages_configure_form_language_table/7</docrelurl>
            </item>
            <item name= "_locale_parse_js_file">
              <description>Parses a JavaScript file, extracts strings wrapped in Drupal.t() and Drupal.formatPlural() and inserts them into the database.</description>
              <signature>_locale_parse_js_file($filepath)</signature>
              <docrelurl>_locale_parse_js_file/7</docrelurl>
            </item>
            <item name= "_locale_prepare_predefined_list">
              <description>Prepares the language code list for a select form item with only the unsupported ones</description>
              <signature>_locale_prepare_predefined_list()</signature>
              <docrelurl>_locale_prepare_predefined_list/7</docrelurl>
            </item>
            <item name= "_locale_rebuild_js">
              <description>(Re-)Creates the JavaScript translation file for a language.</description>
              <signature>_locale_rebuild_js($langcode = NULL)</signature>
              <docrelurl>_locale_rebuild_js/7</docrelurl>
            </item>
            <item name= "_locale_translate_language_list">
              <description>List languages in search result table</description>
              <signature>_locale_translate_language_list($translation, $limit_language)</signature>
              <docrelurl>_locale_translate_language_list/7</docrelurl>
            </item>
            <item name= "_locale_translate_seek">
              <description>Perform a string search and display results in a table</description>
              <signature>_locale_translate_seek()</signature>
              <docrelurl>_locale_translate_seek/7</docrelurl>
            </item>
            <item name= "_locale_translate_seek_query">
              <description>Build array out of search criteria specified in request variables</description>
              <signature>_locale_translate_seek_query()</signature>
              <docrelurl>_locale_translate_seek_query/7</docrelurl>
            </item>
            <item name= "_lock_id">
              <description>Helper function to get this request's unique id.</description>
              <signature>_lock_id()</signature>
              <docrelurl>_lock_id/7</docrelurl>
            </item>
            <item name= "_menu_check_access">
              <description>Check access to a menu item using the access callback</description>
              <signature>_menu_check_access(&amp;$item, $map)</signature>
              <docrelurl>_menu_check_access/7</docrelurl>
            </item>
            <item name= "_menu_clear_page_cache">
              <description>Helper function to clear the page and block caches at most twice per page load.</description>
              <signature>_menu_clear_page_cache()</signature>
              <docrelurl>_menu_clear_page_cache/7</docrelurl>
            </item>
            <item name= "_menu_delete_item">
              <description>Helper function for menu_link_delete; deletes a single menu link.</description>
              <signature>_menu_delete_item($item, $force = FALSE)</signature>
              <docrelurl>_menu_delete_item/7</docrelurl>
            </item>
            <item name= "_menu_find_router_path">
              <description>Find the router path which will serve this path.</description>
              <signature>_menu_find_router_path($link_path)</signature>
              <docrelurl>_menu_find_router_path/7</docrelurl>
            </item>
            <item name= "_menu_get_options">
              <description>Helper function to get the items of the given menu.</description>
              <signature>_menu_get_options($menus, $available_menus, $item)</signature>
              <docrelurl>_menu_get_options/7</docrelurl>
            </item>
            <item name= "_menu_item_localize">
              <description>Localize the router item title using t() or another callback. Translate the title and description to allow storage of English title strings in the database, yet display of them in the language required by the current user.</description>
              <signature>_menu_item_localize(&amp;$item, $map, $link_translate = FALSE)</signature>
              <docrelurl>_menu_item_localize/7</docrelurl>
            </item>
            <item name= "_menu_link_build">
              <description>Builds a link from a router item.</description>
              <signature>_menu_link_build($item)</signature>
              <docrelurl>_menu_link_build/7</docrelurl>
            </item>
            <item name= "_menu_link_map_translate">
              <description>This function translates the path elements in the map using any to_arg helper function. These functions take an argument and return an object. See http://drupal.org/node/109153 for more information.</description>
              <signature>_menu_link_map_translate(&amp;$map, $to_arg_functions)</signature>
              <docrelurl>_menu_link_map_translate/7</docrelurl>
            </item>
            <item name= "_menu_link_move_children">
              <description>Update the children of a menu link that's being moved. The menu name, parents (p1 - p6), and depth are updated for all children of the link, and the has_children status of the previous parent is updated.</description>
              <signature>_menu_link_move_children($item, $existing_item)</signature>
              <docrelurl>_menu_link_move_children/7</docrelurl>
            </item>
            <item name= "_menu_link_parents_set">
              <description>Helper function that sets the p1..p9 values for a menu link being saved.</description>
              <signature>_menu_link_parents_set(&amp;$item, $parent)</signature>
              <docrelurl>_menu_link_parents_set/7</docrelurl>
            </item>
            <item name= "_menu_link_translate">
              <description>This function is similar to _menu_translate() but does link-specific preparation such as always calling to_arg functions</description>
              <signature>_menu_link_translate(&amp;$item)</signature>
              <docrelurl>_menu_link_translate/7</docrelurl>
            </item>
            <item name= "_menu_load_objects">
              <description>Loads objects into the map as defined in the $item['load_functions'].</description>
              <signature>_menu_load_objects(&amp;$item, &amp;$map)</signature>
              <docrelurl>_menu_load_objects/7</docrelurl>
            </item>
            <item name= "_menu_navigation_links_rebuild">
              <description>Helper function to build menu links for the items in the menu router.</description>
              <signature>_menu_navigation_links_rebuild($menu)</signature>
              <docrelurl>_menu_navigation_links_rebuild/7</docrelurl>
            </item>
            <item name= "_menu_overview_tree_form">
              <description>Recursive helper function for menu_overview_form().</description>
              <signature>_menu_overview_tree_form($tree)</signature>
              <docrelurl>_menu_overview_tree_form/7</docrelurl>
            </item>
            <item name= "_menu_parents_recurse">
              <description>Recursive helper function for menu_parent_options().</description>
              <signature>_menu_parents_recurse($tree, $menu_name, $indent, &amp;$options, $exclude, $depth_limit)</signature>
              <docrelurl>_menu_parents_recurse/7</docrelurl>
            </item>
            <item name= "_menu_parent_depth_limit">
              <description>Find the depth limit for items in the parent select.</description>
              <signature>_menu_parent_depth_limit($item)</signature>
              <docrelurl>_menu_parent_depth_limit/7</docrelurl>
            </item>
            <item name= "_menu_router_build">
              <description>Helper function to build the router table based on the data from hook_menu.</description>
              <signature>_menu_router_build($callbacks)</signature>
              <docrelurl>_menu_router_build/7</docrelurl>
            </item>
            <item name= "_menu_router_cache">
              <description>Helper function to store the menu router if we have it in memory.</description>
              <signature>_menu_router_cache($new_menu = NULL)</signature>
              <docrelurl>_menu_router_cache/7</docrelurl>
            </item>
            <item name= "_menu_router_save">
              <description>Helper function to save data from menu_router_build() to the router table.</description>
              <signature>_menu_router_save($menu, $masks)</signature>
              <docrelurl>_menu_router_save/7</docrelurl>
            </item>
            <item name= "_menu_set_expanded_menus">
              <description>Helper function to update a list of menus with expanded items</description>
              <signature>_menu_set_expanded_menus()</signature>
              <docrelurl>_menu_set_expanded_menus/7</docrelurl>
            </item>
            <item name= "_menu_site_is_offline">
              <description>Checks whether the site is in maintenance mode. This function will log the current user out and redirect to front page if the current user has no 'access site in maintenance mode' permission.</description>
              <signature>_menu_site_is_offline($check_only = FALSE)</signature>
              <docrelurl>_menu_site_is_offline/7</docrelurl>
            </item>
            <item name= "_menu_translate">
              <description>Handles dynamic path translation and menu access control. When a user arrives on a page such as node/5, this function determines what "5" corresponds to, by inspecting the page's menu path definition, node/%node. This will call node_load(5) to load the corresponding node object.</description>
              <signature>_menu_translate(&amp;$router_item, $map, $to_arg = FALSE)</signature>
              <docrelurl>_menu_translate/7</docrelurl>
            </item>
            <item name= "_menu_tree_check_access">
              <description>Recursive helper function for menu_tree_check_access()</description>
              <signature>_menu_tree_check_access(&amp;$tree)</signature>
              <docrelurl>_menu_tree_check_access/7</docrelurl>
            </item>
            <item name= "_menu_tree_cid">
              <description>Helper function - compute the real cache ID for menu tree data.</description>
              <signature>_menu_tree_cid($menu_name, $data)</signature>
              <docrelurl>_menu_tree_cid/7</docrelurl>
            </item>
            <item name= "_menu_tree_data">
              <description>Recursive helper function to build the data representing a menu tree. The function is a bit complex because the rendering of a link depends on the next menu link.</description>
              <signature>_menu_tree_data(&amp;$links, $parents, $depth)</signature>
              <docrelurl>_menu_tree_data/7</docrelurl>
            </item>
            <item name= "_menu_update_parental_status">
              <description>Check and update the has_children status for the parent of a link.</description>
              <signature>_menu_update_parental_status($item, $exclude = FALSE)</signature>
              <docrelurl>_menu_update_parental_status/7</docrelurl>
            </item>
            <item name= "_mime_header_decode">
              <description>Helper function to mime_header_decode</description>
              <signature>_mime_header_decode($matches)</signature>
              <docrelurl>_mime_header_decode/7</docrelurl>
            </item>
            <item name= "_module_build_dependencies">
              <description>Find dependencies any level deep and fill in required by information too.</description>
              <signature>_module_build_dependencies($files)</signature>
              <docrelurl>_module_build_dependencies/7</docrelurl>
            </item>
            <item name= "_node_access_rebuild_batch_finished">
              <description>Post-processing for node_access_rebuild_batch.</description>
              <signature>_node_access_rebuild_batch_finished($success, $results, $operations)</signature>
              <docrelurl>_node_access_rebuild_batch_finished/7</docrelurl>
            </item>
            <item name= "_node_access_rebuild_batch_operation">
              <description>Batch operation for node_access_rebuild_batch. This is a multistep operation : we go through all nodes by packs of 20. The batch processing engine interrupts processing and sends progress feedback after 1 second execution time.</description>
              <signature>_node_access_rebuild_batch_operation(&amp;$context)</signature>
              <docrelurl>_node_access_rebuild_batch_operation/7</docrelurl>
            </item>
            <item name= "_node_add_access">
              <description>
                ▸ 1 function calls _node_add_access()
                ▾ 1 function calls _node_add_access()
                node_page_default in modules/node/node.module
                Menu callback; Generate a listing of promoted nodes.
              </description>
              <signature>_node_add_access()</signature>
              <docrelurl>_node_add_access/7</docrelurl>
            </item>
            <item name= "_node_characters">
              <description>Helper function for teaser length choices.</description>
              <signature>_node_characters($length)</signature>
              <docrelurl>_node_characters/7</docrelurl>
            </item>
            <item name= "_node_custom_theme">
              <description>Theme callback for creating and editing nodes.</description>
              <signature>_node_custom_theme()</signature>
              <docrelurl>_node_custom_theme/7</docrelurl>
            </item>
            <item name= "_node_extract_type">
              <description>Extract the type name.</description>
              <signature>_node_extract_type($node)</signature>
              <docrelurl>_node_extract_type/7</docrelurl>
            </item>
            <item name= "_node_index_node">
              <description>Index a single node.</description>
              <signature>_node_index_node($node)</signature>
              <docrelurl>_node_index_node/7</docrelurl>
            </item>
            <item name= "_node_mass_update_batch_finished">
              <description>Node Mass Update Batch 'finished' callback.</description>
              <signature>_node_mass_update_batch_finished($success, $results, $operations)</signature>
              <docrelurl>_node_mass_update_batch_finished/7</docrelurl>
            </item>
            <item name= "_node_mass_update_batch_process">
              <description>Node Mass Update Batch operation</description>
              <signature>_node_mass_update_batch_process($nodes, $updates, &amp;$context)</signature>
              <docrelurl>_node_mass_update_batch_process/7</docrelurl>
            </item>
            <item name= "_node_mass_update_helper">
              <description>Node Mass Update - helper function.</description>
              <signature>_node_mass_update_helper($nid, $updates)</signature>
              <docrelurl>_node_mass_update_helper/7</docrelurl>
            </item>
            <item name= "_node_rankings">
              <description>Gather the rankings from the the hook_ranking implementations.</description>
              <signature>_node_rankings(SelectQueryExtender $query)</signature>
              <docrelurl>_node_rankings/7</docrelurl>
            </item>
            <item name= "_node_revision_access">
              <description>Code modules/node/node.module, line 1718</description>
              <signature>_node_revision_access($node, $op = 'view')</signature>
              <docrelurl>_node_revision_access/7</docrelurl>
            </item>
            <item name= "_node_save_revision">
              <description>Helper function to save a revision with the uid of the current user. Node is taken by reference, because drupal_write_record() updates the $node with the revision id, and we need to pass that back to the caller.</description>
              <signature>_node_save_revision($node, $uid, $update = NULL)</signature>
              <docrelurl>_node_save_revision/7</docrelurl>
            </item>
            <item name= "_node_types_build">
              <description>Builds and returns the list of available node types. The list of types is built by invoking hook_node_info() on all modules and comparing this information with the node types in the {node_type} table. These two information sources are not synchronized during module installation until node_types_rebuild() is called.</description>
              <signature>_node_types_build()</signature>
              <docrelurl>_node_types_build/7</docrelurl>
            </item>
            <item name= "_openid_create_message">
              <description>Create a serialized message packet as per spec: $key:$value\n .</description>
              <signature>_openid_create_message($data)</signature>
              <docrelurl>_openid_create_message/7</docrelurl>
            </item>
            <item name= "_openid_dh_base64_to_long">
              <description>
                ▸ 2 functions call _openid_dh_base64_to_long()
                ▾ 2 functions call _openid_dh_base64_to_long()
                openid_association in modules/openid/openid.module
                Attempt to create a shared secret with the OpenID Provider.
                _openid_test_endpoint_associate in modules/openid/tests/openid_test.module
                OpenID endpoint; handle "associate" requests (see OpenID Authentication 2.0, section 8).
              </description>
              <signature>_openid_dh_base64_to_long($str)</signature>
              <docrelurl>_openid_dh_base64_to_long/7</docrelurl>
            </item>
            <item name= "_openid_dh_binary_to_long">
              <description>
                ▸ 2 functions call _openid_dh_binary_to_long()
                ▾ 2 functions call _openid_dh_binary_to_long()
                _openid_dh_base64_to_long in modules/openid/openid.inc
                _openid_dh_rand in modules/openid/openid.inc
              </description>
              <signature>_openid_dh_binary_to_long($str)</signature>
              <docrelurl>_openid_dh_binary_to_long/7</docrelurl>
            </item>
            <item name= "_openid_dh_long_to_base64">
              <description>
                ▸ 2 functions call _openid_dh_long_to_base64()
                ▾ 2 functions call _openid_dh_long_to_base64()
                openid_association_request in modules/openid/openid.module
                _openid_test_endpoint_associate in modules/openid/tests/openid_test.module
                OpenID endpoint; handle "associate" requests (see OpenID Authentication 2.0, section 8).
              </description>
              <signature>_openid_dh_long_to_base64($str)</signature>
              <docrelurl>_openid_dh_long_to_base64/7</docrelurl>
            </item>
            <item name= "_openid_dh_long_to_binary">
              <description>
                ▸ 3 functions call _openid_dh_long_to_binary()
                ▾ 3 functions call _openid_dh_long_to_binary()
                _openid_dh_long_to_base64 in modules/openid/openid.inc
                _openid_dh_rand in modules/openid/openid.inc
                _openid_dh_xorsecret in modules/openid/openid.inc
              </description>
              <signature>_openid_dh_long_to_binary($long)</signature>
              <docrelurl>_openid_dh_long_to_binary/7</docrelurl>
            </item>
            <item name= "_openid_dh_rand">
              <description>
                ▸ 2 functions call _openid_dh_rand()
                ▾ 2 functions call _openid_dh_rand()
                openid_association in modules/openid/openid.module
                Attempt to create a shared secret with the OpenID Provider.
                _openid_test_endpoint_associate in modules/openid/tests/openid_test.module
                OpenID endpoint; handle "associate" requests (see OpenID Authentication 2.0, section 8).
              </description>
              <signature>_openid_dh_rand($stop)</signature>
              <docrelurl>_openid_dh_rand/7</docrelurl>
            </item>
            <item name= "_openid_dh_xorsecret">
              <description>
                ▸ 2 functions call _openid_dh_xorsecret()
                ▾ 2 functions call _openid_dh_xorsecret()
                openid_association in modules/openid/openid.module
                Attempt to create a shared secret with the OpenID Provider.
                _openid_test_endpoint_associate in modules/openid/tests/openid_test.module
                OpenID endpoint; handle "associate" requests (see OpenID Authentication 2.0, section 8).
              </description>
              <signature>_openid_dh_xorsecret($shared, $secret)</signature>
              <docrelurl>_openid_dh_xorsecret/7</docrelurl>
            </item>
            <item name= "_openid_encode_message">
              <description>Encode a message from _openid_create_message for HTTP Post</description>
              <signature>_openid_encode_message($message)</signature>
              <docrelurl>_openid_encode_message/7</docrelurl>
            </item>
            <item name= "_openid_get_bytes">
              <description>
                ▸ 2 functions call _openid_get_bytes()
                ▾ 2 functions call _openid_get_bytes()
                openid_test_install in modules/openid/tests/openid_test.install
                Implements hook_install().
                _openid_dh_rand in modules/openid/openid.inc
              </description>
              <signature>_openid_get_bytes($num_bytes)</signature>
              <docrelurl>_openid_get_bytes/7</docrelurl>
            </item>
            <item name= "_openid_get_params">
              <description>
                ▸ 1 function calls _openid_get_params()
                ▾ 1 function calls _openid_get_params()
                _openid_response in modules/openid/openid.inc
              </description>
              <signature>_openid_get_params($str)</signature>
              <docrelurl>_openid_get_params/7</docrelurl>
            </item>
            <item name= "_openid_hmac">
              <description>
                ▸ 1 function calls _openid_hmac()
                ▾ 1 function calls _openid_hmac()
                _openid_signature in modules/openid/openid.inc
                Sign certain keys in a message
              </description>
              <signature>_openid_hmac($key, $text)</signature>
              <docrelurl>_openid_hmac/7</docrelurl>
            </item>
            <item name= "_openid_is_xri">
              <description>Determine if the given identifier is an XRI ID.</description>
              <signature>_openid_is_xri($identifier)</signature>
              <docrelurl>_openid_is_xri/7</docrelurl>
            </item>
            <item name= "_openid_link_href">
              <description>Pull the href attribute out of an html link element.</description>
              <signature>_openid_link_href($rel, $html)</signature>
              <docrelurl>_openid_link_href/7</docrelurl>
            </item>
            <item name= "_openid_meta_httpequiv">
              <description>Pull the http-equiv attribute out of an html meta element</description>
              <signature>_openid_meta_httpequiv($equiv, $html)</signature>
              <docrelurl>_openid_meta_httpequiv/7</docrelurl>
            </item>
            <item name= "_openid_nonce">
              <description>Return a nonce value - formatted per OpenID spec.</description>
              <signature>_openid_nonce()</signature>
              <docrelurl>_openid_nonce/7</docrelurl>
            </item>
            <item name= "_openid_parse_message">
              <description>Convert a direct communication message into an associative array.</description>
              <signature>_openid_parse_message($message)</signature>
              <docrelurl>_openid_parse_message/7</docrelurl>
            </item>
            <item name= "_openid_response">
              <description>
                ▸ 1 function calls _openid_response()
                ▾ 1 function calls _openid_response()
                openid_complete in modules/openid/openid.module
                Completes OpenID authentication by validating returned data from the OpenID Provider.
              </description>
              <signature>_openid_response($str = NULL)</signature>
              <docrelurl>_openid_response/7</docrelurl>
            </item>
            <item name= "_openid_select_service">
              <description>Select a service element. The procedure is described in OpenID Authentication 2.0, section 7.3.2.</description>
              <signature>_openid_select_service(array $services)</signature>
              <docrelurl>_openid_select_service/7</docrelurl>
            </item>
            <item name= "_openid_signature">
              <description>Sign certain keys in a message</description>
              <signature>_openid_signature($association, $message_array, $keys_to_sign)</signature>
              <docrelurl>_openid_signature/7</docrelurl>
            </item>
            <item name= "_openid_test_endpoint_associate">
              <description>OpenID endpoint; handle "associate" requests (see OpenID Authentication 2.0, section 8). The purpose of association is to send the secret MAC key to the Relying Party using Diffie-Hellman key exchange. The MAC key is used in subsequent "authenticate" requests. The "associate" request is made by the Relying Party (in the testing scenario, this is the OpenID module that communicates with the endpoint using drupal_http_request()).</description>
              <signature>_openid_test_endpoint_associate()</signature>
              <docrelurl>_openid_test_endpoint_associate/7</docrelurl>
            </item>
            <item name= "_openid_test_endpoint_authenticate">
              <description>OpenID endpoint; handle "authenticate" requests. All requests result in a successful response. The request is a GET or POST made by the user's browser based on an HTML form or HTTP redirect generated by the Relying Party. The user is redirected back to the Relying Party using a URL containing a signed message in the query string confirming the user's identity.</description>
              <signature>_openid_test_endpoint_authenticate()</signature>
              <docrelurl>_openid_test_endpoint_authenticate/7</docrelurl>
            </item>
            <item name= "_openid_url_normalize">
              <description>OpenID normalization method: normalize URL identifiers.</description>
              <signature>_openid_url_normalize($url)</signature>
              <docrelurl>_openid_url_normalize/7</docrelurl>
            </item>
            <item name= "_openid_user_login_form_alter">
              <description>
                ▸ 2 functions call _openid_user_login_form_alter()
                ▾ 2 functions call _openid_user_login_form_alter()
                openid_form_user_login_alter in modules/openid/openid.module
                Implements hook_form_FORM_ID_alter().
                openid_form_user_login_block_alter in modules/openid/openid.module
                Implements hook_form_FORM_ID_alter().
              </description>
              <signature>_openid_user_login_form_alter(&amp;$form, &amp;$form_state)</signature>
              <docrelurl>_openid_user_login_form_alter/7</docrelurl>
            </item>
            <item name= "_openid_xrds_discovery">
              <description>OpenID discovery method: perform a XRDS discovery.</description>
              <signature>_openid_xrds_discovery($claimed_id)</signature>
              <docrelurl>_openid_xrds_discovery/7</docrelurl>
            </item>
            <item name= "_openid_xrds_parse">
              <description>Parse an XRDS document.</description>
              <signature>_openid_xrds_parse($raw_xml)</signature>
              <docrelurl>_openid_xrds_parse/7</docrelurl>
            </item>
            <item name= "_openid_xri_discovery">
              <description>OpenID discovery method: perform an XRI discovery.</description>
              <signature>_openid_xri_discovery($claimed_id)</signature>
              <docrelurl>_openid_xri_discovery/7</docrelurl>
            </item>
            <item name= "_openid_xri_normalize">
              <description>OpenID normalization method: normalize XRI identifiers.</description>
              <signature>_openid_xri_normalize($identifier)</signature>
              <docrelurl>_openid_xri_normalize/7</docrelurl>
            </item>
            <item name= "_options_form_to_storage">
              <description>Transforms submitted form values into field storage format.</description>
              <signature>_options_form_to_storage($element)</signature>
              <docrelurl>_options_form_to_storage/7</docrelurl>
            </item>
            <item name= "_options_get_options">
              <description>Collects the options for a field.</description>
              <signature>_options_get_options($field, $instance, $properties)</signature>
              <docrelurl>_options_get_options/7</docrelurl>
            </item>
            <item name= "_options_prepare_options">
              <description>Sanitizes the options. The function is recursive to support optgroups.</description>
              <signature>_options_prepare_options(&amp;$options, $properties)</signature>
              <docrelurl>_options_prepare_options/7</docrelurl>
            </item>
            <item name= "_options_properties">
              <description>Describes the preparation steps required by each widget.</description>
              <signature>_options_properties($type, $multiple, $required)</signature>
              <docrelurl>_options_properties/7</docrelurl>
            </item>
            <item name= "_options_storage_to_form">
              <description>Transforms stored field values into the format the widgets need.</description>
              <signature>_options_storage_to_form($items, $options, $column, $properties)</signature>
              <docrelurl>_options_storage_to_form/7</docrelurl>
            </item>
            <item name= "_overlay_region_list">
              <description>Helper function for returning a list of page regions related to the overlay.</description>
              <signature>_overlay_region_list($type)</signature>
              <docrelurl>_overlay_region_list/7</docrelurl>
            </item>
            <item name= "_password_base64_encode">
              <description>Encode bytes into printable base 64 using the *nix standard from crypt().</description>
              <signature>_password_base64_encode($input, $count)</signature>
              <docrelurl>_password_base64_encode/7</docrelurl>
            </item>
            <item name= "_password_crypt">
              <description>Hash a password using a secure stretched hash. By using a salt and repeated hashing the password is "stretched". Its security is increased because it becomes much more computationally costly for an attacker to try to break the hash by brute-force computation of the hashes of a large number of plain-text words or strings to find a match.</description>
              <signature>_password_crypt($algo, $password, $setting)</signature>
              <docrelurl>_password_crypt/7</docrelurl>
            </item>
            <item name= "_password_generate_salt">
              <description>Generates a random base 64-encoded salt prefixed with settings for the hash. Proper use of salts may defeat a number of attacks, including:</description>
              <signature>_password_generate_salt($count_log2)</signature>
              <docrelurl>_password_generate_salt/7</docrelurl>
            </item>
            <item name= "_password_get_count_log2">
              <description>Parse the log2 iteration count from a stored hash or setting string.</description>
              <signature>_password_get_count_log2($setting)</signature>
              <docrelurl>_password_get_count_log2/7</docrelurl>
            </item>
            <item name= "_password_itoa64">
              <description>Returns a string for mapping an int to the corresponding base 64 character.</description>
              <signature>_password_itoa64()</signature>
              <docrelurl>_password_itoa64/7</docrelurl>
            </item>
            <item name= "_php_filter_tips">
              <description>Tips callback for php filter.</description>
              <signature>_php_filter_tips($filter, $format, $long = FALSE)</signature>
              <docrelurl>_php_filter_tips/7</docrelurl>
            </item>
            <item name= "_poll_choice_form">
              <description>
                ▸ 1 function calls _poll_choice_form()
                ▾ 1 function calls _poll_choice_form()
                poll_form in modules/poll/poll.module
                Implements hook_form().
              </description>
              <signature>_poll_choice_form($key, $chid = NULL, $value = '', $votes = 0, $weight = 0, $size = 10)</signature>
              <docrelurl>_poll_choice_form/7</docrelurl>
            </item>
            <item name= "_poll_menu_access">
              <description>Callback function to see if a node is acceptable for poll menu items.</description>
              <signature>_poll_menu_access($node, $perm, $inspect_allowvotes)</signature>
              <docrelurl>_poll_menu_access/7</docrelurl>
            </item>
            <item name= "_profile_field_serialize">
              <description>
                ▸ 2 functions call _profile_field_serialize()
                ▾ 2 functions call _profile_field_serialize()
                profile_save_profile in modules/profile/profile.module
                profile_user_load in modules/profile/profile.module
                Implements hook_user_load().
              </description>
              <signature>_profile_field_serialize($type = NULL)</signature>
              <docrelurl>_profile_field_serialize/7</docrelurl>
            </item>
            <item name= "_profile_field_types">
              <description>
                ▸ 2 functions call _profile_field_types()
                ▾ 2 functions call _profile_field_types()
                profile_admin_overview in modules/profile/profile.admin.inc
                Form builder to display a listing of all editable profile fields.
                profile_field_form in modules/profile/profile.admin.inc
                Menu callback: Generate a form to add/edit a user profile field.
              </description>
              <signature>_profile_field_types($type = NULL)</signature>
              <docrelurl>_profile_field_types/7</docrelurl>
            </item>
            <item name= "_profile_form_explanation">
              <description>
                ▸ 1 function calls _profile_form_explanation()
                ▾ 1 function calls _profile_form_explanation()
                profile_form_alter in modules/profile/profile.module
                Implements hook_form_alter().
              </description>
              <signature>_profile_form_explanation($field)</signature>
              <docrelurl>_profile_form_explanation/7</docrelurl>
            </item>
            <item name= "_profile_get_fields">
              <description>
                ▸ 3 functions call _profile_get_fields()
                ▾ 3 functions call _profile_get_fields()
                profile_form_alter in modules/profile/profile.module
                Implements hook_form_alter().
                profile_save_profile in modules/profile/profile.module
                profile_user_form_validate in modules/profile/profile.module
                Form validation handler for the user register/profile form.
              </description>
              <signature>_profile_get_fields($category, $register = FALSE)</signature>
              <docrelurl>_profile_get_fields/7</docrelurl>
            </item>
            <item name= "_profile_update_user_fields">
              <description>Helper function: update an array of user fields by calling profile_view_field</description>
              <signature>_profile_update_user_fields($fields, $account)</signature>
              <docrelurl>_profile_update_user_fields/7</docrelurl>
            </item>
            <item name= "_rdf_get_default_mapping">
              <description>Returns the default RDF mapping for a given entity type.</description>
              <signature>_rdf_get_default_mapping($type)</signature>
              <docrelurl>_rdf_get_default_mapping/7</docrelurl>
            </item>
            <item name= "_rdf_mapping_load">
              <description>Helper function to retrieve a RDF mapping from the database.</description>
              <signature>_rdf_mapping_load($type, $bundle)</signature>
              <docrelurl>_rdf_mapping_load/7</docrelurl>
            </item>
            <item name= "_registry_check_code">
              <description>Helper to check for a resource in the registry.</description>
              <signature>_registry_check_code($type, $name = NULL)</signature>
              <docrelurl>_registry_check_code/7</docrelurl>
            </item>
            <item name= "_registry_parse_file">
              <description>Parse a file and save its function and class listings.</description>
              <signature>_registry_parse_file($filename, $contents, $module = '', $weight = 0)</signature>
              <docrelurl>_registry_parse_file/7</docrelurl>
            </item>
            <item name= "_registry_parse_files">
              <description>Parse all files that have changed since the registry was last built, and save their function and class listings.</description>
              <signature>_registry_parse_files($files)</signature>
              <docrelurl>_registry_parse_files/7</docrelurl>
            </item>
            <item name= "_registry_update">
              <description>Does the work for registry_update().</description>
              <signature>_registry_update()</signature>
              <docrelurl>_registry_update/7</docrelurl>
            </item>
            <item name= "_search_excerpt_replace">
              <description>Helper function for array_walk in search_except.</description>
              <signature>_search_excerpt_replace(&amp;$text)</signature>
              <docrelurl>_search_excerpt_replace/7</docrelurl>
            </item>
            <item name= "_search_get_module_names">
              <description>Helper function to get real module names.</description>
              <signature>_search_get_module_names()</signature>
              <docrelurl>_search_get_module_names/7</docrelurl>
            </item>
            <item name= "_search_index_truncate">
              <description>Helper function for array_walk in search_index_split.</description>
              <signature>_search_index_truncate(&amp;$text)</signature>
              <docrelurl>_search_index_truncate/7</docrelurl>
            </item>
            <item name= "_search_menu_access">
              <description>Access callback for search tabs.</description>
              <signature>_search_menu_access($name)</signature>
              <docrelurl>_search_menu_access/7</docrelurl>
            </item>
            <item name= "_session_test_get">
              <description>Page callback, prints the stored session value to the screen.</description>
              <signature>_session_test_get()</signature>
              <docrelurl>_session_test_get/7</docrelurl>
            </item>
            <item name= "_session_test_id">
              <description>Menu callback: print the current session ID.</description>
              <signature>_session_test_id()</signature>
              <docrelurl>_session_test_id/7</docrelurl>
            </item>
            <item name= "_session_test_no_set">
              <description>Menu callback: turns off session saving and then tries to save a value anyway.</description>
              <signature>_session_test_no_set($value)</signature>
              <docrelurl>_session_test_no_set/7</docrelurl>
            </item>
            <item name= "_session_test_set">
              <description>Page callback, stores a value in $_SESSION['session_test_value'].</description>
              <signature>_session_test_set($value)</signature>
              <docrelurl>_session_test_set/7</docrelurl>
            </item>
            <item name= "_session_test_set_message">
              <description>Menu callback, sets a message to me displayed on the following page.</description>
              <signature>_session_test_set_message()</signature>
              <docrelurl>_session_test_set_message/7</docrelurl>
            </item>
            <item name= "_session_test_set_message_but_dont_save">
              <description>Menu callback, sets a message but call drupal_save_session(FALSE).</description>
              <signature>_session_test_set_message_but_dont_save()</signature>
              <docrelurl>_session_test_set_message_but_dont_save/7</docrelurl>
            </item>
            <item name= "_session_test_set_not_started">
              <description>Menu callback, stores a value in $_SESSION['session_test_value'] without having started the session in advance.</description>
              <signature>_session_test_set_not_started()</signature>
              <docrelurl>_session_test_set_not_started/7</docrelurl>
            </item>
            <item name= "_shortcut_link_form_elements">
              <description>Helper function for building a form for adding or editing shortcut links.</description>
              <signature>_shortcut_link_form_elements($shortcut_link = NULL)</signature>
              <docrelurl>_shortcut_link_form_elements/7</docrelurl>
            </item>
            <item name= "_simpletest_batch_finished">
              <description>Code modules/simpletest/simpletest.module, line 223</description>
              <signature>_simpletest_batch_finished($success, $results, $operations, $elapsed)</signature>
              <docrelurl>_simpletest_batch_finished/7</docrelurl>
            </item>
            <item name= "_simpletest_batch_operation">
              <description>Batch operation callback.</description>
              <signature>_simpletest_batch_operation($test_list_init, $test_id, &amp;$context)</signature>
              <docrelurl>_simpletest_batch_operation/7</docrelurl>
            </item>
            <item name= "_simpletest_format_summary_line">
              <description>
                ▸ 2 functions call _simpletest_format_summary_line()
                ▾ 2 functions call _simpletest_format_summary_line()
                theme_simpletest_result_summary in modules/simpletest/simpletest.pages.inc
                Returns HTML for the summary status of a simpletest result.
                _simpletest_batch_operation in modules/simpletest/simpletest.module
                Batch operation callback.
              </description>
              <signature>_simpletest_format_summary_line($summary)</signature>
              <docrelurl>_simpletest_format_summary_line/7</docrelurl>
            </item>
            <item name= "_simpletest_sort_by_title">
              <description>Sort element by title instead of by class name.</description>
              <signature>_simpletest_sort_by_title($a, $b)</signature>
              <docrelurl>_simpletest_sort_by_title/7</docrelurl>
            </item>
            <item name= "_statistics_format_item">
              <description>
                ▸ 3 functions call _statistics_format_item()
                ▾ 3 functions call _statistics_format_item()
                statistics_recent_hits in modules/statistics/statistics.admin.inc
                Menu callback; presents the "recent hits" page.
                statistics_top_pages in modules/statistics/statistics.admin.inc
                Menu callback; presents the "top pages" page.
                statistics_user_tracker in modules/statistics/statistics.pages.inc
              </description>
              <signature>_statistics_format_item($title, $path)</signature>
              <docrelurl>_statistics_format_item/7</docrelurl>
            </item>
            <item name= "_statistics_link">
              <description>It is possible to adjust the width of columns generated by the statistics module.</description>
              <signature>_statistics_link($path, $width = 35)</signature>
              <docrelurl>_statistics_link/7</docrelurl>
            </item>
            <item name= "_system_batch_theme">
              <description>Theme callback for the default batch page.</description>
              <signature>_system_batch_theme()</signature>
              <docrelurl>_system_batch_theme/7</docrelurl>
            </item>
            <item name= "_system_date_formats_build">
              <description>Builds and returns the list of available date formats.</description>
              <signature>_system_date_formats_build()</signature>
              <docrelurl>_system_date_formats_build/7</docrelurl>
            </item>
            <item name= "_system_date_format_types_build">
              <description>Builds and returns the list of available date types.</description>
              <signature>_system_date_format_types_build()</signature>
              <docrelurl>_system_date_format_types_build/7</docrelurl>
            </item>
            <item name= "_system_default_theme_features">
              <description>Returns an array of default theme features.</description>
              <signature>_system_default_theme_features()</signature>
              <docrelurl>_system_default_theme_features/7</docrelurl>
            </item>
            <item name= "_system_filetransfer_backend_form_common">
              <description>Helper function because SSH and FTP backends share the same elements</description>
              <signature>_system_filetransfer_backend_form_common()</signature>
              <docrelurl>_system_filetransfer_backend_form_common/7</docrelurl>
            </item>
            <item name= "_system_is_incompatible">
              <description>Recursively check compatibility.</description>
              <signature>_system_is_incompatible(&amp;$incompatible, $files, $file)</signature>
              <docrelurl>_system_is_incompatible/7</docrelurl>
            </item>
            <item name= "_system_modules_build_row">
              <description>Build a table row for the system modules page.</description>
              <signature>_system_modules_build_row($info, $extra)</signature>
              <docrelurl>_system_modules_build_row/7</docrelurl>
            </item>
            <item name= "_system_rebuild_module_data">
              <description>Helper function to scan and collect module .info data.</description>
              <signature>_system_rebuild_module_data()</signature>
              <docrelurl>_system_rebuild_module_data/7</docrelurl>
            </item>
            <item name= "_system_rebuild_theme_data">
              <description>Helper function to scan and collect theme .info data and their engines.</description>
              <signature>_system_rebuild_theme_data()</signature>
              <docrelurl>_system_rebuild_theme_data/7</docrelurl>
            </item>
            <item name= "_system_settings_form_automatic_defaults">
              <description>
                ▸ 2 functions call _system_settings_form_automatic_defaults()
                ▾ 2 functions call _system_settings_form_automatic_defaults()
                system_settings_form in modules/system/system.module
                Add default buttons to a form and set its prefix.
                _system_settings_form_automatic_defaults in modules/system/system.module
              </description>
              <signature>_system_settings_form_automatic_defaults($form)</signature>
              <docrelurl>_system_settings_form_automatic_defaults/7</docrelurl>
            </item>
            <item name= "_system_sort_requirements">
              <description>Helper function to sort requirements.</description>
              <signature>_system_sort_requirements($a, $b)</signature>
              <docrelurl>_system_sort_requirements/7</docrelurl>
            </item>
            <item name= "_system_test_first_shutdown_function">
              <description>Dummy shutdown function which registers another shutdown function.</description>
              <signature>_system_test_first_shutdown_function($arg1, $arg2)</signature>
              <docrelurl>_system_test_first_shutdown_function/7</docrelurl>
            </item>
            <item name= "_system_test_second_shutdown_function">
              <description>Dummy shutdown function.</description>
              <signature>_system_test_second_shutdown_function($arg1, $arg2)</signature>
              <docrelurl>_system_test_second_shutdown_function/7</docrelurl>
            </item>
            <item name= "_system_themes_access">
              <description>Menu item access callback - only admin or enabled themes can be accessed.</description>
              <signature>_system_themes_access($theme)</signature>
              <docrelurl>_system_themes_access/7</docrelurl>
            </item>
            <item name= "_system_theme_settings_validate_path">
              <description>Helper function for the system_theme_settings form. Attempts to validate normal system paths, paths relative to the public files directory, or stream wrapper URIs. If the given path is any of the above, returns a valid path or URI that the theme system can display.</description>
              <signature>_system_theme_settings_validate_path($path)</signature>
              <docrelurl>_system_theme_settings_validate_path/7</docrelurl>
            </item>
            <item name= "_system_update_bootstrap_status">
              <description>Refresh bootstrap column in the system table. This is called internally by module_enable/disable() to flag modules that implement hooks used during bootstrap, such as hook_boot(). These modules are loaded earlier to invoke the hooks.</description>
              <signature>_system_update_bootstrap_status()</signature>
              <docrelurl>_system_update_bootstrap_status/7</docrelurl>
            </item>
            <item name= "_taxonomy_get_tid_from_term">
              <description>Helper function for array_map purposes.</description>
              <signature>_taxonomy_get_tid_from_term($term)</signature>
              <docrelurl>_taxonomy_get_tid_from_term/7</docrelurl>
            </item>
            <item name= "_template_preprocess_default_variables">
              <description>Returns hook-independant variables to template_preprocess().</description>
              <signature>_template_preprocess_default_variables()</signature>
              <docrelurl>_template_preprocess_default_variables/7</docrelurl>
            </item>
            <item name= "_text_sanitize">
              <description>Sanitizes the 'value' or 'summary' data of a text value. Depending on whether the field instance uses text processing, data is run through check_plain() or check_markup().</description>
              <signature>_text_sanitize($instance, $langcode, $item, $column)</signature>
              <docrelurl>_text_sanitize/7</docrelurl>
            </item>
            <item name= "_theme_build_registry">
              <description>Rebuild the theme registry cache.</description>
              <signature>_theme_build_registry($theme, $base_theme, $theme_engine)</signature>
              <docrelurl>_theme_build_registry/7</docrelurl>
            </item>
            <item name= "_theme_custom_theme">
              <description>Custom theme callback.</description>
              <signature>_theme_custom_theme()</signature>
              <docrelurl>_theme_custom_theme/7</docrelurl>
            </item>
            <item name= "_theme_load_offline_registry">
              <description>This builds the registry when the site needs to bypass any database calls.</description>
              <signature>_theme_load_offline_registry($theme, $base_theme = NULL, $theme_engine = NULL)</signature>
              <docrelurl>_theme_load_offline_registry/7</docrelurl>
            </item>
            <item name= "_theme_load_registry">
              <description>Get the theme_registry cache from the database; if it doesn't exist, build it.</description>
              <signature>_theme_load_registry($theme, $base_theme = NULL, $theme_engine = NULL)</signature>
              <docrelurl>_theme_load_registry/7</docrelurl>
            </item>
            <item name= "_theme_process_registry">
              <description>Process a single implementation of hook_theme().</description>
              <signature>_theme_process_registry(&amp;$cache, $name, $type, $theme, $path)</signature>
              <docrelurl>_theme_process_registry/7</docrelurl>
            </item>
            <item name= "_theme_save_registry">
              <description>Write the theme_registry cache into the database.</description>
              <signature>_theme_save_registry($theme, $registry)</signature>
              <docrelurl>_theme_save_registry/7</docrelurl>
            </item>
            <item name= "_theme_set_registry">
              <description>Store the theme registry in memory.</description>
              <signature>_theme_set_registry($registry = NULL)</signature>
              <docrelurl>_theme_set_registry/7</docrelurl>
            </item>
            <item name= "_theme_table_cell">
              <description>
                ▸ 2 functions call _theme_table_cell()
                ▾ 2 functions call _theme_table_cell()
                template_preprocess_forum_topic_list in modules/forum/forum.module
                Preprocess variables to format the topic listing.
                theme_table in includes/theme.inc
                Returns HTML for a table.
              </description>
              <signature>_theme_table_cell($cell, $header = FALSE)</signature>
              <docrelurl>_theme_table_cell/7</docrelurl>
            </item>
            <item name= "_theme_test_suggestion">
              <description>Page callback, calls a theme hook suggestion.</description>
              <signature>_theme_test_suggestion()</signature>
              <docrelurl>_theme_test_suggestion/7</docrelurl>
            </item>
            <item name= "_toolbar_is_collapsed">
              <description>Determines the current state of the toolbar drawer's visibility.</description>
              <signature>_toolbar_is_collapsed()</signature>
              <docrelurl>_toolbar_is_collapsed/7</docrelurl>
            </item>
            <item name= "_tracker_add">
              <description>Update indexing tables when a node is added, updated or commented on.</description>
              <signature>_tracker_add($nid, $uid, $changed)</signature>
              <docrelurl>_tracker_add/7</docrelurl>
            </item>
            <item name= "_tracker_calculate_changed">
              <description>Determine the max timestamp between $node->changed and the last comment.</description>
              <signature>_tracker_calculate_changed($nid)</signature>
              <docrelurl>_tracker_calculate_changed/7</docrelurl>
            </item>
            <item name= "_tracker_myrecent_access">
              <description>Access callback for tracker/%user_uid_optional.</description>
              <signature>_tracker_myrecent_access($account)</signature>
              <docrelurl>_tracker_myrecent_access/7</docrelurl>
            </item>
            <item name= "_tracker_remove">
              <description>Clean up indexed data when nodes or comments are removed.</description>
              <signature>_tracker_remove($nid, $uid = NULL, $changed = NULL)</signature>
              <docrelurl>_tracker_remove/7</docrelurl>
            </item>
            <item name= "_tracker_user_access">
              <description>Access callback for user/%user/track.</description>
              <signature>_tracker_user_access($account)</signature>
              <docrelurl>_tracker_user_access/7</docrelurl>
            </item>
            <item name= "_translation_tab_access">
              <description>Menu access callback. Only display translation tab for node types, which have translation enabled and where the current node is not language neutral (which should span all languages).</description>
              <signature>_translation_tab_access($node)</signature>
              <docrelurl>_translation_tab_access/7</docrelurl>
            </item>
            <item name= "_trigger_comment">
              <description>Calls action functions for comment triggers.</description>
              <signature>_trigger_comment($a1, $hook)</signature>
              <docrelurl>_trigger_comment/7</docrelurl>
            </item>
            <item name= "_trigger_get_all_info">
              <description>Retrieves and caches information from hook_trigger_info() implementations.</description>
              <signature>_trigger_get_all_info()</signature>
              <docrelurl>_trigger_get_all_info/7</docrelurl>
            </item>
            <item name= "_trigger_node">
              <description>Calls action functions for node triggers.</description>
              <signature>_trigger_node($node, $hook, $a3 = NULL, $a4 = NULL)</signature>
              <docrelurl>_trigger_node/7</docrelurl>
            </item>
            <item name= "_trigger_normalize_comment_context">
              <description>Loads associated objects for comment triggers. When an action is called in a context that does not match its type, the object that the action expects must be retrieved. For example, when an action that works on nodes is called during the comment hook, the node object is not available since the comment hook doesn't pass it. So here we load the object the action expects.</description>
              <signature>_trigger_normalize_comment_context($type, $comment)</signature>
              <docrelurl>_trigger_normalize_comment_context/7</docrelurl>
            </item>
            <item name= "_trigger_normalize_node_context">
              <description>Loads associated objects for node triggers. When an action is called in a context that does not match its type, the object that the action expects must be retrieved. For example, when an action that works on users is called during a node hook implementation, the user object is not available since the node hook call doesn't pass it. So here we load the object the action expects.</description>
              <signature>_trigger_normalize_node_context($type, $node)</signature>
              <docrelurl>_trigger_normalize_node_context/7</docrelurl>
            </item>
            <item name= "_trigger_normalize_user_context">
              <description>Loads associated objects for user triggers. When an action is called in a context that does not match its type, the object that the action expects must be retrieved. For example, when an action that works on nodes is called during the user hook, the node object is not available since the user hook doesn't pass it. So here we load the object the action expects.</description>
              <signature>_trigger_normalize_user_context($type, $account)</signature>
              <docrelurl>_trigger_normalize_user_context/7</docrelurl>
            </item>
            <item name= "_trigger_taxonomy">
              <description>Calls action functions for taxonomy triggers.</description>
              <signature>_trigger_taxonomy($hook, $array)</signature>
              <docrelurl>_trigger_taxonomy/7</docrelurl>
            </item>
            <item name= "_trigger_user">
              <description>Calls action functions for user triggers.</description>
              <signature>_trigger_user($hook, &amp;$edit, $account, $category = NULL)</signature>
              <docrelurl>_trigger_user/7</docrelurl>
            </item>
            <item name= "_unicode_caseflip">
              <description>Helper function for case conversion of Latin-1. Used for flipping U+C0-U+DE to U+E0-U+FD and back.</description>
              <signature>_unicode_caseflip($matches)</signature>
              <docrelurl>_unicode_caseflip/7</docrelurl>
            </item>
            <item name= "_unicode_check">
              <description>Perform checks about Unicode support in PHP, and set the right settings if needed. Because Drupal needs to be able to handle text in various encodings, we do not support mbstring function overloading. HTTP input/output conversion must be disabled for similar reasons.</description>
              <signature>_unicode_check()</signature>
              <docrelurl>_unicode_check/7</docrelurl>
            </item>
            <item name= "_update_authorize_clear_update_status">
              <description>Private helper function to clear cached available update status data. Since this function is run at such a low bootstrap level, update.module is not loaded. So, we can't just call _update_cache_clear(). However, the database is bootstrapped, so we can do a query ourselves to clear out what we want to clear.</description>
              <signature>_update_authorize_clear_update_status()</signature>
              <docrelurl>_update_authorize_clear_update_status/7</docrelurl>
            </item>
            <item name= "_update_batch_create_message">
              <description>Helper function to create a structure of log messages.</description>
              <signature>_update_batch_create_message(&amp;$project_results, $message, $success = TRUE)</signature>
              <docrelurl>_update_batch_create_message/7</docrelurl>
            </item>
            <item name= "_update_build_fetch_url">
              <description>Generates the URL to fetch information about project updates. This figures out the right URL to use, based on the project's .info file and the global defaults. Appends optional query arguments when the site is configured to report usage stats.</description>
              <signature>_update_build_fetch_url($project, $site_key = '')</signature>
              <docrelurl>_update_build_fetch_url/7</docrelurl>
            </item>
            <item name= "_update_cache_clear">
              <description>Invalidates cached data relating to update status.</description>
              <signature>_update_cache_clear($cid = NULL, $wildcard = FALSE)</signature>
              <docrelurl>_update_cache_clear/7</docrelurl>
            </item>
            <item name= "_update_cache_get">
              <description>Retrieve data from the private update status cache table.</description>
              <signature>_update_cache_get($cid)</signature>
              <docrelurl>_update_cache_get/7</docrelurl>
            </item>
            <item name= "_update_cache_set">
              <description>Store data in the private update status cache table.</description>
              <signature>_update_cache_set($cid, $data, $expire)</signature>
              <docrelurl>_update_cache_set/7</docrelurl>
            </item>
            <item name= "_update_create_fetch_task">
              <description>Add a task to the queue for fetching release history data for a project. We only create a new fetch task if there's no task already in the queue for this particular project (based on 'fetch_task::' entries in the {cache_update} table).</description>
              <signature>_update_create_fetch_task($project)</signature>
              <docrelurl>_update_create_fetch_task/7</docrelurl>
            </item>
            <item name= "_update_cron_notify">
              <description>Perform any notifications that should be done once cron fetches new data. This method checks the status of the site using the new data and depending on the configuration of the site, notifies administrators via email if there are new releases or missing security updates.</description>
              <signature>_update_cron_notify()</signature>
              <docrelurl>_update_cron_notify/7</docrelurl>
            </item>
            <item name= "_update_fetch_data">
              <description>Attempt to drain the queue of tasks for release history data to fetch.</description>
              <signature>_update_fetch_data()</signature>
              <docrelurl>_update_fetch_data/7</docrelurl>
            </item>
            <item name= "_update_get_cached_available_releases">
              <description>Return all currently cached data about available releases for all projects.</description>
              <signature>_update_get_cached_available_releases()</signature>
              <docrelurl>_update_get_cached_available_releases/7</docrelurl>
            </item>
            <item name= "_update_get_cache_multiple">
              <description>Return an array of cache items with a given cache ID prefix.</description>
              <signature>_update_get_cache_multiple($cid_prefix)</signature>
              <docrelurl>_update_get_cache_multiple/7</docrelurl>
            </item>
            <item name= "_update_get_fetch_url_base">
              <description>Return the base of the URL to fetch available update data for a project.</description>
              <signature>_update_get_fetch_url_base($project)</signature>
              <docrelurl>_update_get_fetch_url_base/7</docrelurl>
            </item>
            <item name= "_update_manager_extract_directory">
              <description>Return the directory where update archive files should be extracted. If the directory does not already exist, attempt to create it.</description>
              <signature>_update_manager_extract_directory()</signature>
              <docrelurl>_update_manager_extract_directory/7</docrelurl>
            </item>
            <item name= "_update_message_text">
              <description>Helper function to return the appropriate message text when the site is out of date or missing a security update. These error messages are shared by both update_requirements() for the site-wide status report at admin/reports/status and in the body of the notification emails generated by update_cron().</description>
              <signature>_update_message_text($msg_type, $msg_reason, $report_link = FALSE, $language = NULL)</signature>
              <docrelurl>_update_message_text/7</docrelurl>
            </item>
            <item name= "_update_no_data">
              <description>Prints a warning message when there is no data about available updates.</description>
              <signature>_update_no_data()</signature>
              <docrelurl>_update_no_data/7</docrelurl>
            </item>
            <item name= "_update_process_fetch_task">
              <description>Process a task to fetch available update data for a single project. Once the release history XML data is downloaded, it is parsed and saved into the {cache_update} table in an entry just for that project.</description>
              <signature>_update_process_fetch_task($project)</signature>
              <docrelurl>_update_process_fetch_task/7</docrelurl>
            </item>
            <item name= "_update_process_info_list">
              <description>Populate an array of project data. This iterates over a list of the installed modules or themes and groups them by project and status. A few parts of this function assume that enabled modules and themes are always processed first, and if disabled modules or themes are being processed (there is a setting to control if disabled code should be included in the Available updates report or not), those are only processed after $projects has been populated with information about the enabled code. 'Hidden' modules and themes are always ignored. This function also records the latest change time on the .info files for each module or theme, which is important data which is used when deciding if the cached available update data should be invalidated.</description>
              <signature>_update_process_info_list(&amp;$projects, $list, $project_type, $status)</signature>
              <docrelurl>_update_process_info_list/7</docrelurl>
            </item>
            <item name= "_update_project_status_sort">
              <description>Private sort function to order projects based on their status.</description>
              <signature>_update_project_status_sort($a, $b)</signature>
              <docrelurl>_update_project_status_sort/7</docrelurl>
            </item>
            <item name= "_update_refresh">
              <description>Clear out all the cached available update data and initiate re-fetching.</description>
              <signature>_update_refresh()</signature>
              <docrelurl>_update_refresh/7</docrelurl>
            </item>
            <item name= "_update_requirement_check">
              <description>Private helper method to fill in the requirements array. This is shared for both core and contrib to generate the right elements in the array for hook_requirements().</description>
              <signature>_update_requirement_check($project, $type)</signature>
              <docrelurl>_update_requirement_check/7</docrelurl>
            </item>
            <item name= "_user_cancel">
              <description>Last batch processing step for cancelling a user account. Since batch and session API require a valid user account, the actual cancellation of a user account needs to happen last.</description>
              <signature>_user_cancel($edit, $account, $method)</signature>
              <docrelurl>_user_cancel/7</docrelurl>
            </item>
            <item name= "_user_categories">
              <description>Retrieve a list of all user setting/information categories and sort them by weight.</description>
              <signature>_user_categories()</signature>
              <docrelurl>_user_categories/7</docrelurl>
            </item>
            <item name= "_user_mail_notify">
              <description>Conditionally create and send a notification email when a certain operation happens on the given user account.</description>
              <signature>_user_mail_notify($op, $account, $language = NULL)</signature>
              <docrelurl>_user_mail_notify/7</docrelurl>
            </item>
            <item name= "_user_mail_text">
              <description>Returns a mail string for a variable name. Used by user_mail() and the settings forms to retrieve strings.</description>
              <signature>_user_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE)</signature>
              <docrelurl>_user_mail_text/7</docrelurl>
            </item>
            <item name= "_user_sort">
              <description>Code modules/user/user.module, line 3085</description>
              <signature>_user_sort($a, $b)</signature>
              <docrelurl>_user_sort/7</docrelurl>
            </item>
            <item name= "_xmlrpc">
              <description>Performs one or more XML-RPC request(s).</description>
              <signature>_xmlrpc()</signature>
              <docrelurl>_xmlrpc/7</docrelurl>
            </item>
          </items>
      </globalfunctions>
    </php>
  </CodeCompletion>          

</WebPlatform>
